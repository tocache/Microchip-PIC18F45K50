

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Jun 09 17:55:10 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.35
    44                           ; Generated 05/05/2021 GMT
    45                           ; 
    46                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F45K50 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     _ADRESL	set	4035
    79  0000                     _ADRESH	set	4036
    80  0000                     _ADCON0	set	4034
    81  0000                     _ADCON1	set	4033
    82  0000                     _ADCON0bits	set	4034
    83  0000                     _ANSELAbits	set	3931
    84  0000                     _ANSELB	set	3932
    85  0000                     _PORTB	set	3969
    86  0000                     _LATB	set	3978
    87  0000                     _LATEbits	set	3981
    88  0000                     _TRISAbits	set	3986
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISCbits	set	3988
    91  0000                     _TRISE	set	3990
    92  0000                     _OSCCON	set	4051
    93  0000                     _WPUB	set	3973
    94  0000                     _INTCON3bits	set	4080
    95  0000                     _INTCON2bits	set	4081
    96  0000                     _ANSELCbits	set	3933
    97  0000                     _ANSELE	set	3935
    98  0000                     _T2CON	set	4026
    99  0000                     _PR2	set	4027
   100  0000                     _ADCON2	set	4032
   101  0000                     _INTCONbits	set	4082
   102  0000                     _CCP1CON	set	4029
   103  0000                     _CCPR1L	set	4030
   104                           
   105                           	psect	smallconst
   106  000800                     __psmallconst:
   107                           	callstack 0
   108  000800  00                 	db	0
   109  000801                     STR_2:
   110  000801  4D                 	db	77	;'M'
   111  000802  65                 	db	101	;'e'
   112  000803  20                 	db	32
   113  000804  76                 	db	118	;'v'
   114  000805  6F                 	db	111	;'o'
   115  000806  79                 	db	121	;'y'
   116  000807  20                 	db	32
   117  000808  61                 	db	97	;'a'
   118  000809  20                 	db	32
   119  00080A  6C                 	db	108	;'l'
   120  00080B  61                 	db	97	;'a'
   121  00080C  20                 	db	32
   122  00080D  62                 	db	98	;'b'
   123  00080E  69                 	db	105	;'i'
   124  00080F  63                 	db	99	;'c'
   125  000810  61                 	db	97	;'a'
   126  000811  00                 	db	0
   127  000812                     STR_1:
   128  000812  4C                 	db	76	;'L'
   129  000813  61                 	db	97	;'a'
   130  000814  62                 	db	98	;'b'
   131  000815  6F                 	db	111	;'o'
   132  000816  72                 	db	114	;'r'
   133  000817  61                 	db	97	;'a'
   134  000818  74                 	db	116	;'t'
   135  000819  6F                 	db	111	;'o'
   136  00081A  72                 	db	114	;'r'
   137  00081B  69                 	db	105	;'i'
   138  00081C  6F                 	db	111	;'o'
   139  00081D  20                 	db	32
   140  00081E  33                 	db	51	;'3'
   141  00081F  00                 	db	0
   142  000820                     STR_6:
   143  000820  4B                 	db	75	;'K'
   144  000821  61                 	db	97	;'a'
   145  000822  6C                 	db	108	;'l'
   146  000823  75                 	db	117	;'u'
   147  000824  6E                 	db	110	;'n'
   148  000825  20                 	db	32
   149  000826  4A                 	db	74	;'J'
   150  000827  6F                 	db	111	;'o'
   151  000828  73                 	db	115	;'s'
   152  000829  65                 	db	101	;'e'
   153  00082A  00                 	db	0
   154  00082B                     STR_7:
   155  00082B  4C                 	db	76	;'L'
   156  00082C  61                 	db	97	;'a'
   157  00082D  75                 	db	117	;'u'
   158  00082E  20                 	db	32
   159  00082F  47                 	db	71	;'G'
   160  000830  61                 	db	97	;'a'
   161  000831  6E                 	db	110	;'n'
   162  000832  00                 	db	0
   163  000833                     STR_4:
   164  000833  20                 	db	32
   165  000834  43                 	db	67	;'C'
   166  000835  54                 	db	84	;'T'
   167  000836  52                 	db	82	;'R'
   168  000837  3A                 	db	58	;':'
   169  000838  00                 	db	0
   170  000839                     STR_3:
   171  000839  41                 	db	65	;'A'
   172  00083A  4E                 	db	78	;'N'
   173  00083B  31                 	db	49	;'1'
   174  00083C  3A                 	db	58	;':'
   175  00083D  00                 	db	0
   176  00083E                     STR_5:
   177  00083E  41                 	db	65	;'A'
   178  00083F  4E                 	db	78	;'N'
   179  000840  39                 	db	57	;'9'
   180  000841  3A                 	db	58	;':'
   181  000842  00                 	db	0
   182  000843  00                 	db	0	; dummy byte at the end
   183  0000                     
   184                           ; #config settings
   185                           
   186                           	psect	cinit
   187  000FB2                     __pcinit:
   188                           	callstack 0
   189  000FB2                     start_initialization:
   190                           	callstack 0
   191  000FB2                     __initialization:
   192                           	callstack 0
   193                           
   194                           ; Clear objects allocated to COMRAM (5 bytes)
   195  000FB2  6A25               	clrf	(__pbssCOMRAM+4)& (0+255),c
   196  000FB4  6A24               	clrf	(__pbssCOMRAM+3)& (0+255),c
   197  000FB6  6A23               	clrf	(__pbssCOMRAM+2)& (0+255),c
   198  000FB8  6A22               	clrf	(__pbssCOMRAM+1)& (0+255),c
   199  000FBA  6A21               	clrf	__pbssCOMRAM& (0+255),c
   200  000FBC                     end_of_initialization:
   201                           	callstack 0
   202  000FBC                     __end_of__initialization:
   203                           	callstack 0
   204  000FBC  9026               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   205  000FBE  9226               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   206  000FC0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   207  000FC2  6EF8               	movwf	tblptru,c
   208  000FC4  0100               	movlb	0
   209  000FC6  EF22  F004         	goto	_main	;jump to C main() function
   210                           
   211                           	psect	bssCOMRAM
   212  000021                     __pbssCOMRAM:
   213                           	callstack 0
   214  000021                     _nivel:
   215                           	callstack 0
   216  000021                     	ds	1
   217  000022                     _unidad:
   218                           	callstack 0
   219  000022                     	ds	1
   220  000023                     _decena:
   221                           	callstack 0
   222  000023                     	ds	1
   223  000024                     _centena:
   224                           	callstack 0
   225  000024                     	ds	1
   226  000025                     _millar:
   227                           	callstack 0
   228  000025                     	ds	1
   229                           
   230                           	psect	cstackCOMRAM
   231  000001                     __pcstackCOMRAM:
   232                           	callstack 0
   233  000001                     ?i2_strlen:
   234                           	callstack 0
   235  000001                     i2ENVIA_NIBBLE@dato:
   236                           	callstack 0
   237  000001                     i2LEER_LCD@aux:
   238                           	callstack 0
   239  000001                     i2strlen@s:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x0
   243  000001                     	ds	1
   244  000002                     i2ENVIA_CHAR@dato:
   245                           	callstack 0
   246  000002                     i2ENVIA_LCD_CMD@dato:
   247                           	callstack 0
   248                           
   249                           ; 1 bytes @ 0x1
   250  000002                     	ds	1
   251  000003                     i2ENVIA_CHAR@aux:
   252                           	callstack 0
   253  000003                     i2ENVIA_LCD_CMD@aux:
   254                           	callstack 0
   255  000003                     i2strlen@a:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x2
   259  000003                     	ds	1
   260  000004                     i2POS_CURSOR@columna:
   261                           	callstack 0
   262                           
   263                           ; 1 bytes @ 0x3
   264  000004                     	ds	1
   265  000005                     i2POS_CURSOR@fila:
   266                           	callstack 0
   267  000005                     i2ESCRIBE_MENSAJE2@cadena:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x4
   271  000005                     	ds	2
   272  000007                     ??i2_ESCRIBE_MENSAJE2:
   273                           
   274                           ; 1 bytes @ 0x6
   275  000007                     	ds	2
   276  000009                     i2ESCRIBE_MENSAJE2@tam:
   277                           	callstack 0
   278                           
   279                           ; 1 bytes @ 0x8
   280  000009                     	ds	1
   281  00000A                     i2ESCRIBE_MENSAJE2@i:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0x9
   285  00000A                     	ds	1
   286  00000B                     ??_ISRs:
   287                           
   288                           ; 1 bytes @ 0xA
   289  00000B                     	ds	6
   290  000011                     ?_strlen:
   291                           	callstack 0
   292  000011                     ?_tomamuestra_ADC:
   293                           	callstack 0
   294  000011                     ?___lwmod:
   295                           	callstack 0
   296  000011                     ENVIA_NIBBLE@dato:
   297                           	callstack 0
   298  000011                     LEER_LCD@aux:
   299                           	callstack 0
   300  000011                     ___lwmod@dividend:
   301                           	callstack 0
   302  000011                     strlen@s:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x10
   306  000011                     	ds	1
   307  000012                     ENVIA_CHAR@dato:
   308                           	callstack 0
   309  000012                     ENVIA_LCD_CMD@dato:
   310                           	callstack 0
   311                           
   312                           ; 1 bytes @ 0x11
   313  000012                     	ds	1
   314  000013                     ??_tomamuestra_ADC:
   315  000013                     ENVIA_CHAR@aux:
   316                           	callstack 0
   317  000013                     ENVIA_LCD_CMD@aux:
   318                           	callstack 0
   319  000013                     ___lwmod@divisor:
   320                           	callstack 0
   321  000013                     strlen@a:
   322                           	callstack 0
   323                           
   324                           ; 2 bytes @ 0x12
   325  000013                     	ds	1
   326  000014                     ??_LCD_CONFIG:
   327  000014                     POS_CURSOR@columna:
   328                           	callstack 0
   329  000014                     CURSOR_ONOFF@estado:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x13
   333  000014                     	ds	1
   334  000015                     ??_LCD_INIT:
   335  000015                     POS_CURSOR@fila:
   336                           	callstack 0
   337  000015                     tomamuestra_ADC@canal:
   338                           	callstack 0
   339  000015                     ___lwmod@counter:
   340                           	callstack 0
   341  000015                     ESCRIBE_MENSAJE2@cadena:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x14
   345  000015                     	ds	1
   346  000016                     ?___lwdiv:
   347                           	callstack 0
   348  000016                     ___lwdiv@dividend:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x15
   352  000016                     	ds	1
   353  000017                     ??_ESCRIBE_MENSAJE2:
   354                           
   355                           ; 1 bytes @ 0x16
   356  000017                     	ds	1
   357  000018                     ___lwdiv@divisor:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x17
   361  000018                     	ds	1
   362  000019                     ESCRIBE_MENSAJE2@tam:
   363                           	callstack 0
   364                           
   365                           ; 1 bytes @ 0x18
   366  000019                     	ds	1
   367  00001A                     ESCRIBE_MENSAJE2@i:
   368                           	callstack 0
   369  00001A                     ___lwdiv@quotient:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x19
   373  00001A                     	ds	1
   374  00001B                     
   375                           ; 1 bytes @ 0x1A
   376  00001B                     	ds	1
   377  00001C                     ___lwdiv@counter:
   378                           	callstack 0
   379                           
   380                           ; 1 bytes @ 0x1B
   381  00001C                     	ds	1
   382  00001D                     convierte@numero:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x1C
   386  00001D                     	ds	2
   387  00001F                     ??_main:
   388                           
   389                           ; 1 bytes @ 0x1E
   390  00001F                     	ds	2
   391                           
   392 ;;
   393 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   394 ;;
   395 ;; *************** function _main *****************
   396 ;; Defined at:
   397 ;;		line 72 in file "maincode.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;		None
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : 0/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   411 ;;      Params:         0       0       0       0       0       0       0       0       0
   412 ;;      Locals:         0       0       0       0       0       0       0       0       0
   413 ;;      Temps:          2       0       0       0       0       0       0       0       0
   414 ;;      Totals:         2       0       0       0       0       0       0       0       0
   415 ;;Total ram usage:        2 bytes
   416 ;; Hardware stack levels required when called: 9
   417 ;; This function calls:
   418 ;;		_BORRAR_LCD
   419 ;;		_ENVIA_CHAR
   420 ;;		_ESCRIBE_MENSAJE2
   421 ;;		_POS_CURSOR
   422 ;;		_configuro
   423 ;;		_convierte
   424 ;;		_splash_screen
   425 ;;		_tomamuestra_ADC
   426 ;; This function is called by:
   427 ;;		Startup code after reset
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431                           	psect	text0
   432  000844                     __ptext0:
   433                           	callstack 0
   434  000844                     _main:
   435                           	callstack 22
   436  000844                     
   437                           ;maincode.c: 73:     configuro();
   438  000844  ECFD  F005         	call	_configuro	;wreg free
   439  000848                     
   440                           ;maincode.c: 74:     splash_screen();
   441  000848  ECA6  F007         	call	_splash_screen	;wreg free
   442  00084C                     
   443                           ;maincode.c: 75:     _delay((unsigned long)((2000)*(4000000UL/4000.0)));
   444  00084C  0E0B               	movlw	11
   445  00084E  6E20               	movwf	(??_main+1)^0,c
   446  000850  0E26               	movlw	38
   447  000852  6E1F               	movwf	??_main^0,c
   448  000854  0E5E               	movlw	94
   449  000856                     u527:
   450  000856  2EE8               	decfsz	wreg,f,c
   451  000858  D7FE               	bra	u527
   452  00085A  2E1F               	decfsz	??_main^0,f,c
   453  00085C  D7FC               	bra	u527
   454  00085E  2E20               	decfsz	(??_main+1)^0,f,c
   455  000860  D7FA               	bra	u527
   456  000862                     
   457                           ;maincode.c: 76:     BORRAR_LCD();
   458  000862  ECE9  F007         	call	_BORRAR_LCD	;wreg free
   459  000866                     l1700:
   460                           
   461                           ;maincode.c: 78:         POS_CURSOR(1,0);
   462  000866  0E00               	movlw	0
   463  000868  6E14               	movwf	POS_CURSOR@columna^0,c
   464  00086A  0E01               	movlw	1
   465  00086C  EC9A  F006         	call	_POS_CURSOR
   466  000870                     
   467                           ;maincode.c: 79:         ESCRIBE_MENSAJE2("AN1:");
   468  000870  0E39               	movlw	low STR_3
   469  000872  6E15               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   470  000874  0E08               	movlw	high STR_3
   471  000876  6E16               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   472  000878  EC50  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   473  00087C                     
   474                           ;maincode.c: 80:         convierte(tomamuestra_ADC(1));
   475  00087C  0E01               	movlw	1
   476  00087E  ECDD  F004         	call	_tomamuestra_ADC
   477  000882  C011  F01D         	movff	?_tomamuestra_ADC,convierte@numero
   478  000886  C012  F01E         	movff	?_tomamuestra_ADC+1,convierte@numero+1
   479  00088A  EC98  F004         	call	_convierte	;wreg free
   480  00088E                     
   481                           ;maincode.c: 81:         ENVIA_CHAR(millar+0x30);
   482  00088E  5025               	movf	_millar^0,w,c
   483  000890  0F30               	addlw	48
   484  000892  EC0E  F007         	call	_ENVIA_CHAR
   485  000896                     
   486                           ;maincode.c: 82:         ENVIA_CHAR(centena+0x30);
   487  000896  5024               	movf	_centena^0,w,c
   488  000898  0F30               	addlw	48
   489  00089A  EC0E  F007         	call	_ENVIA_CHAR
   490  00089E                     
   491                           ;maincode.c: 83:         ENVIA_CHAR(decena+0x30);
   492  00089E  5023               	movf	_decena^0,w,c
   493  0008A0  0F30               	addlw	48
   494  0008A2  EC0E  F007         	call	_ENVIA_CHAR
   495  0008A6                     
   496                           ;maincode.c: 84:         ENVIA_CHAR(unidad+0x30);
   497  0008A6  5022               	movf	_unidad^0,w,c
   498  0008A8  0F30               	addlw	48
   499  0008AA  EC0E  F007         	call	_ENVIA_CHAR
   500  0008AE                     
   501                           ;maincode.c: 85:         ESCRIBE_MENSAJE2(" CTR:");
   502  0008AE  0E33               	movlw	low STR_4
   503  0008B0  6E15               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   504  0008B2  0E08               	movlw	high STR_4
   505  0008B4  6E16               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   506  0008B6  EC50  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   507  0008BA                     
   508                           ;maincode.c: 86:         convierte(nivel*10);
   509  0008BA  5021               	movf	_nivel^0,w,c
   510  0008BC  0D0A               	mullw	10
   511  0008BE  CFF3 F01D          	movff	prodl,convierte@numero
   512  0008C2  CFF4 F01E          	movff	prodh,convierte@numero+1
   513  0008C6  EC98  F004         	call	_convierte	;wreg free
   514  0008CA                     
   515                           ;maincode.c: 87:         ENVIA_CHAR(decena+0x30);
   516  0008CA  5023               	movf	_decena^0,w,c
   517  0008CC  0F30               	addlw	48
   518  0008CE  EC0E  F007         	call	_ENVIA_CHAR
   519  0008D2                     
   520                           ;maincode.c: 88:         ENVIA_CHAR(unidad+0x30);
   521  0008D2  5022               	movf	_unidad^0,w,c
   522  0008D4  0F30               	addlw	48
   523  0008D6  EC0E  F007         	call	_ENVIA_CHAR
   524  0008DA                     
   525                           ;maincode.c: 89:         ENVIA_CHAR('%');
   526  0008DA  0E25               	movlw	37
   527  0008DC  EC0E  F007         	call	_ENVIA_CHAR
   528  0008E0                     
   529                           ;maincode.c: 90:         POS_CURSOR(2,0);
   530  0008E0  0E00               	movlw	0
   531  0008E2  6E14               	movwf	POS_CURSOR@columna^0,c
   532  0008E4  0E02               	movlw	2
   533  0008E6  EC9A  F006         	call	_POS_CURSOR
   534  0008EA                     
   535                           ;maincode.c: 91:         ESCRIBE_MENSAJE2("AN9:");
   536  0008EA  0E3E               	movlw	low STR_5
   537  0008EC  6E15               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   538  0008EE  0E08               	movlw	high STR_5
   539  0008F0  6E16               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   540  0008F2  EC50  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   541  0008F6                     
   542                           ;maincode.c: 92:         convierte(tomamuestra_ADC(9));
   543  0008F6  0E09               	movlw	9
   544  0008F8  ECDD  F004         	call	_tomamuestra_ADC
   545  0008FC  C011  F01D         	movff	?_tomamuestra_ADC,convierte@numero
   546  000900  C012  F01E         	movff	?_tomamuestra_ADC+1,convierte@numero+1
   547  000904  EC98  F004         	call	_convierte	;wreg free
   548  000908                     
   549                           ;maincode.c: 93:         ENVIA_CHAR(millar+0x30);
   550  000908  5025               	movf	_millar^0,w,c
   551  00090A  0F30               	addlw	48
   552  00090C  EC0E  F007         	call	_ENVIA_CHAR
   553  000910                     
   554                           ;maincode.c: 94:         ENVIA_CHAR(centena+0x30);
   555  000910  5024               	movf	_centena^0,w,c
   556  000912  0F30               	addlw	48
   557  000914  EC0E  F007         	call	_ENVIA_CHAR
   558  000918                     
   559                           ;maincode.c: 95:         ENVIA_CHAR(decena+0x30);
   560  000918  5023               	movf	_decena^0,w,c
   561  00091A  0F30               	addlw	48
   562  00091C  EC0E  F007         	call	_ENVIA_CHAR
   563  000920                     
   564                           ;maincode.c: 96:         ENVIA_CHAR(unidad+0x30);
   565  000920  5022               	movf	_unidad^0,w,c
   566  000922  0F30               	addlw	48
   567  000924  EC0E  F007         	call	_ENVIA_CHAR
   568  000928  EF33  F004         	goto	l1700
   569  00092C  EFD5  F000         	goto	start
   570  000930                     __end_of_main:
   571                           	callstack 0
   572                           
   573 ;; *************** function _tomamuestra_ADC *****************
   574 ;; Defined at:
   575 ;;		line 52 in file "maincode.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  canal           1    wreg     unsigned char 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;  canal           1   20[COMRAM] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2   16[COMRAM] unsigned int 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   589 ;;      Params:         2       0       0       0       0       0       0       0       0
   590 ;;      Locals:         1       0       0       0       0       0       0       0       0
   591 ;;      Temps:          2       0       0       0       0       0       0       0       0
   592 ;;      Totals:         5       0       0       0       0       0       0       0       0
   593 ;;Total ram usage:        5 bytes
   594 ;; Hardware stack levels used: 1
   595 ;; Hardware stack levels required when called: 4
   596 ;; This function calls:
   597 ;;		Nothing
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text1
   604  0009BA                     __ptext1:
   605                           	callstack 0
   606  0009BA                     _tomamuestra_ADC:
   607                           	callstack 26
   608                           
   609                           ;incstack = 0
   610                           ;tomamuestra_ADC@canal stored from wreg
   611  0009BA  6E15               	movwf	tomamuestra_ADC@canal^0,c
   612  0009BC                     
   613                           ;maincode.c: 53:     switch(canal){
   614  0009BC  EFF0  F004         	goto	l1660
   615  0009C0                     l1650:
   616                           
   617                           ;maincode.c: 55:             ADCON0 = 0x01;
   618  0009C0  0E01               	movlw	1
   619  0009C2  6EC2               	movwf	194,c	;volatile
   620                           
   621                           ;maincode.c: 56:             break;
   622  0009C4  EF0D  F005         	goto	l179
   623  0009C8                     l1652:
   624                           
   625                           ;maincode.c: 58:             ADCON0 = 0x05;
   626  0009C8  0E05               	movlw	5
   627  0009CA  6EC2               	movwf	194,c	;volatile
   628                           
   629                           ;maincode.c: 59:             break;
   630  0009CC  EF0D  F005         	goto	l179
   631  0009D0                     l1654:
   632                           
   633                           ;maincode.c: 61:             ADCON0 = 0x09;
   634  0009D0  0E09               	movlw	9
   635  0009D2  6EC2               	movwf	194,c	;volatile
   636                           
   637                           ;maincode.c: 62:             break;
   638  0009D4  EF0D  F005         	goto	l179
   639  0009D8                     l1656:
   640                           
   641                           ;maincode.c: 64:             ADCON0 = 0x25;
   642  0009D8  0E25               	movlw	37
   643  0009DA  6EC2               	movwf	194,c	;volatile
   644                           
   645                           ;maincode.c: 65:             break;
   646  0009DC  EF0D  F005         	goto	l179
   647  0009E0                     l1660:
   648  0009E0  5015               	movf	tomamuestra_ADC@canal^0,w,c
   649  0009E2  6E13               	movwf	??_tomamuestra_ADC^0,c
   650  0009E4  6A14               	clrf	(??_tomamuestra_ADC+1)^0,c
   651                           
   652                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   653                           ; Switch size 1, requested type "simple"
   654                           ; Number of cases is 1, Range of values is 0 to 0
   655                           ; switch strategies available:
   656                           ; Name         Instructions Cycles
   657                           ; simple_byte            4     3 (average)
   658                           ;	Chosen strategy is simple_byte
   659  0009E6  5014               	movf	(??_tomamuestra_ADC+1)^0,w,c
   660  0009E8  0A00               	xorlw	0	; case 0
   661  0009EA  B4D8               	btfsc	status,2,c
   662  0009EC  EFFA  F004         	goto	l1836
   663  0009F0  EF0D  F005         	goto	l179
   664  0009F4                     l1836:
   665                           
   666                           ; Switch size 1, requested type "simple"
   667                           ; Number of cases is 4, Range of values is 0 to 9
   668                           ; switch strategies available:
   669                           ; Name         Instructions Cycles
   670                           ; simple_byte           13     7 (average)
   671                           ;	Chosen strategy is simple_byte
   672  0009F4  5013               	movf	??_tomamuestra_ADC^0,w,c
   673  0009F6  0A00               	xorlw	0	; case 0
   674  0009F8  B4D8               	btfsc	status,2,c
   675  0009FA  EFE0  F004         	goto	l1650
   676  0009FE  0A01               	xorlw	1	; case 1
   677  000A00  B4D8               	btfsc	status,2,c
   678  000A02  EFE4  F004         	goto	l1652
   679  000A06  0A03               	xorlw	3	; case 2
   680  000A08  B4D8               	btfsc	status,2,c
   681  000A0A  EFE8  F004         	goto	l1654
   682  000A0E  0A0B               	xorlw	11	; case 9
   683  000A10  B4D8               	btfsc	status,2,c
   684  000A12  EFEC  F004         	goto	l1656
   685  000A16  EF0D  F005         	goto	l179
   686  000A1A                     l179:
   687                           
   688                           ;maincode.c: 67:     ADCON0bits.GO = 1;
   689  000A1A  82C2               	bsf	194,1,c	;volatile
   690  000A1C                     l183:
   691  000A1C  B2C2               	btfsc	194,1,c	;volatile
   692  000A1E  EF13  F005         	goto	u431
   693  000A22  EF15  F005         	goto	u430
   694  000A26                     u431:
   695  000A26  EF0E  F005         	goto	l183
   696  000A2A                     u430:
   697  000A2A                     
   698                           ;maincode.c: 69:     return (ADRESH << 8) + ADRESL;
   699  000A2A  50C4               	movf	196,w,c	;volatile
   700  000A2C  6E14               	movwf	(??_tomamuestra_ADC+1)^0,c
   701  000A2E  6A13               	clrf	??_tomamuestra_ADC^0,c
   702  000A30  50C3               	movf	195,w,c	;volatile
   703  000A32  2413               	addwf	??_tomamuestra_ADC^0,w,c
   704  000A34  6E11               	movwf	?_tomamuestra_ADC^0,c
   705  000A36  0E00               	movlw	0
   706  000A38  2014               	addwfc	(??_tomamuestra_ADC+1)^0,w,c
   707  000A3A  6E12               	movwf	(?_tomamuestra_ADC+1)^0,c
   708  000A3C  0012               	return		;funcret
   709  000A3E                     __end_of_tomamuestra_ADC:
   710                           	callstack 0
   711                           
   712 ;; *************** function _splash_screen *****************
   713 ;; Defined at:
   714 ;;		line 38 in file "maincode.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;		None
   719 ;; Return value:  Size  Location     Type
   720 ;;                  1    wreg      void 
   721 ;; Registers used:
   722 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   728 ;;      Params:         0       0       0       0       0       0       0       0       0
   729 ;;      Locals:         0       0       0       0       0       0       0       0       0
   730 ;;      Temps:          0       0       0       0       0       0       0       0       0
   731 ;;      Totals:         0       0       0       0       0       0       0       0       0
   732 ;;Total ram usage:        0 bytes
   733 ;; Hardware stack levels used: 1
   734 ;; Hardware stack levels required when called: 7
   735 ;; This function calls:
   736 ;;		_ESCRIBE_MENSAJE2
   737 ;;		_POS_CURSOR
   738 ;; This function is called by:
   739 ;;		_main
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text2
   744  000F4C                     __ptext2:
   745                           	callstack 0
   746  000F4C                     _splash_screen:
   747                           	callstack 23
   748  000F4C                     
   749                           ;maincode.c: 39:     POS_CURSOR(1,0);
   750  000F4C  0E00               	movlw	0
   751  000F4E  6E14               	movwf	POS_CURSOR@columna^0,c
   752  000F50  0E01               	movlw	1
   753  000F52  EC9A  F006         	call	_POS_CURSOR
   754  000F56                     
   755                           ;maincode.c: 40:     ESCRIBE_MENSAJE2("Laboratorio 3");
   756  000F56  0E12               	movlw	low STR_1
   757  000F58  6E15               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   758  000F5A  0E08               	movlw	high STR_1
   759  000F5C  6E16               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   760  000F5E  EC50  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   761  000F62                     
   762                           ;maincode.c: 41:     POS_CURSOR(2,0);
   763  000F62  0E00               	movlw	0
   764  000F64  6E14               	movwf	POS_CURSOR@columna^0,c
   765  000F66  0E02               	movlw	2
   766  000F68  EC9A  F006         	call	_POS_CURSOR
   767                           
   768                           ;maincode.c: 42:     ESCRIBE_MENSAJE2("Me voy a la bica");
   769  000F6C  0E01               	movlw	low STR_2
   770  000F6E  6E15               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   771  000F70  0E08               	movlw	high STR_2
   772  000F72  6E16               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   773  000F74  EC50  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   774  000F78  0012               	return		;funcret
   775  000F7A                     __end_of_splash_screen:
   776                           	callstack 0
   777                           
   778 ;; *************** function _POS_CURSOR *****************
   779 ;; Defined at:
   780 ;;		line 5 in file "LCD.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  fila            1    wreg     unsigned char 
   783 ;;  columna         1   19[COMRAM] unsigned char 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  fila            1   20[COMRAM] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   795 ;;      Params:         1       0       0       0       0       0       0       0       0
   796 ;;      Locals:         1       0       0       0       0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0       0       0
   798 ;;      Totals:         2       0       0       0       0       0       0       0       0
   799 ;;Total ram usage:        2 bytes
   800 ;; Hardware stack levels used: 1
   801 ;; Hardware stack levels required when called: 6
   802 ;; This function calls:
   803 ;;		_ENVIA_LCD_CMD
   804 ;; This function is called by:
   805 ;;		_splash_screen
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text3
   811  000D34                     __ptext3:
   812                           	callstack 0
   813  000D34                     _POS_CURSOR:
   814                           	callstack 23
   815                           
   816                           ;incstack = 0
   817                           ;POS_CURSOR@fila stored from wreg
   818  000D34  6E15               	movwf	POS_CURSOR@fila^0,c
   819  000D36                     
   820                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
   821  000D36  0415               	decf	POS_CURSOR@fila^0,w,c
   822  000D38  A4D8               	btfss	status,2,c
   823  000D3A  EFA1  F006         	goto	u331
   824  000D3E  EFA3  F006         	goto	u330
   825  000D42                     u331:
   826  000D42  EFA9  F006         	goto	l1532
   827  000D46                     u330:
   828  000D46                     
   829                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
   830  000D46  5014               	movf	POS_CURSOR@columna^0,w,c
   831  000D48  0F80               	addlw	128
   832  000D4A  EC28  F007         	call	_ENVIA_LCD_CMD
   833                           
   834                           ;LCD.c: 10:  }
   835  000D4E  EFB6  F006         	goto	l26
   836  000D52                     l1532:
   837  000D52  0E02               	movlw	2
   838  000D54  1815               	xorwf	POS_CURSOR@fila^0,w,c
   839  000D56  A4D8               	btfss	status,2,c
   840  000D58  EFB0  F006         	goto	u341
   841  000D5C  EFB2  F006         	goto	u340
   842  000D60                     u341:
   843  000D60  EFB6  F006         	goto	l26
   844  000D64                     u340:
   845  000D64                     
   846                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
   847  000D64  5014               	movf	POS_CURSOR@columna^0,w,c
   848  000D66  0FC0               	addlw	192
   849  000D68  EC28  F007         	call	_ENVIA_LCD_CMD
   850  000D6C                     l26:
   851  000D6C  0012               	return		;funcret
   852  000D6E                     __end_of_POS_CURSOR:
   853                           	callstack 0
   854                           
   855 ;; *************** function _ESCRIBE_MENSAJE2 *****************
   856 ;; Defined at:
   857 ;;		line 69 in file "LCD.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  cadena          2   20[COMRAM] PTR const unsigned char 
   860 ;;		 -> STR_7(8), STR_6(11), STR_5(5), STR_4(6), 
   861 ;;		 -> STR_3(5), STR_2(17), STR_1(14), 
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  i               1   25[COMRAM] unsigned char 
   864 ;;  tam             1   24[COMRAM] unsigned char 
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   874 ;;      Params:         2       0       0       0       0       0       0       0       0
   875 ;;      Locals:         2       0       0       0       0       0       0       0       0
   876 ;;      Temps:          2       0       0       0       0       0       0       0       0
   877 ;;      Totals:         6       0       0       0       0       0       0       0       0
   878 ;;Total ram usage:        6 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; Hardware stack levels required when called: 6
   881 ;; This function calls:
   882 ;;		_ENVIA_CHAR
   883 ;;		_strlen
   884 ;; This function is called by:
   885 ;;		_splash_screen
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text4
   891  000CA0                     __ptext4:
   892                           	callstack 0
   893  000CA0                     _ESCRIBE_MENSAJE2:
   894                           	callstack 23
   895  000CA0                     
   896                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
   897  000CA0  C015  F011         	movff	ESCRIBE_MENSAJE2@cadena,strlen@s
   898  000CA4  C016  F012         	movff	ESCRIBE_MENSAJE2@cadena+1,strlen@s+1
   899  000CA8  ECB7  F006         	call	_strlen	;wreg free
   900  000CAC  5011               	movf	?_strlen^0,w,c
   901  000CAE  6E19               	movwf	ESCRIBE_MENSAJE2@tam^0,c
   902  000CB0                     
   903                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
   904  000CB0  0E00               	movlw	0
   905  000CB2  6E1A               	movwf	ESCRIBE_MENSAJE2@i^0,c
   906  000CB4  EF6B  F006         	goto	l1546
   907  000CB8                     l1542:
   908                           
   909                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
   910  000CB8  501A               	movf	ESCRIBE_MENSAJE2@i^0,w,c
   911  000CBA  2415               	addwf	ESCRIBE_MENSAJE2@cadena^0,w,c
   912  000CBC  6E17               	movwf	??_ESCRIBE_MENSAJE2^0,c
   913  000CBE  0E00               	movlw	0
   914  000CC0  2016               	addwfc	(ESCRIBE_MENSAJE2@cadena+1)^0,w,c
   915  000CC2  6E18               	movwf	(??_ESCRIBE_MENSAJE2+1)^0,c
   916  000CC4  C017  FFF6         	movff	??_ESCRIBE_MENSAJE2,tblptrl
   917  000CC8  C018  FFF7         	movff	??_ESCRIBE_MENSAJE2+1,tblptrh
   918  000CCC                     	if	0	;tblptru may be non-zero
   919  000CCC                     	endif
   920  000CCC                     	if	0	;tblptru may be non-zero
   921  000CCC                     	endif
   922  000CCC  0008               	tblrd		*
   923  000CCE  50F5               	movf	tablat,w,c
   924  000CD0  EC0E  F007         	call	_ENVIA_CHAR
   925  000CD4                     
   926                           ;LCD.c: 77:  }
   927  000CD4  2A1A               	incf	ESCRIBE_MENSAJE2@i^0,f,c
   928  000CD6                     l1546:
   929  000CD6  5019               	movf	ESCRIBE_MENSAJE2@tam^0,w,c
   930  000CD8  5C1A               	subwf	ESCRIBE_MENSAJE2@i^0,w,c
   931  000CDA  A0D8               	btfss	status,0,c
   932  000CDC  EF72  F006         	goto	u351
   933  000CE0  EF74  F006         	goto	u350
   934  000CE4                     u351:
   935  000CE4  EF5C  F006         	goto	l1542
   936  000CE8                     u350:
   937  000CE8  0012               	return		;funcret
   938  000CEA                     __end_of_ESCRIBE_MENSAJE2:
   939                           	callstack 0
   940                           
   941 ;; *************** function _strlen *****************
   942 ;; Defined at:
   943 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  s               2   16[COMRAM] PTR const unsigned char 
   946 ;;		 -> STR_7(8), STR_6(11), STR_5(5), STR_4(6), 
   947 ;;		 -> STR_3(5), STR_2(17), STR_1(14), 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  a               2   18[COMRAM] PTR const unsigned char 
   950 ;;		 -> STR_7(8), STR_6(11), STR_5(5), STR_4(6), 
   951 ;;		 -> STR_3(5), STR_2(17), STR_1(14), 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2   16[COMRAM] unsigned int 
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         2       0       0       0       0       0       0       0       0
   962 ;;      Locals:         2       0       0       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0
   964 ;;      Totals:         4       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:        4 bytes
   966 ;; Hardware stack levels used: 1
   967 ;; Hardware stack levels required when called: 4
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_ESCRIBE_MENSAJE2
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text5
   976  000D6E                     __ptext5:
   977                           	callstack 0
   978  000D6E                     _strlen:
   979                           	callstack 24
   980  000D6E  C011  F013         	movff	strlen@s,strlen@a
   981  000D72  C012  F014         	movff	strlen@s+1,strlen@a+1
   982  000D76  EFBF  F006         	goto	l1476
   983  000D7A                     l1474:
   984  000D7A  4A11               	infsnz	strlen@s^0,f,c
   985  000D7C  2A12               	incf	(strlen@s+1)^0,f,c
   986  000D7E                     l1476:
   987  000D7E  C011  FFF6         	movff	strlen@s,tblptrl
   988  000D82  C012  FFF7         	movff	strlen@s+1,tblptrh
   989  000D86                     	if	0	;tblptru may be non-zero
   990  000D86                     	endif
   991  000D86                     	if	0	;tblptru may be non-zero
   992  000D86                     	endif
   993  000D86  0008               	tblrd		*
   994  000D88  50F5               	movf	tablat,w,c
   995  000D8A  0900               	iorlw	0
   996  000D8C  A4D8               	btfss	status,2,c
   997  000D8E  EFCB  F006         	goto	u311
   998  000D92  EFCD  F006         	goto	u310
   999  000D96                     u311:
  1000  000D96  EFBD  F006         	goto	l1474
  1001  000D9A                     u310:
  1002  000D9A  5013               	movf	strlen@a^0,w,c
  1003  000D9C  5C11               	subwf	strlen@s^0,w,c
  1004  000D9E  6E11               	movwf	?_strlen^0,c
  1005  000DA0  5014               	movf	(strlen@a+1)^0,w,c
  1006  000DA2  5812               	subwfb	(strlen@s+1)^0,w,c
  1007  000DA4  6E12               	movwf	(?_strlen+1)^0,c
  1008  000DA6  0012               	return		;funcret
  1009  000DA8                     __end_of_strlen:
  1010                           	callstack 0
  1011                           
  1012 ;; *************** function _ENVIA_CHAR *****************
  1013 ;; Defined at:
  1014 ;;		line 80 in file "LCD.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  dato            1    wreg     unsigned char 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  dato            1   17[COMRAM] unsigned char 
  1019 ;;  aux             1   18[COMRAM] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1029 ;;      Params:         0       0       0       0       0       0       0       0       0
  1030 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1032 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1033 ;;Total ram usage:        2 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; Hardware stack levels required when called: 5
  1036 ;; This function calls:
  1037 ;;		_ENVIA_NIBBLE
  1038 ;;		_LEER_LCD
  1039 ;; This function is called by:
  1040 ;;		_ESCRIBE_MENSAJE2
  1041 ;;		_main
  1042 ;;		_ESCRIBE_MENSAJE
  1043 ;;		_GENERACARACTER
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text6
  1048  000E1C                     __ptext6:
  1049                           	callstack 0
  1050  000E1C                     _ENVIA_CHAR:
  1051                           	callstack 23
  1052                           
  1053                           ;incstack = 0
  1054                           ;ENVIA_CHAR@dato stored from wreg
  1055  000E1C  6E12               	movwf	ENVIA_CHAR@dato^0,c
  1056  000E1E                     
  1057                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATEbits.LATE0 = 1;
  1058  000E1E  808D               	bsf	141,0,c	;volatile
  1059  000E20                     
  1060                           ;LCD.c: 84:  LEER_LCD();
  1061  000E20  EC59  F005         	call	_LEER_LCD	;wreg free
  1062  000E24                     
  1063                           ;LCD.c: 85:  TRISB = 0x08;
  1064  000E24  0E08               	movlw	8
  1065  000E26  6E93               	movwf	147,c	;volatile
  1066  000E28                     
  1067                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1068  000E28  0E21               	movlw	33
  1069  000E2A                     u537:
  1070  000E2A  2EE8               	decfsz	wreg,f,c
  1071  000E2C  D7FE               	bra	u537
  1072  000E2E  F000               	nop	
  1073  000E30                     
  1074                           ;LCD.c: 87:  LATEbits.LATE1 = 0;
  1075  000E30  928D               	bcf	141,1,c	;volatile
  1076  000E32                     
  1077                           ;LCD.c: 88:  LATEbits.LATE2 = 0;
  1078  000E32  948D               	bcf	141,2,c	;volatile
  1079  000E34                     
  1080                           ;LCD.c: 89:  LATEbits.LATE0 = 1;
  1081  000E34  808D               	bsf	141,0,c	;volatile
  1082  000E36                     
  1083                           ;LCD.c: 90:  aux = dato & 0xF0;
  1084  000E36  5012               	movf	ENVIA_CHAR@dato^0,w,c
  1085  000E38  0BF0               	andlw	240
  1086  000E3A  6E13               	movwf	ENVIA_CHAR@aux^0,c
  1087  000E3C                     
  1088                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
  1089  000E3C  5013               	movf	ENVIA_CHAR@aux^0,w,c
  1090  000E3E  ECBD  F007         	call	_ENVIA_NIBBLE
  1091  000E42                     
  1092                           ;LCD.c: 92:  aux = dato << 4;
  1093  000E42  3812               	swapf	ENVIA_CHAR@dato^0,w,c
  1094  000E44  0BF0               	andlw	240
  1095  000E46  6E13               	movwf	ENVIA_CHAR@aux^0,c
  1096  000E48                     
  1097                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
  1098  000E48  5013               	movf	ENVIA_CHAR@aux^0,w,c
  1099  000E4A  ECBD  F007         	call	_ENVIA_NIBBLE
  1100  000E4E  0012               	return		;funcret
  1101  000E50                     __end_of_ENVIA_CHAR:
  1102                           	callstack 0
  1103                           
  1104 ;; *************** function _convierte *****************
  1105 ;; Defined at:
  1106 ;;		line 45 in file "maincode.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;  numero          2   28[COMRAM] unsigned int 
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1120 ;;      Params:         2       0       0       0       0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1123 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1124 ;;Total ram usage:        2 bytes
  1125 ;; Hardware stack levels used: 1
  1126 ;; Hardware stack levels required when called: 5
  1127 ;; This function calls:
  1128 ;;		___lwdiv
  1129 ;;		___lwmod
  1130 ;; This function is called by:
  1131 ;;		_main
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text7
  1136  000930                     __ptext7:
  1137                           	callstack 0
  1138  000930                     _convierte:
  1139                           	callstack 25
  1140  000930                     
  1141                           ;maincode.c: 46:     millar = numero / 1000;
  1142  000930  C01D  F016         	movff	convierte@numero,___lwdiv@dividend
  1143  000934  C01E  F017         	movff	convierte@numero+1,___lwdiv@dividend+1
  1144  000938  0E03               	movlw	3
  1145  00093A  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  1146  00093C  0EE8               	movlw	232
  1147  00093E  6E18               	movwf	___lwdiv@divisor^0,c
  1148  000940  EC1F  F005         	call	___lwdiv	;wreg free
  1149  000944  5016               	movf	?___lwdiv^0,w,c
  1150  000946  6E25               	movwf	_millar^0,c
  1151                           
  1152                           ;maincode.c: 47:     centena = (numero % 1000) / 100;
  1153  000948  0E03               	movlw	3
  1154  00094A  6E14               	movwf	(___lwmod@divisor+1)^0,c
  1155  00094C  0EE8               	movlw	232
  1156  00094E  6E13               	movwf	___lwmod@divisor^0,c
  1157  000950  C01D  F011         	movff	convierte@numero,___lwmod@dividend
  1158  000954  C01E  F012         	movff	convierte@numero+1,___lwmod@dividend+1
  1159  000958  ECCB  F005         	call	___lwmod	;wreg free
  1160  00095C  C011  F016         	movff	?___lwmod,___lwdiv@dividend
  1161  000960  C012  F017         	movff	?___lwmod+1,___lwdiv@dividend+1
  1162  000964  0E00               	movlw	0
  1163  000966  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  1164  000968  0E64               	movlw	100
  1165  00096A  6E18               	movwf	___lwdiv@divisor^0,c
  1166  00096C  EC1F  F005         	call	___lwdiv	;wreg free
  1167  000970  5016               	movf	?___lwdiv^0,w,c
  1168  000972  6E24               	movwf	_centena^0,c
  1169                           
  1170                           ;maincode.c: 48:     decena = (numero % 100) / 10;
  1171  000974  0E00               	movlw	0
  1172  000976  6E14               	movwf	(___lwmod@divisor+1)^0,c
  1173  000978  0E64               	movlw	100
  1174  00097A  6E13               	movwf	___lwmod@divisor^0,c
  1175  00097C  C01D  F011         	movff	convierte@numero,___lwmod@dividend
  1176  000980  C01E  F012         	movff	convierte@numero+1,___lwmod@dividend+1
  1177  000984  ECCB  F005         	call	___lwmod	;wreg free
  1178  000988  C011  F016         	movff	?___lwmod,___lwdiv@dividend
  1179  00098C  C012  F017         	movff	?___lwmod+1,___lwdiv@dividend+1
  1180  000990  0E00               	movlw	0
  1181  000992  6E19               	movwf	(___lwdiv@divisor+1)^0,c
  1182  000994  0E0A               	movlw	10
  1183  000996  6E18               	movwf	___lwdiv@divisor^0,c
  1184  000998  EC1F  F005         	call	___lwdiv	;wreg free
  1185  00099C  5016               	movf	?___lwdiv^0,w,c
  1186  00099E  6E23               	movwf	_decena^0,c
  1187                           
  1188                           ;maincode.c: 49:     unidad = numero % 10;
  1189  0009A0  C01D  F011         	movff	convierte@numero,___lwmod@dividend
  1190  0009A4  C01E  F012         	movff	convierte@numero+1,___lwmod@dividend+1
  1191  0009A8  0E00               	movlw	0
  1192  0009AA  6E14               	movwf	(___lwmod@divisor+1)^0,c
  1193  0009AC  0E0A               	movlw	10
  1194  0009AE  6E13               	movwf	___lwmod@divisor^0,c
  1195  0009B0  ECCB  F005         	call	___lwmod	;wreg free
  1196  0009B4  5011               	movf	?___lwmod^0,w,c
  1197  0009B6  6E22               	movwf	_unidad^0,c
  1198  0009B8  0012               	return		;funcret
  1199  0009BA                     __end_of_convierte:
  1200                           	callstack 0
  1201                           
  1202 ;; *************** function ___lwmod *****************
  1203 ;; Defined at:
  1204 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwmod.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  dividend        2   16[COMRAM] unsigned int 
  1207 ;;  divisor         2   18[COMRAM] unsigned int 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  counter         1   20[COMRAM] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  2   16[COMRAM] unsigned int 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2, status,0
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1219 ;;      Params:         4       0       0       0       0       0       0       0       0
  1220 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1222 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1223 ;;Total ram usage:        5 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; Hardware stack levels required when called: 4
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_convierte
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text8
  1234  000B96                     __ptext8:
  1235                           	callstack 0
  1236  000B96                     ___lwmod:
  1237                           	callstack 25
  1238  000B96  5013               	movf	___lwmod@divisor^0,w,c
  1239  000B98  1014               	iorwf	(___lwmod@divisor+1)^0,w,c
  1240  000B9A  B4D8               	btfsc	status,2,c
  1241  000B9C  EFD2  F005         	goto	u391
  1242  000BA0  EFD4  F005         	goto	u390
  1243  000BA4                     u391:
  1244  000BA4  EFF8  F005         	goto	l724
  1245  000BA8                     u390:
  1246  000BA8  0E01               	movlw	1
  1247  000BAA  6E15               	movwf	___lwmod@counter^0,c
  1248  000BAC  EFDC  F005         	goto	l1576
  1249  000BB0                     l1574:
  1250  000BB0  90D8               	bcf	status,0,c
  1251  000BB2  3613               	rlcf	___lwmod@divisor^0,f,c
  1252  000BB4  3614               	rlcf	(___lwmod@divisor+1)^0,f,c
  1253  000BB6  2A15               	incf	___lwmod@counter^0,f,c
  1254  000BB8                     l1576:
  1255  000BB8  AE14               	btfss	(___lwmod@divisor+1)^0,7,c
  1256  000BBA  EFE1  F005         	goto	u401
  1257  000BBE  EFE3  F005         	goto	u400
  1258  000BC2                     u401:
  1259  000BC2  EFD8  F005         	goto	l1574
  1260  000BC6                     u400:
  1261  000BC6                     l1578:
  1262  000BC6  5013               	movf	___lwmod@divisor^0,w,c
  1263  000BC8  5C11               	subwf	___lwmod@dividend^0,w,c
  1264  000BCA  5014               	movf	(___lwmod@divisor+1)^0,w,c
  1265  000BCC  5812               	subwfb	(___lwmod@dividend+1)^0,w,c
  1266  000BCE  A0D8               	btfss	status,0,c
  1267  000BD0  EFEC  F005         	goto	u411
  1268  000BD4  EFEE  F005         	goto	u410
  1269  000BD8                     u411:
  1270  000BD8  EFF2  F005         	goto	l1582
  1271  000BDC                     u410:
  1272  000BDC  5013               	movf	___lwmod@divisor^0,w,c
  1273  000BDE  5E11               	subwf	___lwmod@dividend^0,f,c
  1274  000BE0  5014               	movf	(___lwmod@divisor+1)^0,w,c
  1275  000BE2  5A12               	subwfb	(___lwmod@dividend+1)^0,f,c
  1276  000BE4                     l1582:
  1277  000BE4  90D8               	bcf	status,0,c
  1278  000BE6  3214               	rrcf	(___lwmod@divisor+1)^0,f,c
  1279  000BE8  3213               	rrcf	___lwmod@divisor^0,f,c
  1280  000BEA  2E15               	decfsz	___lwmod@counter^0,f,c
  1281  000BEC  EFE3  F005         	goto	l1578
  1282  000BF0                     l724:
  1283  000BF0  C011  F011         	movff	___lwmod@dividend,?___lwmod
  1284  000BF4  C012  F012         	movff	___lwmod@dividend+1,?___lwmod+1
  1285  000BF8  0012               	return		;funcret
  1286  000BFA                     __end_of___lwmod:
  1287                           	callstack 0
  1288                           
  1289 ;; *************** function ___lwdiv *****************
  1290 ;; Defined at:
  1291 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  dividend        2   21[COMRAM] unsigned int 
  1294 ;;  divisor         2   23[COMRAM] unsigned int 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  quotient        2   25[COMRAM] unsigned int 
  1297 ;;  counter         1   27[COMRAM] unsigned char 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  2   21[COMRAM] unsigned int 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1307 ;;      Params:         4       0       0       0       0       0       0       0       0
  1308 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1310 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1311 ;;Total ram usage:        7 bytes
  1312 ;; Hardware stack levels used: 1
  1313 ;; Hardware stack levels required when called: 4
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_convierte
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text9
  1322  000A3E                     __ptext9:
  1323                           	callstack 0
  1324  000A3E                     ___lwdiv:
  1325                           	callstack 25
  1326  000A3E  0E00               	movlw	0
  1327  000A40  6E1B               	movwf	(___lwdiv@quotient+1)^0,c
  1328  000A42  0E00               	movlw	0
  1329  000A44  6E1A               	movwf	___lwdiv@quotient^0,c
  1330  000A46  5018               	movf	___lwdiv@divisor^0,w,c
  1331  000A48  1019               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1332  000A4A  B4D8               	btfsc	status,2,c
  1333  000A4C  EF2A  F005         	goto	u361
  1334  000A50  EF2C  F005         	goto	u360
  1335  000A54                     u361:
  1336  000A54  EF54  F005         	goto	l714
  1337  000A58                     u360:
  1338  000A58  0E01               	movlw	1
  1339  000A5A  6E1C               	movwf	___lwdiv@counter^0,c
  1340  000A5C  EF34  F005         	goto	l1556
  1341  000A60                     l1554:
  1342  000A60  90D8               	bcf	status,0,c
  1343  000A62  3618               	rlcf	___lwdiv@divisor^0,f,c
  1344  000A64  3619               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1345  000A66  2A1C               	incf	___lwdiv@counter^0,f,c
  1346  000A68                     l1556:
  1347  000A68  AE19               	btfss	(___lwdiv@divisor+1)^0,7,c
  1348  000A6A  EF39  F005         	goto	u371
  1349  000A6E  EF3B  F005         	goto	u370
  1350  000A72                     u371:
  1351  000A72  EF30  F005         	goto	l1554
  1352  000A76                     u370:
  1353  000A76                     l1558:
  1354  000A76  90D8               	bcf	status,0,c
  1355  000A78  361A               	rlcf	___lwdiv@quotient^0,f,c
  1356  000A7A  361B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1357  000A7C  5018               	movf	___lwdiv@divisor^0,w,c
  1358  000A7E  5C16               	subwf	___lwdiv@dividend^0,w,c
  1359  000A80  5019               	movf	(___lwdiv@divisor+1)^0,w,c
  1360  000A82  5817               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1361  000A84  A0D8               	btfss	status,0,c
  1362  000A86  EF47  F005         	goto	u381
  1363  000A8A  EF49  F005         	goto	u380
  1364  000A8E                     u381:
  1365  000A8E  EF4E  F005         	goto	l1566
  1366  000A92                     u380:
  1367  000A92  5018               	movf	___lwdiv@divisor^0,w,c
  1368  000A94  5E16               	subwf	___lwdiv@dividend^0,f,c
  1369  000A96  5019               	movf	(___lwdiv@divisor+1)^0,w,c
  1370  000A98  5A17               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1371  000A9A  801A               	bsf	___lwdiv@quotient^0,0,c
  1372  000A9C                     l1566:
  1373  000A9C  90D8               	bcf	status,0,c
  1374  000A9E  3219               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1375  000AA0  3218               	rrcf	___lwdiv@divisor^0,f,c
  1376  000AA2  2E1C               	decfsz	___lwdiv@counter^0,f,c
  1377  000AA4  EF3B  F005         	goto	l1558
  1378  000AA8                     l714:
  1379  000AA8  C01A  F016         	movff	___lwdiv@quotient,?___lwdiv
  1380  000AAC  C01B  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1381  000AB0  0012               	return		;funcret
  1382  000AB2                     __end_of___lwdiv:
  1383                           	callstack 0
  1384                           
  1385 ;; *************** function _configuro *****************
  1386 ;; Defined at:
  1387 ;;		line 8 in file "maincode.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, status,2, status,0, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0
  1402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1404 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1405 ;;Total ram usage:        0 bytes
  1406 ;; Hardware stack levels used: 1
  1407 ;; Hardware stack levels required when called: 8
  1408 ;; This function calls:
  1409 ;;		_LCD_INIT
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text10
  1416  000BFA                     __ptext10:
  1417                           	callstack 0
  1418  000BFA                     _configuro:
  1419                           	callstack 22
  1420  000BFA                     
  1421                           ;maincode.c: 9:     OSCCON = 0x52;
  1422  000BFA  0E52               	movlw	82
  1423  000BFC  6ED3               	movwf	211,c	;volatile
  1424                           
  1425                           ;maincode.c: 10:     TRISB = 0x0F;
  1426  000BFE  0E0F               	movlw	15
  1427  000C00  6E93               	movwf	147,c	;volatile
  1428                           
  1429                           ;maincode.c: 11:     ANSELB = 0x08;
  1430  000C02  0E08               	movlw	8
  1431  000C04  010F               	movlb	15	; () banked
  1432  000C06  6F5C               	movwf	92,b	;volatile
  1433                           
  1434                           ;maincode.c: 12:     TRISE = 0xF8;
  1435  000C08  0EF8               	movlw	248
  1436  000C0A  6E96               	movwf	150,c	;volatile
  1437                           
  1438                           ;maincode.c: 13:     ANSELE = 0x03;
  1439  000C0C  0E03               	movlw	3
  1440  000C0E  6F5F               	movwf	95,b	;volatile
  1441  000C10                     
  1442                           ; BSR set to: 15
  1443                           ;maincode.c: 14:     TRISAbits.RA1 = 1;
  1444  000C10  8292               	bsf	146,1,c	;volatile
  1445  000C12                     
  1446                           ; BSR set to: 15
  1447                           ;maincode.c: 15:     ANSELAbits.ANSA1 = 1;
  1448  000C12  835B               	bsf	91,1,b	;volatile
  1449  000C14                     
  1450                           ; BSR set to: 15
  1451                           ;maincode.c: 16:     INTCON2bits.RBPU = 0;
  1452  000C14  9EF1               	bcf	241,7,c	;volatile
  1453                           
  1454                           ;maincode.c: 17:     WPUB = 0x03;
  1455  000C16  0E03               	movlw	3
  1456  000C18  6E85               	movwf	133,c	;volatile
  1457  000C1A                     
  1458                           ; BSR set to: 15
  1459                           ;maincode.c: 18:     INTCON2bits.INTEDG0 = 0;
  1460  000C1A  9CF1               	bcf	241,6,c	;volatile
  1461  000C1C                     
  1462                           ; BSR set to: 15
  1463                           ;maincode.c: 19:     INTCON2bits.INTEDG1 = 0;
  1464  000C1C  9AF1               	bcf	241,5,c	;volatile
  1465  000C1E                     
  1466                           ; BSR set to: 15
  1467                           ;maincode.c: 20:     INTCON2bits.INTEDG2 = 0;
  1468  000C1E  98F1               	bcf	241,4,c	;volatile
  1469  000C20                     
  1470                           ; BSR set to: 15
  1471                           ;maincode.c: 21:     INTCONbits.GIE = 1;
  1472  000C20  8EF2               	bsf	242,7,c	;volatile
  1473  000C22                     
  1474                           ; BSR set to: 15
  1475                           ;maincode.c: 22:     INTCONbits.INT0IE = 1;
  1476  000C22  88F2               	bsf	242,4,c	;volatile
  1477  000C24                     
  1478                           ; BSR set to: 15
  1479                           ;maincode.c: 23:     INTCON3bits.INT1IE = 1;
  1480  000C24  86F0               	bsf	240,3,c	;volatile
  1481  000C26                     
  1482                           ; BSR set to: 15
  1483                           ;maincode.c: 24:     INTCON3bits.INT2IE = 1;
  1484  000C26  88F0               	bsf	240,4,c	;volatile
  1485                           
  1486                           ;maincode.c: 25:     ADCON2 = 0xA4;
  1487  000C28  0EA4               	movlw	164
  1488  000C2A  6EC0               	movwf	192,c	;volatile
  1489                           
  1490                           ;maincode.c: 26:     ADCON1 = 0x00;
  1491  000C2C  0E00               	movlw	0
  1492  000C2E  6EC1               	movwf	193,c	;volatile
  1493                           
  1494                           ;maincode.c: 27:     ADCON0 = 0x01;
  1495  000C30  0E01               	movlw	1
  1496  000C32  6EC2               	movwf	194,c	;volatile
  1497  000C34                     
  1498                           ; BSR set to: 15
  1499                           ;maincode.c: 29:     TRISCbits.RC2 = 0;
  1500  000C34  9494               	bcf	148,2,c	;volatile
  1501  000C36                     
  1502                           ; BSR set to: 15
  1503                           ;maincode.c: 30:     ANSELCbits.ANSC2 = 0;
  1504  000C36  955D               	bcf	93,2,b	;volatile
  1505                           
  1506                           ;maincode.c: 31:     PR2 = 62;
  1507  000C38  0E3E               	movlw	62
  1508  000C3A  6EBB               	movwf	187,c	;volatile
  1509                           
  1510                           ;maincode.c: 32:     CCPR1L = 31;
  1511  000C3C  0E1F               	movlw	31
  1512  000C3E  6EBE               	movwf	190,c	;volatile
  1513                           
  1514                           ;maincode.c: 33:     T2CON = 0x06;
  1515  000C40  0E06               	movlw	6
  1516  000C42  6EBA               	movwf	186,c	;volatile
  1517                           
  1518                           ;maincode.c: 34:     CCP1CON = 0x0C;
  1519  000C44  0E0C               	movlw	12
  1520  000C46  6EBD               	movwf	189,c	;volatile
  1521  000C48                     
  1522                           ; BSR set to: 15
  1523                           ;maincode.c: 35:     LCD_INIT();
  1524  000C48  EC76  F007         	call	_LCD_INIT	;wreg free
  1525  000C4C  0012               	return		;funcret
  1526  000C4E                     __end_of_configuro:
  1527                           	callstack 0
  1528                           
  1529 ;; *************** function _LCD_INIT *****************
  1530 ;; Defined at:
  1531 ;;		line 184 in file "LCD.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;		None
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1547 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        1 bytes
  1550 ;; Hardware stack levels used: 1
  1551 ;; Hardware stack levels required when called: 7
  1552 ;; This function calls:
  1553 ;;		_BORRAR_LCD
  1554 ;;		_CURSOR_HOME
  1555 ;;		_CURSOR_ONOFF
  1556 ;;		_LCD_CONFIG
  1557 ;; This function is called by:
  1558 ;;		_configuro
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text11
  1563  000EEC                     __ptext11:
  1564                           	callstack 0
  1565  000EEC                     _LCD_INIT:
  1566                           	callstack 22
  1567  000EEC                     
  1568                           ;LCD.c: 185:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
  1569  000EEC  0E14               	movlw	20
  1570  000EEE  6E15               	movwf	??_LCD_INIT^0,c
  1571  000EF0  0E7A               	movlw	122
  1572  000EF2                     u547:
  1573  000EF2  2EE8               	decfsz	wreg,f,c
  1574  000EF4  D7FE               	bra	u547
  1575  000EF6  2E15               	decfsz	??_LCD_INIT^0,f,c
  1576  000EF8  D7FC               	bra	u547
  1577  000EFA                     
  1578                           ;LCD.c: 186:     LCD_CONFIG();
  1579  000EFA  EC27  F006         	call	_LCD_CONFIG	;wreg free
  1580  000EFE                     
  1581                           ;LCD.c: 187:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
  1582  000EFE  0E14               	movlw	20
  1583  000F00  6E15               	movwf	??_LCD_INIT^0,c
  1584  000F02  0E7A               	movlw	122
  1585  000F04                     u557:
  1586  000F04  2EE8               	decfsz	wreg,f,c
  1587  000F06  D7FE               	bra	u557
  1588  000F08  2E15               	decfsz	??_LCD_INIT^0,f,c
  1589  000F0A  D7FC               	bra	u557
  1590                           
  1591                           ;LCD.c: 188:     BORRAR_LCD();
  1592  000F0C  ECE9  F007         	call	_BORRAR_LCD	;wreg free
  1593                           
  1594                           ;LCD.c: 189:     CURSOR_HOME();
  1595  000F10  ECE5  F007         	call	_CURSOR_HOME	;wreg free
  1596                           
  1597                           ;LCD.c: 190:     CURSOR_ONOFF(1);
  1598  000F14  0E01               	movlw	1
  1599  000F16  EC8E  F007         	call	_CURSOR_ONOFF
  1600  000F1A  0012               	return		;funcret
  1601  000F1C                     __end_of_LCD_INIT:
  1602                           	callstack 0
  1603                           
  1604 ;; *************** function _LCD_CONFIG *****************
  1605 ;; Defined at:
  1606 ;;		line 101 in file "LCD.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         0       0       0       0       0       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1623 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1624 ;;Total ram usage:        1 bytes
  1625 ;; Hardware stack levels used: 1
  1626 ;; Hardware stack levels required when called: 6
  1627 ;; This function calls:
  1628 ;;		_ENVIA_LCD_CMD
  1629 ;;		_ENVIA_NIBBLE
  1630 ;; This function is called by:
  1631 ;;		_LCD_INIT
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text12
  1636  000C4E                     __ptext12:
  1637                           	callstack 0
  1638  000C4E                     _LCD_CONFIG:
  1639                           	callstack 22
  1640  000C4E                     
  1641                           ;LCD.c: 103:  LATEbits.LATE0 = 0;
  1642  000C4E  908D               	bcf	141,0,c	;volatile
  1643                           
  1644                           ;LCD.c: 104:  LATEbits.LATE1 = 0;
  1645  000C50  928D               	bcf	141,1,c	;volatile
  1646  000C52                     
  1647                           ;LCD.c: 105:  ENVIA_NIBBLE(0x30);
  1648  000C52  0E30               	movlw	48
  1649  000C54  ECBD  F007         	call	_ENVIA_NIBBLE
  1650  000C58                     
  1651                           ;LCD.c: 106:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
  1652  000C58  0E03               	movlw	3
  1653  000C5A  6E14               	movwf	??_LCD_CONFIG^0,c
  1654  000C5C  0E98               	movlw	152
  1655  000C5E                     u567:
  1656  000C5E  2EE8               	decfsz	wreg,f,c
  1657  000C60  D7FE               	bra	u567
  1658  000C62  2E14               	decfsz	??_LCD_CONFIG^0,f,c
  1659  000C64  D7FC               	bra	u567
  1660  000C66                     
  1661                           ;LCD.c: 107:  ENVIA_NIBBLE(0x30);
  1662  000C66  0E30               	movlw	48
  1663  000C68  ECBD  F007         	call	_ENVIA_NIBBLE
  1664                           
  1665                           ;LCD.c: 108:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1666  000C6C  0E21               	movlw	33
  1667  000C6E                     u577:
  1668  000C6E  2EE8               	decfsz	wreg,f,c
  1669  000C70  D7FE               	bra	u577
  1670  000C72  F000               	nop	
  1671  000C74                     
  1672                           ;LCD.c: 109:     ENVIA_NIBBLE(0x30);
  1673  000C74  0E30               	movlw	48
  1674  000C76  ECBD  F007         	call	_ENVIA_NIBBLE
  1675  000C7A                     
  1676                           ;LCD.c: 110:  ENVIA_NIBBLE(0x20);
  1677  000C7A  0E20               	movlw	32
  1678  000C7C  ECBD  F007         	call	_ENVIA_NIBBLE
  1679  000C80                     
  1680                           ;LCD.c: 111:  ENVIA_LCD_CMD(0x01);
  1681  000C80  0E01               	movlw	1
  1682  000C82  EC28  F007         	call	_ENVIA_LCD_CMD
  1683  000C86                     
  1684                           ;LCD.c: 112:  ENVIA_LCD_CMD(0x28);
  1685  000C86  0E28               	movlw	40
  1686  000C88  EC28  F007         	call	_ENVIA_LCD_CMD
  1687  000C8C                     
  1688                           ;LCD.c: 113:  ENVIA_LCD_CMD(0x0F);
  1689  000C8C  0E0F               	movlw	15
  1690  000C8E  EC28  F007         	call	_ENVIA_LCD_CMD
  1691  000C92                     
  1692                           ;LCD.c: 114:  ENVIA_LCD_CMD(0x06);
  1693  000C92  0E06               	movlw	6
  1694  000C94  EC28  F007         	call	_ENVIA_LCD_CMD
  1695  000C98                     
  1696                           ;LCD.c: 115:  ENVIA_LCD_CMD(0x01);
  1697  000C98  0E01               	movlw	1
  1698  000C9A  EC28  F007         	call	_ENVIA_LCD_CMD
  1699  000C9E  0012               	return		;funcret
  1700  000CA0                     __end_of_LCD_CONFIG:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _CURSOR_ONOFF *****************
  1704 ;; Defined at:
  1705 ;;		line 54 in file "LCD.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  estado          1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  estado          1   19[COMRAM] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2, status,0, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0
  1720 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1722 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1723 ;;Total ram usage:        1 bytes
  1724 ;; Hardware stack levels used: 1
  1725 ;; Hardware stack levels required when called: 6
  1726 ;; This function calls:
  1727 ;;		_ENVIA_LCD_CMD
  1728 ;; This function is called by:
  1729 ;;		_LCD_INIT
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text13
  1734  000F1C                     __ptext13:
  1735                           	callstack 0
  1736  000F1C                     _CURSOR_ONOFF:
  1737                           	callstack 22
  1738                           
  1739                           ;incstack = 0
  1740                           ;CURSOR_ONOFF@estado stored from wreg
  1741  000F1C  6E14               	movwf	CURSOR_ONOFF@estado^0,c
  1742  000F1E                     
  1743                           ;LCD.c: 54: void CURSOR_ONOFF(unsigned char estado);LCD.c: 55: {;LCD.c: 56:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1744  000F1E  5014               	movf	CURSOR_ONOFF@estado^0,w,c
  1745  000F20  A4D8               	btfss	status,2,c
  1746  000F22  EF95  F007         	goto	u21
  1747  000F26  EF97  F007         	goto	u20
  1748  000F2A                     u21:
  1749  000F2A  EF9A  F007         	goto	l976
  1750  000F2E                     u20:
  1751  000F2E  0E0E               	movlw	14
  1752  000F30  EC28  F007         	call	_ENVIA_LCD_CMD
  1753  000F34                     l976:
  1754                           
  1755                           ;LCD.c: 57:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1756  000F34  0414               	decf	CURSOR_ONOFF@estado^0,w,c
  1757  000F36  A4D8               	btfss	status,2,c
  1758  000F38  EFA0  F007         	goto	u31
  1759  000F3C  EFA2  F007         	goto	u30
  1760  000F40                     u31:
  1761  000F40  EFA5  F007         	goto	l56
  1762  000F44                     u30:
  1763  000F44  0E0C               	movlw	12
  1764  000F46  EC28  F007         	call	_ENVIA_LCD_CMD
  1765  000F4A                     l56:
  1766  000F4A  0012               	return		;funcret
  1767  000F4C                     __end_of_CURSOR_ONOFF:
  1768                           	callstack 0
  1769                           
  1770 ;; *************** function _CURSOR_HOME *****************
  1771 ;; Defined at:
  1772 ;;		line 29 in file "LCD.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, status,0, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1786 ;;      Params:         0       0       0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 6
  1793 ;; This function calls:
  1794 ;;		_ENVIA_LCD_CMD
  1795 ;; This function is called by:
  1796 ;;		_LCD_INIT
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text14
  1801  000FCA                     __ptext14:
  1802                           	callstack 0
  1803  000FCA                     _CURSOR_HOME:
  1804                           	callstack 22
  1805  000FCA                     
  1806                           ;LCD.c: 31:  ENVIA_LCD_CMD(0x02);
  1807  000FCA  0E02               	movlw	2
  1808  000FCC  EC28  F007         	call	_ENVIA_LCD_CMD
  1809  000FD0  0012               	return		;funcret
  1810  000FD2                     __end_of_CURSOR_HOME:
  1811                           	callstack 0
  1812                           
  1813 ;; *************** function _BORRAR_LCD *****************
  1814 ;; Defined at:
  1815 ;;		line 96 in file "LCD.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1829 ;;      Params:         0       0       0       0       0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1832 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1833 ;;Total ram usage:        0 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 6
  1836 ;; This function calls:
  1837 ;;		_ENVIA_LCD_CMD
  1838 ;; This function is called by:
  1839 ;;		_LCD_INIT
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text15
  1845  000FD2                     __ptext15:
  1846                           	callstack 0
  1847  000FD2                     _BORRAR_LCD:
  1848                           	callstack 22
  1849  000FD2                     
  1850                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
  1851  000FD2  0E01               	movlw	1
  1852  000FD4  EC28  F007         	call	_ENVIA_LCD_CMD
  1853  000FD8  0012               	return		;funcret
  1854  000FDA                     __end_of_BORRAR_LCD:
  1855                           	callstack 0
  1856                           
  1857 ;; *************** function _ENVIA_LCD_CMD *****************
  1858 ;; Defined at:
  1859 ;;		line 128 in file "LCD.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  dato            1    wreg     unsigned char 
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;  dato            1   17[COMRAM] unsigned char 
  1864 ;;  aux             1   18[COMRAM] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1874 ;;      Params:         0       0       0       0       0       0       0       0       0
  1875 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1877 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1878 ;;Total ram usage:        2 bytes
  1879 ;; Hardware stack levels used: 1
  1880 ;; Hardware stack levels required when called: 5
  1881 ;; This function calls:
  1882 ;;		_ENVIA_NIBBLE
  1883 ;;		_LEER_LCD
  1884 ;; This function is called by:
  1885 ;;		_POS_CURSOR
  1886 ;;		_CURSOR_HOME
  1887 ;;		_CURSOR_ONOFF
  1888 ;;		_BORRAR_LCD
  1889 ;;		_LCD_CONFIG
  1890 ;;		_BLINK_CURSOR
  1891 ;;		_DISPLAY_ONOFF
  1892 ;;		_CURSOR_SHIFTLEFT
  1893 ;;		_CURSOR_SHIFTRIGHT
  1894 ;;		_DISPLAY_SHIFTLEFT
  1895 ;;		_DISPLAY_SHIFTRIGHT
  1896 ;;		_GENERACARACTER
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text16
  1901  000E50                     __ptext16:
  1902                           	callstack 0
  1903  000E50                     _ENVIA_LCD_CMD:
  1904                           	callstack 23
  1905                           
  1906                           ;incstack = 0
  1907                           ;ENVIA_LCD_CMD@dato stored from wreg
  1908  000E50  6E12               	movwf	ENVIA_LCD_CMD@dato^0,c
  1909  000E52                     
  1910                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATEbits.LATE0 = 0;
  1911  000E52  908D               	bcf	141,0,c	;volatile
  1912  000E54                     
  1913                           ;LCD.c: 132:  LEER_LCD();
  1914  000E54  EC59  F005         	call	_LEER_LCD	;wreg free
  1915  000E58                     
  1916                           ;LCD.c: 133:  TRISB = 0b00001000;
  1917  000E58  0E08               	movlw	8
  1918  000E5A  6E93               	movwf	147,c	;volatile
  1919  000E5C                     
  1920                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1921  000E5C  0E21               	movlw	33
  1922  000E5E                     u587:
  1923  000E5E  2EE8               	decfsz	wreg,f,c
  1924  000E60  D7FE               	bra	u587
  1925  000E62  F000               	nop	
  1926  000E64                     
  1927                           ;LCD.c: 135:     LATEbits.LATE1 = 0;
  1928  000E64  928D               	bcf	141,1,c	;volatile
  1929  000E66                     
  1930                           ;LCD.c: 136:  LATEbits.LATE2 = 0;
  1931  000E66  948D               	bcf	141,2,c	;volatile
  1932  000E68                     
  1933                           ;LCD.c: 137:  LATEbits.LATE0 = 0;
  1934  000E68  908D               	bcf	141,0,c	;volatile
  1935  000E6A                     
  1936                           ;LCD.c: 138:  aux = dato & 0xF0;
  1937  000E6A  5012               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1938  000E6C  0BF0               	andlw	240
  1939  000E6E  6E13               	movwf	ENVIA_LCD_CMD@aux^0,c
  1940  000E70                     
  1941                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  1942  000E70  5013               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1943  000E72  ECBD  F007         	call	_ENVIA_NIBBLE
  1944  000E76                     
  1945                           ;LCD.c: 140:  aux = dato<<4;
  1946  000E76  3812               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1947  000E78  0BF0               	andlw	240
  1948  000E7A  6E13               	movwf	ENVIA_LCD_CMD@aux^0,c
  1949  000E7C                     
  1950                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  1951  000E7C  5013               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1952  000E7E  ECBD  F007         	call	_ENVIA_NIBBLE
  1953  000E82  0012               	return		;funcret
  1954  000E84                     __end_of_ENVIA_LCD_CMD:
  1955                           	callstack 0
  1956                           
  1957 ;; *************** function _LEER_LCD *****************
  1958 ;; Defined at:
  1959 ;;		line 144 in file "LCD.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  aux             1   16[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1973 ;;      Params:         0       0       0       0       0       0       0       0       0
  1974 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1976 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used: 1
  1979 ;; Hardware stack levels required when called: 4
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_ENVIA_CHAR
  1984 ;;		_ENVIA_LCD_CMD
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text17
  1989  000AB2                     __ptext17:
  1990                           	callstack 0
  1991  000AB2                     _LEER_LCD:
  1992                           	callstack 23
  1993  000AB2                     
  1994                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISB = 0xF8;
  1995  000AB2  0EF8               	movlw	248
  1996  000AB4  6E93               	movwf	147,c	;volatile
  1997  000AB6                     
  1998                           ;LCD.c: 148:  LATEbits.LATE0 = 0;
  1999  000AB6  908D               	bcf	141,0,c	;volatile
  2000  000AB8                     
  2001                           ;LCD.c: 149:  LATEbits.LATE1 = 1;
  2002  000AB8  828D               	bsf	141,1,c	;volatile
  2003  000ABA                     
  2004                           ;LCD.c: 150:  LATEbits.LATE2 = 1;
  2005  000ABA  848D               	bsf	141,2,c	;volatile
  2006  000ABC                     
  2007                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2008  000ABC  0E21               	movlw	33
  2009  000ABE                     u597:
  2010  000ABE  2EE8               	decfsz	wreg,f,c
  2011  000AC0  D7FE               	bra	u597
  2012  000AC2  F000               	nop	
  2013  000AC4                     
  2014                           ;LCD.c: 152:  aux = PORTB;
  2015  000AC4  CF81 F011          	movff	3969,LEER_LCD@aux	;volatile
  2016  000AC8                     
  2017                           ;LCD.c: 153:  LATEbits.LATE2 = 0;
  2018  000AC8  948D               	bcf	141,2,c	;volatile
  2019  000ACA                     
  2020                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2021  000ACA  0E21               	movlw	33
  2022  000ACC                     u607:
  2023  000ACC  2EE8               	decfsz	wreg,f,c
  2024  000ACE  D7FE               	bra	u607
  2025  000AD0  F000               	nop	
  2026  000AD2                     
  2027                           ;LCD.c: 155:  LATEbits.LATE2 = 1;
  2028  000AD2  848D               	bsf	141,2,c	;volatile
  2029  000AD4                     
  2030                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2031  000AD4  0E21               	movlw	33
  2032  000AD6                     u617:
  2033  000AD6  2EE8               	decfsz	wreg,f,c
  2034  000AD8  D7FE               	bra	u617
  2035  000ADA  F000               	nop	
  2036  000ADC                     
  2037                           ;LCD.c: 157:  LATEbits.LATE2 = 0;
  2038  000ADC  948D               	bcf	141,2,c	;volatile
  2039  000ADE                     l924:
  2040                           
  2041                           ;LCD.c: 158:  aux = aux & 0x80;
  2042  000ADE  5011               	movf	LEER_LCD@aux^0,w,c
  2043  000AE0  0B80               	andlw	128
  2044  000AE2  6E11               	movwf	LEER_LCD@aux^0,c
  2045                           
  2046                           ;LCD.c: 159:  while(aux == 0x80)
  2047  000AE4  EF88  F005         	goto	l938
  2048  000AE8                     l87:
  2049                           
  2050                           ;LCD.c: 160:         {;LCD.c: 161:             LATEbits.LATE2 = 1;
  2051  000AE8  848D               	bsf	141,2,c	;volatile
  2052  000AEA                     
  2053                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2054  000AEA  0E21               	movlw	33
  2055  000AEC                     u627:
  2056  000AEC  2EE8               	decfsz	wreg,f,c
  2057  000AEE  D7FE               	bra	u627
  2058  000AF0  F000               	nop	
  2059  000AF2                     
  2060                           ;LCD.c: 163:             aux = PORTB;
  2061  000AF2  CF81 F011          	movff	3969,LEER_LCD@aux	;volatile
  2062  000AF6                     
  2063                           ;LCD.c: 164:             LATEbits.LATE2 = 0;
  2064  000AF6  948D               	bcf	141,2,c	;volatile
  2065                           
  2066                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2067  000AF8  0E21               	movlw	33
  2068  000AFA                     u637:
  2069  000AFA  2EE8               	decfsz	wreg,f,c
  2070  000AFC  D7FE               	bra	u637
  2071  000AFE  F000               	nop	
  2072  000B00                     
  2073                           ;LCD.c: 166:             LATEbits.LATE2 = 1;
  2074  000B00  848D               	bsf	141,2,c	;volatile
  2075                           
  2076                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2077  000B02  0E21               	movlw	33
  2078  000B04                     u647:
  2079  000B04  2EE8               	decfsz	wreg,f,c
  2080  000B06  D7FE               	bra	u647
  2081  000B08  F000               	nop	
  2082  000B0A                     
  2083                           ;LCD.c: 168:             LATEbits.LATE2 = 0;
  2084  000B0A  948D               	bcf	141,2,c	;volatile
  2085  000B0C  EF6F  F005         	goto	l924
  2086  000B10                     l938:
  2087                           
  2088                           ;LCD.c: 159:  while(aux == 0x80)
  2089  000B10  0E80               	movlw	128
  2090  000B12  1811               	xorwf	LEER_LCD@aux^0,w,c
  2091  000B14  B4D8               	btfsc	status,2,c
  2092  000B16  EF8F  F005         	goto	u11
  2093  000B1A  EF91  F005         	goto	u10
  2094  000B1E                     u11:
  2095  000B1E  EF74  F005         	goto	l87
  2096  000B22                     u10:
  2097  000B22  0012               	return		;funcret
  2098  000B24                     __end_of_LEER_LCD:
  2099                           	callstack 0
  2100                           
  2101 ;; *************** function _ENVIA_NIBBLE *****************
  2102 ;; Defined at:
  2103 ;;		line 118 in file "LCD.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  dato            1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  dato            1   16[COMRAM] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2120 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used: 1
  2123 ;; Hardware stack levels required when called: 4
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_ENVIA_CHAR
  2128 ;;		_LCD_CONFIG
  2129 ;;		_ENVIA_LCD_CMD
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text18
  2134  000F7A                     __ptext18:
  2135                           	callstack 0
  2136  000F7A                     _ENVIA_NIBBLE:
  2137                           	callstack 23
  2138                           
  2139                           ;incstack = 0
  2140                           ;ENVIA_NIBBLE@dato stored from wreg
  2141  000F7A  6E11               	movwf	ENVIA_NIBBLE@dato^0,c
  2142  000F7C                     
  2143                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATB &= 0x
      +                          0F;
  2144  000F7C  0E0F               	movlw	15
  2145  000F7E  168A               	andwf	138,f,c	;volatile
  2146                           
  2147                           ;LCD.c: 121:  dato &= 0xF0;
  2148  000F80  0EF0               	movlw	240
  2149  000F82  1611               	andwf	ENVIA_NIBBLE@dato^0,f,c
  2150                           
  2151                           ;LCD.c: 122:  LATB|= dato;
  2152  000F84  5011               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  2153  000F86  128A               	iorwf	138,f,c	;volatile
  2154  000F88                     
  2155                           ;LCD.c: 123:  LATEbits.LATE2 = 1;
  2156  000F88  848D               	bsf	141,2,c	;volatile
  2157  000F8A                     
  2158                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2159  000F8A  0E21               	movlw	33
  2160  000F8C                     u657:
  2161  000F8C  2EE8               	decfsz	wreg,f,c
  2162  000F8E  D7FE               	bra	u657
  2163  000F90  F000               	nop	
  2164  000F92                     
  2165                           ;LCD.c: 125:  LATEbits.LATE2 = 0;
  2166  000F92  948D               	bcf	141,2,c	;volatile
  2167  000F94  0012               	return		;funcret
  2168  000F96                     __end_of_ENVIA_NIBBLE:
  2169                           	callstack 0
  2170                           
  2171 ;; *************** function _ISRs *****************
  2172 ;; Defined at:
  2173 ;;		line 100 in file "maincode.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2187 ;;      Params:         0       0       0       0       0       0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2189 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2190 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2191 ;;Total ram usage:        6 bytes
  2192 ;; Hardware stack levels used: 1
  2193 ;; Hardware stack levels required when called: 3
  2194 ;; This function calls:
  2195 ;;		i2_BORRAR_LCD
  2196 ;;		i2_ESCRIBE_MENSAJE2
  2197 ;;		i2_POS_CURSOR
  2198 ;; This function is called by:
  2199 ;;		Interrupt level 2
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	intcode
  2204  000008                     __pintcode:
  2205                           	callstack 0
  2206  000008                     _ISRs:
  2207                           	callstack 22
  2208                           
  2209                           ;incstack = 0
  2210  000008  8226               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2211  00000A  CFF6 F00D          	movff	tblptrl,??_ISRs+2
  2212  00000E  CFF7 F00E          	movff	tblptrh,??_ISRs+3
  2213  000012  CFF8 F00F          	movff	tblptru,??_ISRs+4
  2214  000016  CFF5 F010          	movff	tablat,??_ISRs+5
  2215  00001A                     
  2216                           ;maincode.c: 101:     if(INTCONbits.INT0IF == 1){
  2217  00001A  A2F2               	btfss	242,1,c	;volatile
  2218  00001C  EF12  F000         	goto	i2u47_41
  2219  000020  EF14  F000         	goto	i2u47_40
  2220  000024                     i2u47_41:
  2221  000024  EF25  F000         	goto	i2l199
  2222  000028                     i2u47_40:
  2223  000028                     
  2224                           ;maincode.c: 102:         INTCONbits.INT0IF = 0;
  2225  000028  92F2               	bcf	242,1,c	;volatile
  2226  00002A                     
  2227                           ;maincode.c: 103:         if(nivel == 9){
  2228  00002A  0E09               	movlw	9
  2229  00002C  1821               	xorwf	_nivel^0,w,c
  2230  00002E  A4D8               	btfss	status,2,c
  2231  000030  EF1C  F000         	goto	i2u48_41
  2232  000034  EF1E  F000         	goto	i2u48_40
  2233  000038                     i2u48_41:
  2234  000038  EF22  F000         	goto	i2l1746
  2235  00003C                     i2u48_40:
  2236  00003C                     
  2237                           ;maincode.c: 104:             nivel = 0;
  2238  00003C  0E00               	movlw	0
  2239  00003E  6E21               	movwf	_nivel^0,c
  2240                           
  2241                           ;maincode.c: 105:         }
  2242  000040  EF96  F000         	goto	i2l1790
  2243  000044                     i2l1746:
  2244                           
  2245                           ;maincode.c: 107:             nivel++;
  2246  000044  2A21               	incf	_nivel^0,f,c
  2247  000046  EF96  F000         	goto	i2l1790
  2248  00004A                     i2l199:
  2249  00004A  A0F0               	btfss	240,0,c	;volatile
  2250  00004C  EF2A  F000         	goto	i2u49_41
  2251  000050  EF2C  F000         	goto	i2u49_40
  2252  000054                     i2u49_41:
  2253  000054  EF3C  F000         	goto	i2l203
  2254  000058                     i2u49_40:
  2255  000058                     
  2256                           ;maincode.c: 111:         INTCON3bits.INT1IF = 0;
  2257  000058  90F0               	bcf	240,0,c	;volatile
  2258  00005A                     
  2259                           ;maincode.c: 112:         if(nivel == 0){
  2260  00005A  5021               	movf	_nivel^0,w,c
  2261  00005C  A4D8               	btfss	status,2,c
  2262  00005E  EF33  F000         	goto	i2u50_41
  2263  000062  EF35  F000         	goto	i2u50_40
  2264  000066                     i2u50_41:
  2265  000066  EF39  F000         	goto	i2l1754
  2266  00006A                     i2u50_40:
  2267  00006A                     
  2268                           ;maincode.c: 113:             nivel = 9;
  2269  00006A  0E09               	movlw	9
  2270  00006C  6E21               	movwf	_nivel^0,c
  2271                           
  2272                           ;maincode.c: 114:         }
  2273  00006E  EF96  F000         	goto	i2l1790
  2274  000072                     i2l1754:
  2275                           
  2276                           ;maincode.c: 116:             nivel--;
  2277  000072  0621               	decf	_nivel^0,f,c
  2278  000074  EF96  F000         	goto	i2l1790
  2279  000078                     i2l203:
  2280  000078  A2F0               	btfss	240,1,c	;volatile
  2281  00007A  EF41  F000         	goto	i2u51_41
  2282  00007E  EF43  F000         	goto	i2u51_40
  2283  000082                     i2u51_41:
  2284  000082  EF6C  F000         	goto	i2l202
  2285  000086                     i2u51_40:
  2286  000086                     
  2287                           ;maincode.c: 120:         INTCON3bits.INT2IF = 0;
  2288  000086  92F0               	bcf	240,1,c	;volatile
  2289  000088                     
  2290                           ;maincode.c: 121:         BORRAR_LCD();
  2291  000088  ECED  F007         	call	i2_BORRAR_LCD	;wreg free
  2292                           
  2293                           ;maincode.c: 122:         POS_CURSOR(1,0);
  2294  00008C  0E00               	movlw	0
  2295  00008E  6E04               	movwf	i2POS_CURSOR@columna^0,c
  2296  000090  0E01               	movlw	1
  2297  000092  ECD4  F006         	call	i2_POS_CURSOR
  2298  000096                     
  2299                           ;maincode.c: 123:         ESCRIBE_MENSAJE2("Kalun Jose");
  2300  000096  0E20               	movlw	low STR_6
  2301  000098  6E05               	movwf	i2ESCRIBE_MENSAJE2@cadena^0,c
  2302  00009A  0E08               	movlw	high STR_6
  2303  00009C  6E06               	movwf	(i2ESCRIBE_MENSAJE2@cadena+1)^0,c
  2304  00009E  EC75  F006         	call	i2_ESCRIBE_MENSAJE2	;wreg free
  2305  0000A2                     
  2306                           ;maincode.c: 124:         POS_CURSOR(2,0);
  2307  0000A2  0E00               	movlw	0
  2308  0000A4  6E04               	movwf	i2POS_CURSOR@columna^0,c
  2309  0000A6  0E02               	movlw	2
  2310  0000A8  ECD4  F006         	call	i2_POS_CURSOR
  2311                           
  2312                           ;maincode.c: 125:         ESCRIBE_MENSAJE2("Lau Gan");
  2313  0000AC  0E2B               	movlw	low STR_7
  2314  0000AE  6E05               	movwf	i2ESCRIBE_MENSAJE2@cadena^0,c
  2315  0000B0  0E08               	movlw	high STR_7
  2316  0000B2  6E06               	movwf	(i2ESCRIBE_MENSAJE2@cadena+1)^0,c
  2317  0000B4  EC75  F006         	call	i2_ESCRIBE_MENSAJE2	;wreg free
  2318  0000B8                     
  2319                           ;maincode.c: 126:         _delay((unsigned long)((5000)*(4000000UL/4000.0)));
  2320  0000B8  0E1A               	movlw	26
  2321  0000BA  6E0C               	movwf	(??_ISRs+1)^0,c
  2322  0000BC  0E5E               	movlw	94
  2323  0000BE  6E0B               	movwf	??_ISRs^0,c
  2324  0000C0  0E6E               	movlw	110
  2325  0000C2                     i2u66_47:
  2326  0000C2  2EE8               	decfsz	wreg,f,c
  2327  0000C4  D7FE               	bra	i2u66_47
  2328  0000C6  2E0B               	decfsz	??_ISRs^0,f,c
  2329  0000C8  D7FC               	bra	i2u66_47
  2330  0000CA  2E0C               	decfsz	(??_ISRs+1)^0,f,c
  2331  0000CC  D7FA               	bra	i2u66_47
  2332  0000CE  D000               	nop2	
  2333  0000D0                     
  2334                           ;maincode.c: 127:         BORRAR_LCD();
  2335  0000D0  ECED  F007         	call	i2_BORRAR_LCD	;wreg free
  2336  0000D4  EF96  F000         	goto	i2l1790
  2337  0000D8                     i2l202:
  2338                           
  2339                           ;maincode.c: 129:     switch(nivel){
  2340  0000D8  EF96  F000         	goto	i2l1790
  2341  0000DC                     i2l1768:
  2342                           
  2343                           ;maincode.c: 131:             CCPR1L = 0;
  2344  0000DC  0E00               	movlw	0
  2345  0000DE  6EBE               	movwf	190,c	;volatile
  2346                           
  2347                           ;maincode.c: 132:             break;
  2348  0000E0  EFCB  F000         	goto	i2l220
  2349  0000E4                     i2l1770:
  2350                           
  2351                           ;maincode.c: 134:             CCPR1L = 7;
  2352  0000E4  0E07               	movlw	7
  2353  0000E6  6EBE               	movwf	190,c	;volatile
  2354                           
  2355                           ;maincode.c: 135:             break;
  2356  0000E8  EFCB  F000         	goto	i2l220
  2357  0000EC                     i2l1772:
  2358                           
  2359                           ;maincode.c: 137:             CCPR1L = 14;
  2360  0000EC  0E0E               	movlw	14
  2361  0000EE  6EBE               	movwf	190,c	;volatile
  2362                           
  2363                           ;maincode.c: 138:             break;
  2364  0000F0  EFCB  F000         	goto	i2l220
  2365  0000F4                     i2l1774:
  2366                           
  2367                           ;maincode.c: 140:             CCPR1L = 21;
  2368  0000F4  0E15               	movlw	21
  2369  0000F6  6EBE               	movwf	190,c	;volatile
  2370                           
  2371                           ;maincode.c: 141:             break;
  2372  0000F8  EFCB  F000         	goto	i2l220
  2373  0000FC                     i2l1776:
  2374                           
  2375                           ;maincode.c: 143:             CCPR1L = 28;
  2376  0000FC  0E1C               	movlw	28
  2377  0000FE  6EBE               	movwf	190,c	;volatile
  2378                           
  2379                           ;maincode.c: 144:             break;
  2380  000100  EFCB  F000         	goto	i2l220
  2381  000104                     i2l1778:
  2382                           
  2383                           ;maincode.c: 146:             CCPR1L = 35;
  2384  000104  0E23               	movlw	35
  2385  000106  6EBE               	movwf	190,c	;volatile
  2386                           
  2387                           ;maincode.c: 147:             break;
  2388  000108  EFCB  F000         	goto	i2l220
  2389  00010C                     i2l1780:
  2390                           
  2391                           ;maincode.c: 149:             CCPR1L = 42;
  2392  00010C  0E2A               	movlw	42
  2393  00010E  6EBE               	movwf	190,c	;volatile
  2394                           
  2395                           ;maincode.c: 150:             break;
  2396  000110  EFCB  F000         	goto	i2l220
  2397  000114                     i2l1782:
  2398                           
  2399                           ;maincode.c: 152:             CCPR1L = 49;
  2400  000114  0E31               	movlw	49
  2401  000116  6EBE               	movwf	190,c	;volatile
  2402                           
  2403                           ;maincode.c: 153:             break;
  2404  000118  EFCB  F000         	goto	i2l220
  2405  00011C                     i2l1784:
  2406                           
  2407                           ;maincode.c: 155:             CCPR1L = 56;
  2408  00011C  0E38               	movlw	56
  2409  00011E  6EBE               	movwf	190,c	;volatile
  2410                           
  2411                           ;maincode.c: 156:             break;
  2412  000120  EFCB  F000         	goto	i2l220
  2413  000124                     i2l1786:
  2414                           
  2415                           ;maincode.c: 158:             CCPR1L = 62;
  2416  000124  0E3E               	movlw	62
  2417  000126  6EBE               	movwf	190,c	;volatile
  2418                           
  2419                           ;maincode.c: 159:             break;
  2420  000128  EFCB  F000         	goto	i2l220
  2421  00012C                     i2l1790:
  2422  00012C  5021               	movf	_nivel^0,w,c
  2423  00012E  6E0B               	movwf	??_ISRs^0,c
  2424  000130  6A0C               	clrf	(??_ISRs+1)^0,c
  2425                           
  2426                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2427                           ; Switch size 1, requested type "simple"
  2428                           ; Number of cases is 1, Range of values is 0 to 0
  2429                           ; switch strategies available:
  2430                           ; Name         Instructions Cycles
  2431                           ; simple_byte            4     3 (average)
  2432                           ;	Chosen strategy is simple_byte
  2433  000132  500C               	movf	(??_ISRs+1)^0,w,c
  2434  000134  0A00               	xorlw	0	; case 0
  2435  000136  B4D8               	btfsc	status,2,c
  2436  000138  EFA0  F000         	goto	i2l1838
  2437  00013C  EFCB  F000         	goto	i2l220
  2438  000140                     i2l1838:
  2439                           
  2440                           ; Switch size 1, requested type "simple"
  2441                           ; Number of cases is 10, Range of values is 0 to 9
  2442                           ; switch strategies available:
  2443                           ; Name         Instructions Cycles
  2444                           ; simple_byte           31    16 (average)
  2445                           ;	Chosen strategy is simple_byte
  2446  000140  500B               	movf	??_ISRs^0,w,c
  2447  000142  0A00               	xorlw	0	; case 0
  2448  000144  B4D8               	btfsc	status,2,c
  2449  000146  EF6E  F000         	goto	i2l1768
  2450  00014A  0A01               	xorlw	1	; case 1
  2451  00014C  B4D8               	btfsc	status,2,c
  2452  00014E  EF72  F000         	goto	i2l1770
  2453  000152  0A03               	xorlw	3	; case 2
  2454  000154  B4D8               	btfsc	status,2,c
  2455  000156  EF76  F000         	goto	i2l1772
  2456  00015A  0A01               	xorlw	1	; case 3
  2457  00015C  B4D8               	btfsc	status,2,c
  2458  00015E  EF7A  F000         	goto	i2l1774
  2459  000162  0A07               	xorlw	7	; case 4
  2460  000164  B4D8               	btfsc	status,2,c
  2461  000166  EF7E  F000         	goto	i2l1776
  2462  00016A  0A01               	xorlw	1	; case 5
  2463  00016C  B4D8               	btfsc	status,2,c
  2464  00016E  EF82  F000         	goto	i2l1778
  2465  000172  0A03               	xorlw	3	; case 6
  2466  000174  B4D8               	btfsc	status,2,c
  2467  000176  EF86  F000         	goto	i2l1780
  2468  00017A  0A01               	xorlw	1	; case 7
  2469  00017C  B4D8               	btfsc	status,2,c
  2470  00017E  EF8A  F000         	goto	i2l1782
  2471  000182  0A0F               	xorlw	15	; case 8
  2472  000184  B4D8               	btfsc	status,2,c
  2473  000186  EF8E  F000         	goto	i2l1784
  2474  00018A  0A01               	xorlw	1	; case 9
  2475  00018C  B4D8               	btfsc	status,2,c
  2476  00018E  EF92  F000         	goto	i2l1786
  2477  000192  EFCB  F000         	goto	i2l220
  2478  000196                     i2l220:
  2479  000196  C010  FFF5         	movff	??_ISRs+5,tablat
  2480  00019A  C00F  FFF8         	movff	??_ISRs+4,tblptru
  2481  00019E  C00E  FFF7         	movff	??_ISRs+3,tblptrh
  2482  0001A2  C00D  FFF6         	movff	??_ISRs+2,tblptrl
  2483  0001A6  9226               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2484  0001A8  0011               	retfie		f
  2485  0001AA                     __end_of_ISRs:
  2486                           	callstack 0
  2487                           
  2488 ;; *************** function i2_POS_CURSOR *****************
  2489 ;; Defined at:
  2490 ;;		line 5 in file "LCD.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  fila            1    wreg     unsigned char 
  2493 ;;  columna         1    3[COMRAM] unsigned char 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  fila            1    4[COMRAM] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2505 ;;      Params:         1       0       0       0       0       0       0       0       0
  2506 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2508 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2509 ;;Total ram usage:        2 bytes
  2510 ;; Hardware stack levels used: 1
  2511 ;; Hardware stack levels required when called: 2
  2512 ;; This function calls:
  2513 ;;		i2_ENVIA_LCD_CMD
  2514 ;; This function is called by:
  2515 ;;		_ISRs
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text20
  2520  000DA8                     __ptext20:
  2521                           	callstack 0
  2522  000DA8                     i2_POS_CURSOR:
  2523                           	callstack 22
  2524                           
  2525                           ;incstack = 0
  2526                           ;i2POS_CURSOR@fila stored from wreg
  2527  000DA8  6E05               	movwf	i2POS_CURSOR@fila^0,c
  2528  000DAA                     
  2529                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
  2530  000DAA  0405               	decf	i2POS_CURSOR@fila^0,w,c
  2531  000DAC  A4D8               	btfss	status,2,c
  2532  000DAE  EFDB  F006         	goto	i2u44_41
  2533  000DB2  EFDD  F006         	goto	i2u44_40
  2534  000DB6                     i2u44_41:
  2535  000DB6  EFE3  F006         	goto	i2l1674
  2536  000DBA                     i2u44_40:
  2537  000DBA                     
  2538                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
  2539  000DBA  5004               	movf	i2POS_CURSOR@columna^0,w,c
  2540  000DBC  0F80               	addlw	128
  2541  000DBE  EC5C  F007         	call	i2_ENVIA_LCD_CMD
  2542                           
  2543                           ;LCD.c: 10:  }
  2544  000DC2  EFF0  F006         	goto	i2l26
  2545  000DC6                     i2l1674:
  2546  000DC6  0E02               	movlw	2
  2547  000DC8  1805               	xorwf	i2POS_CURSOR@fila^0,w,c
  2548  000DCA  A4D8               	btfss	status,2,c
  2549  000DCC  EFEA  F006         	goto	i2u45_41
  2550  000DD0  EFEC  F006         	goto	i2u45_40
  2551  000DD4                     i2u45_41:
  2552  000DD4  EFF0  F006         	goto	i2l26
  2553  000DD8                     i2u45_40:
  2554  000DD8                     
  2555                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
  2556  000DD8  5004               	movf	i2POS_CURSOR@columna^0,w,c
  2557  000DDA  0FC0               	addlw	192
  2558  000DDC  EC5C  F007         	call	i2_ENVIA_LCD_CMD
  2559  000DE0                     i2l26:
  2560  000DE0  0012               	return		;funcret
  2561  000DE2                     __end_ofi2_POS_CURSOR:
  2562                           	callstack 0
  2563                           
  2564 ;; *************** function i2_ESCRIBE_MENSAJE2 *****************
  2565 ;; Defined at:
  2566 ;;		line 69 in file "LCD.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  cadena          2    4[COMRAM] PTR const unsigned char 
  2569 ;;		 -> STR_7(8), STR_6(11), STR_5(5), STR_4(6), 
  2570 ;;		 -> STR_3(5), STR_2(17), STR_1(14), 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  i               1    9[COMRAM] unsigned char 
  2573 ;;  tam             1    8[COMRAM] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2583 ;;      Params:         2       0       0       0       0       0       0       0       0
  2584 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2585 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2586 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2587 ;;Total ram usage:        6 bytes
  2588 ;; Hardware stack levels used: 1
  2589 ;; Hardware stack levels required when called: 2
  2590 ;; This function calls:
  2591 ;;		i2_ENVIA_CHAR
  2592 ;;		i2_strlen
  2593 ;; This function is called by:
  2594 ;;		_ISRs
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text21
  2599  000CEA                     __ptext21:
  2600                           	callstack 0
  2601  000CEA                     i2_ESCRIBE_MENSAJE2:
  2602                           	callstack 22
  2603  000CEA                     
  2604                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
  2605  000CEA  C005  F001         	movff	i2ESCRIBE_MENSAJE2@cadena,i2strlen@s
  2606  000CEE  C006  F002         	movff	i2ESCRIBE_MENSAJE2@cadena+1,i2strlen@s+1
  2607  000CF2  ECF1  F006         	call	i2_strlen	;wreg free
  2608  000CF6  5001               	movf	?i2_strlen^0,w,c
  2609  000CF8  6E09               	movwf	i2ESCRIBE_MENSAJE2@tam^0,c
  2610  000CFA                     
  2611                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
  2612  000CFA  0E00               	movlw	0
  2613  000CFC  6E0A               	movwf	i2ESCRIBE_MENSAJE2@i^0,c
  2614  000CFE  EF90  F006         	goto	i2l1688
  2615  000D02                     i2l1684:
  2616                           
  2617                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
  2618  000D02  500A               	movf	i2ESCRIBE_MENSAJE2@i^0,w,c
  2619  000D04  2405               	addwf	i2ESCRIBE_MENSAJE2@cadena^0,w,c
  2620  000D06  6E07               	movwf	??i2_ESCRIBE_MENSAJE2^0,c
  2621  000D08  0E00               	movlw	0
  2622  000D0A  2006               	addwfc	(i2ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  2623  000D0C  6E08               	movwf	(??i2_ESCRIBE_MENSAJE2+1)^0,c
  2624  000D0E  C007  FFF6         	movff	??i2_ESCRIBE_MENSAJE2,tblptrl
  2625  000D12  C008  FFF7         	movff	??i2_ESCRIBE_MENSAJE2+1,tblptrh
  2626  000D16                     	if	0	;tblptru may be non-zero
  2627  000D16                     	endif
  2628  000D16                     	if	0	;tblptru may be non-zero
  2629  000D16                     	endif
  2630  000D16  0008               	tblrd		*
  2631  000D18  50F5               	movf	tablat,w,c
  2632  000D1A  EC42  F007         	call	i2_ENVIA_CHAR
  2633  000D1E                     
  2634                           ;LCD.c: 77:  }
  2635  000D1E  2A0A               	incf	i2ESCRIBE_MENSAJE2@i^0,f,c
  2636  000D20                     i2l1688:
  2637  000D20  5009               	movf	i2ESCRIBE_MENSAJE2@tam^0,w,c
  2638  000D22  5C0A               	subwf	i2ESCRIBE_MENSAJE2@i^0,w,c
  2639  000D24  A0D8               	btfss	status,0,c
  2640  000D26  EF97  F006         	goto	i2u46_41
  2641  000D2A  EF99  F006         	goto	i2u46_40
  2642  000D2E                     i2u46_41:
  2643  000D2E  EF81  F006         	goto	i2l1684
  2644  000D32                     i2u46_40:
  2645  000D32  0012               	return		;funcret
  2646  000D34                     __end_ofi2_ESCRIBE_MENSAJE2:
  2647                           	callstack 0
  2648                           
  2649 ;; *************** function i2_strlen *****************
  2650 ;; Defined at:
  2651 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2654 ;;		 -> STR_7(8), STR_6(11), STR_5(5), STR_4(6), 
  2655 ;;		 -> STR_3(5), STR_2(17), STR_1(14), 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2658 ;;		 -> STR_7(8), STR_6(11), STR_5(5), STR_4(6), 
  2659 ;;		 -> STR_3(5), STR_2(17), STR_1(14), 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  2    0[COMRAM] unsigned int 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         2       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        4 bytes
  2674 ;; Hardware stack levels used: 1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		i2_ESCRIBE_MENSAJE2
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text22
  2683  000DE2                     __ptext22:
  2684                           	callstack 0
  2685  000DE2                     i2_strlen:
  2686                           	callstack 23
  2687  000DE2  C001  F003         	movff	i2strlen@s,i2strlen@a
  2688  000DE6  C002  F004         	movff	i2strlen@s+1,i2strlen@a+1
  2689  000DEA  EFF9  F006         	goto	i2l1634
  2690  000DEE                     i2l1632:
  2691  000DEE  4A01               	infsnz	i2strlen@s^0,f,c
  2692  000DF0  2A02               	incf	(i2strlen@s+1)^0,f,c
  2693  000DF2                     i2l1634:
  2694  000DF2  C001  FFF6         	movff	i2strlen@s,tblptrl
  2695  000DF6  C002  FFF7         	movff	i2strlen@s+1,tblptrh
  2696  000DFA                     	if	0	;tblptru may be non-zero
  2697  000DFA                     	endif
  2698  000DFA                     	if	0	;tblptru may be non-zero
  2699  000DFA                     	endif
  2700  000DFA  0008               	tblrd		*
  2701  000DFC  50F5               	movf	tablat,w,c
  2702  000DFE  0900               	iorlw	0
  2703  000E00  A4D8               	btfss	status,2,c
  2704  000E02  EF05  F007         	goto	i2u42_41
  2705  000E06  EF07  F007         	goto	i2u42_40
  2706  000E0A                     i2u42_41:
  2707  000E0A  EFF7  F006         	goto	i2l1632
  2708  000E0E                     i2u42_40:
  2709  000E0E  5003               	movf	i2strlen@a^0,w,c
  2710  000E10  5C01               	subwf	i2strlen@s^0,w,c
  2711  000E12  6E01               	movwf	?i2_strlen^0,c
  2712  000E14  5004               	movf	(i2strlen@a+1)^0,w,c
  2713  000E16  5802               	subwfb	(i2strlen@s+1)^0,w,c
  2714  000E18  6E02               	movwf	(?i2_strlen+1)^0,c
  2715  000E1A  0012               	return		;funcret
  2716  000E1C                     __end_ofi2_strlen:
  2717                           	callstack 0
  2718                           
  2719 ;; *************** function i2_ENVIA_CHAR *****************
  2720 ;; Defined at:
  2721 ;;		line 80 in file "LCD.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  dato            1    wreg     unsigned char 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  dato            1    1[COMRAM] unsigned char 
  2726 ;;  aux             1    2[COMRAM] unsigned char 
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, status,2, status,0, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2736 ;;      Params:         0       0       0       0       0       0       0       0       0
  2737 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2739 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2740 ;;Total ram usage:        2 bytes
  2741 ;; Hardware stack levels used: 1
  2742 ;; Hardware stack levels required when called: 1
  2743 ;; This function calls:
  2744 ;;		i2_ENVIA_NIBBLE
  2745 ;;		i2_LEER_LCD
  2746 ;; This function is called by:
  2747 ;;		i2_ESCRIBE_MENSAJE2
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text23
  2752  000E84                     __ptext23:
  2753                           	callstack 0
  2754  000E84                     i2_ENVIA_CHAR:
  2755                           	callstack 22
  2756                           
  2757                           ;incstack = 0
  2758                           ;i2ENVIA_CHAR@dato stored from wreg
  2759  000E84  6E02               	movwf	i2ENVIA_CHAR@dato^0,c
  2760  000E86                     
  2761                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATEbits.LATE0 = 1;
  2762  000E86  808D               	bsf	141,0,c	;volatile
  2763  000E88                     
  2764                           ;LCD.c: 84:  LEER_LCD();
  2765  000E88  EC92  F005         	call	i2_LEER_LCD	;wreg free
  2766  000E8C                     
  2767                           ;LCD.c: 85:  TRISB = 0x08;
  2768  000E8C  0E08               	movlw	8
  2769  000E8E  6E93               	movwf	147,c	;volatile
  2770  000E90                     
  2771                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2772  000E90  0E21               	movlw	33
  2773  000E92                     i2u67_47:
  2774  000E92  2EE8               	decfsz	wreg,f,c
  2775  000E94  D7FE               	bra	i2u67_47
  2776  000E96  F000               	nop	
  2777  000E98                     
  2778                           ;LCD.c: 87:  LATEbits.LATE1 = 0;
  2779  000E98  928D               	bcf	141,1,c	;volatile
  2780  000E9A                     
  2781                           ;LCD.c: 88:  LATEbits.LATE2 = 0;
  2782  000E9A  948D               	bcf	141,2,c	;volatile
  2783  000E9C                     
  2784                           ;LCD.c: 89:  LATEbits.LATE0 = 1;
  2785  000E9C  808D               	bsf	141,0,c	;volatile
  2786  000E9E                     
  2787                           ;LCD.c: 90:  aux = dato & 0xF0;
  2788  000E9E  5002               	movf	i2ENVIA_CHAR@dato^0,w,c
  2789  000EA0  0BF0               	andlw	240
  2790  000EA2  6E03               	movwf	i2ENVIA_CHAR@aux^0,c
  2791  000EA4                     
  2792                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
  2793  000EA4  5003               	movf	i2ENVIA_CHAR@aux^0,w,c
  2794  000EA6  ECCB  F007         	call	i2_ENVIA_NIBBLE
  2795  000EAA                     
  2796                           ;LCD.c: 92:  aux = dato << 4;
  2797  000EAA  3802               	swapf	i2ENVIA_CHAR@dato^0,w,c
  2798  000EAC  0BF0               	andlw	240
  2799  000EAE  6E03               	movwf	i2ENVIA_CHAR@aux^0,c
  2800  000EB0                     
  2801                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
  2802  000EB0  5003               	movf	i2ENVIA_CHAR@aux^0,w,c
  2803  000EB2  ECCB  F007         	call	i2_ENVIA_NIBBLE
  2804  000EB6  0012               	return		;funcret
  2805  000EB8                     __end_ofi2_ENVIA_CHAR:
  2806                           	callstack 0
  2807                           
  2808 ;; *************** function i2_BORRAR_LCD *****************
  2809 ;; Defined at:
  2810 ;;		line 96 in file "LCD.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2, status,0, cstack
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2824 ;;      Params:         0       0       0       0       0       0       0       0       0
  2825 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2827 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used: 1
  2830 ;; Hardware stack levels required when called: 2
  2831 ;; This function calls:
  2832 ;;		i2_ENVIA_LCD_CMD
  2833 ;; This function is called by:
  2834 ;;		_ISRs
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text24
  2839  000FDA                     __ptext24:
  2840                           	callstack 0
  2841  000FDA                     i2_BORRAR_LCD:
  2842                           	callstack 22
  2843  000FDA                     
  2844                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
  2845  000FDA  0E01               	movlw	1
  2846  000FDC  EC5C  F007         	call	i2_ENVIA_LCD_CMD
  2847  000FE0  0012               	return		;funcret
  2848  000FE2                     __end_ofi2_BORRAR_LCD:
  2849                           	callstack 0
  2850                           
  2851 ;; *************** function i2_ENVIA_LCD_CMD *****************
  2852 ;; Defined at:
  2853 ;;		line 128 in file "LCD.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  dato            1    wreg     unsigned char 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  dato            1    1[COMRAM] unsigned char 
  2858 ;;  aux             1    2[COMRAM] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2868 ;;      Params:         0       0       0       0       0       0       0       0       0
  2869 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2871 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2872 ;;Total ram usage:        2 bytes
  2873 ;; Hardware stack levels used: 1
  2874 ;; Hardware stack levels required when called: 1
  2875 ;; This function calls:
  2876 ;;		i2_ENVIA_NIBBLE
  2877 ;;		i2_LEER_LCD
  2878 ;; This function is called by:
  2879 ;;		i2_POS_CURSOR
  2880 ;;		i2_BORRAR_LCD
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text25
  2885  000EB8                     __ptext25:
  2886                           	callstack 0
  2887  000EB8                     i2_ENVIA_LCD_CMD:
  2888                           	callstack 22
  2889                           
  2890                           ;incstack = 0
  2891                           ;i2ENVIA_LCD_CMD@dato stored from wreg
  2892  000EB8  6E02               	movwf	i2ENVIA_LCD_CMD@dato^0,c
  2893  000EBA                     
  2894                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATEbits.LATE0 = 0;
  2895  000EBA  908D               	bcf	141,0,c	;volatile
  2896  000EBC                     
  2897                           ;LCD.c: 132:  LEER_LCD();
  2898  000EBC  EC92  F005         	call	i2_LEER_LCD	;wreg free
  2899  000EC0                     
  2900                           ;LCD.c: 133:  TRISB = 0b00001000;
  2901  000EC0  0E08               	movlw	8
  2902  000EC2  6E93               	movwf	147,c	;volatile
  2903  000EC4                     
  2904                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2905  000EC4  0E21               	movlw	33
  2906  000EC6                     i2u68_47:
  2907  000EC6  2EE8               	decfsz	wreg,f,c
  2908  000EC8  D7FE               	bra	i2u68_47
  2909  000ECA  F000               	nop	
  2910  000ECC                     
  2911                           ;LCD.c: 135:     LATEbits.LATE1 = 0;
  2912  000ECC  928D               	bcf	141,1,c	;volatile
  2913  000ECE                     
  2914                           ;LCD.c: 136:  LATEbits.LATE2 = 0;
  2915  000ECE  948D               	bcf	141,2,c	;volatile
  2916  000ED0                     
  2917                           ;LCD.c: 137:  LATEbits.LATE0 = 0;
  2918  000ED0  908D               	bcf	141,0,c	;volatile
  2919  000ED2                     
  2920                           ;LCD.c: 138:  aux = dato & 0xF0;
  2921  000ED2  5002               	movf	i2ENVIA_LCD_CMD@dato^0,w,c
  2922  000ED4  0BF0               	andlw	240
  2923  000ED6  6E03               	movwf	i2ENVIA_LCD_CMD@aux^0,c
  2924  000ED8                     
  2925                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  2926  000ED8  5003               	movf	i2ENVIA_LCD_CMD@aux^0,w,c
  2927  000EDA  ECCB  F007         	call	i2_ENVIA_NIBBLE
  2928  000EDE                     
  2929                           ;LCD.c: 140:  aux = dato<<4;
  2930  000EDE  3802               	swapf	i2ENVIA_LCD_CMD@dato^0,w,c
  2931  000EE0  0BF0               	andlw	240
  2932  000EE2  6E03               	movwf	i2ENVIA_LCD_CMD@aux^0,c
  2933  000EE4                     
  2934                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  2935  000EE4  5003               	movf	i2ENVIA_LCD_CMD@aux^0,w,c
  2936  000EE6  ECCB  F007         	call	i2_ENVIA_NIBBLE
  2937  000EEA  0012               	return		;funcret
  2938  000EEC                     __end_ofi2_ENVIA_LCD_CMD:
  2939                           	callstack 0
  2940                           
  2941 ;; *************** function i2_LEER_LCD *****************
  2942 ;; Defined at:
  2943 ;;		line 144 in file "LCD.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  aux             1    0[COMRAM] unsigned char 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2957 ;;      Params:         0       0       0       0       0       0       0       0       0
  2958 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2959 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2960 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2961 ;;Total ram usage:        1 bytes
  2962 ;; Hardware stack levels used: 1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		i2_ENVIA_CHAR
  2967 ;;		i2_ENVIA_LCD_CMD
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text26
  2972  000B24                     __ptext26:
  2973                           	callstack 0
  2974  000B24                     i2_LEER_LCD:
  2975                           	callstack 22
  2976  000B24                     
  2977                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISB = 0xF8;
  2978  000B24  0EF8               	movlw	248
  2979  000B26  6E93               	movwf	147,c	;volatile
  2980  000B28                     
  2981                           ;LCD.c: 148:  LATEbits.LATE0 = 0;
  2982  000B28  908D               	bcf	141,0,c	;volatile
  2983  000B2A                     
  2984                           ;LCD.c: 149:  LATEbits.LATE1 = 1;
  2985  000B2A  828D               	bsf	141,1,c	;volatile
  2986  000B2C                     
  2987                           ;LCD.c: 150:  LATEbits.LATE2 = 1;
  2988  000B2C  848D               	bsf	141,2,c	;volatile
  2989  000B2E                     
  2990                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2991  000B2E  0E21               	movlw	33
  2992  000B30                     i2u69_47:
  2993  000B30  2EE8               	decfsz	wreg,f,c
  2994  000B32  D7FE               	bra	i2u69_47
  2995  000B34  F000               	nop	
  2996  000B36                     
  2997                           ;LCD.c: 152:  aux = PORTB;
  2998  000B36  CF81 F001          	movff	3969,i2LEER_LCD@aux	;volatile
  2999  000B3A                     
  3000                           ;LCD.c: 153:  LATEbits.LATE2 = 0;
  3001  000B3A  948D               	bcf	141,2,c	;volatile
  3002  000B3C                     
  3003                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  3004  000B3C  0E21               	movlw	33
  3005  000B3E                     i2u70_47:
  3006  000B3E  2EE8               	decfsz	wreg,f,c
  3007  000B40  D7FE               	bra	i2u70_47
  3008  000B42  F000               	nop	
  3009  000B44                     
  3010                           ;LCD.c: 155:  LATEbits.LATE2 = 1;
  3011  000B44  848D               	bsf	141,2,c	;volatile
  3012  000B46                     
  3013                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  3014  000B46  0E21               	movlw	33
  3015  000B48                     i2u71_47:
  3016  000B48  2EE8               	decfsz	wreg,f,c
  3017  000B4A  D7FE               	bra	i2u71_47
  3018  000B4C  F000               	nop	
  3019  000B4E                     
  3020                           ;LCD.c: 157:  LATEbits.LATE2 = 0;
  3021  000B4E  948D               	bcf	141,2,c	;volatile
  3022  000B50                     i2l1512:
  3023                           
  3024                           ;LCD.c: 158:  aux = aux & 0x80;
  3025  000B50  5001               	movf	i2LEER_LCD@aux^0,w,c
  3026  000B52  0B80               	andlw	128
  3027  000B54  6E01               	movwf	i2LEER_LCD@aux^0,c
  3028                           
  3029                           ;LCD.c: 159:  while(aux == 0x80)
  3030  000B56  EFC1  F005         	goto	i2l1526
  3031  000B5A                     i2l87:
  3032                           
  3033                           ;LCD.c: 160:         {;LCD.c: 161:             LATEbits.LATE2 = 1;
  3034  000B5A  848D               	bsf	141,2,c	;volatile
  3035  000B5C                     
  3036                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  3037  000B5C  0E21               	movlw	33
  3038  000B5E                     i2u72_47:
  3039  000B5E  2EE8               	decfsz	wreg,f,c
  3040  000B60  D7FE               	bra	i2u72_47
  3041  000B62  F000               	nop	
  3042  000B64                     
  3043                           ;LCD.c: 163:             aux = PORTB;
  3044  000B64  CF81 F001          	movff	3969,i2LEER_LCD@aux	;volatile
  3045  000B68                     
  3046                           ;LCD.c: 164:             LATEbits.LATE2 = 0;
  3047  000B68  948D               	bcf	141,2,c	;volatile
  3048                           
  3049                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  3050  000B6A  0E21               	movlw	33
  3051  000B6C                     i2u73_47:
  3052  000B6C  2EE8               	decfsz	wreg,f,c
  3053  000B6E  D7FE               	bra	i2u73_47
  3054  000B70  F000               	nop	
  3055  000B72                     
  3056                           ;LCD.c: 166:             LATEbits.LATE2 = 1;
  3057  000B72  848D               	bsf	141,2,c	;volatile
  3058                           
  3059                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  3060  000B74  0E21               	movlw	33
  3061  000B76                     i2u74_47:
  3062  000B76  2EE8               	decfsz	wreg,f,c
  3063  000B78  D7FE               	bra	i2u74_47
  3064  000B7A  F000               	nop	
  3065  000B7C                     
  3066                           ;LCD.c: 168:             LATEbits.LATE2 = 0;
  3067  000B7C  948D               	bcf	141,2,c	;volatile
  3068  000B7E  EFA8  F005         	goto	i2l1512
  3069  000B82                     i2l1526:
  3070                           
  3071                           ;LCD.c: 159:  while(aux == 0x80)
  3072  000B82  0E80               	movlw	128
  3073  000B84  1801               	xorwf	i2LEER_LCD@aux^0,w,c
  3074  000B86  B4D8               	btfsc	status,2,c
  3075  000B88  EFC8  F005         	goto	i2u32_41
  3076  000B8C  EFCA  F005         	goto	i2u32_40
  3077  000B90                     i2u32_41:
  3078  000B90  EFAD  F005         	goto	i2l87
  3079  000B94                     i2u32_40:
  3080  000B94  0012               	return		;funcret
  3081  000B96                     __end_ofi2_LEER_LCD:
  3082                           	callstack 0
  3083                           
  3084 ;; *************** function i2_ENVIA_NIBBLE *****************
  3085 ;; Defined at:
  3086 ;;		line 118 in file "LCD.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  dato            1    wreg     unsigned char 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  dato            1    0[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3100 ;;      Params:         0       0       0       0       0       0       0       0       0
  3101 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3103 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3104 ;;Total ram usage:        1 bytes
  3105 ;; Hardware stack levels used: 1
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		i2_ENVIA_CHAR
  3110 ;;		i2_ENVIA_LCD_CMD
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text27
  3115  000F96                     __ptext27:
  3116                           	callstack 0
  3117  000F96                     i2_ENVIA_NIBBLE:
  3118                           	callstack 22
  3119                           
  3120                           ;incstack = 0
  3121                           ;i2ENVIA_NIBBLE@dato stored from wreg
  3122  000F96  6E01               	movwf	i2ENVIA_NIBBLE@dato^0,c
  3123  000F98                     
  3124                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATB &= 0x
      +                          0F;
  3125  000F98  0E0F               	movlw	15
  3126  000F9A  168A               	andwf	138,f,c	;volatile
  3127                           
  3128                           ;LCD.c: 121:  dato &= 0xF0;
  3129  000F9C  0EF0               	movlw	240
  3130  000F9E  1601               	andwf	i2ENVIA_NIBBLE@dato^0,f,c
  3131                           
  3132                           ;LCD.c: 122:  LATB|= dato;
  3133  000FA0  5001               	movf	i2ENVIA_NIBBLE@dato^0,w,c	;volatile
  3134  000FA2  128A               	iorwf	138,f,c	;volatile
  3135  000FA4                     
  3136                           ;LCD.c: 123:  LATEbits.LATE2 = 1;
  3137  000FA4  848D               	bsf	141,2,c	;volatile
  3138  000FA6                     
  3139                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  3140  000FA6  0E21               	movlw	33
  3141  000FA8                     i2u75_47:
  3142  000FA8  2EE8               	decfsz	wreg,f,c
  3143  000FAA  D7FE               	bra	i2u75_47
  3144  000FAC  F000               	nop	
  3145  000FAE                     
  3146                           ;LCD.c: 125:  LATEbits.LATE2 = 0;
  3147  000FAE  948D               	bcf	141,2,c	;volatile
  3148  000FB0  0012               	return		;funcret
  3149  000FB2                     __end_ofi2_ENVIA_NIBBLE:
  3150                           	callstack 0
  3151                           
  3152                           	psect	rparam
  3153  0000                     
  3154                           	psect	temp
  3155  000026                     btemp:
  3156                           	callstack 0
  3157  000026                     	ds	1
  3158  0000                     int$flags	set	btemp
  3159  0000                     wtemp8	set	btemp+1
  3160  0000                     ttemp5	set	btemp+1
  3161  0000                     ttemp6	set	btemp+4
  3162  0000                     ttemp7	set	btemp+8
  3163                           
  3164                           	psect	idloc
  3165                           
  3166                           ;Config register IDLOC0 @ 0x200000
  3167                           ;	unspecified, using default values
  3168  200000                     	org	2097152
  3169  200000  FF                 	db	255
  3170                           
  3171                           ;Config register IDLOC1 @ 0x200001
  3172                           ;	unspecified, using default values
  3173  200001                     	org	2097153
  3174  200001  FF                 	db	255
  3175                           
  3176                           ;Config register IDLOC2 @ 0x200002
  3177                           ;	unspecified, using default values
  3178  200002                     	org	2097154
  3179  200002  FF                 	db	255
  3180                           
  3181                           ;Config register IDLOC3 @ 0x200003
  3182                           ;	unspecified, using default values
  3183  200003                     	org	2097155
  3184  200003  FF                 	db	255
  3185                           
  3186                           ;Config register IDLOC4 @ 0x200004
  3187                           ;	unspecified, using default values
  3188  200004                     	org	2097156
  3189  200004  FF                 	db	255
  3190                           
  3191                           ;Config register IDLOC5 @ 0x200005
  3192                           ;	unspecified, using default values
  3193  200005                     	org	2097157
  3194  200005  FF                 	db	255
  3195                           
  3196                           ;Config register IDLOC6 @ 0x200006
  3197                           ;	unspecified, using default values
  3198  200006                     	org	2097158
  3199  200006  FF                 	db	255
  3200                           
  3201                           ;Config register IDLOC7 @ 0x200007
  3202                           ;	unspecified, using default values
  3203  200007                     	org	2097159
  3204  200007  FF                 	db	255
  3205                           
  3206                           	psect	config
  3207                           
  3208                           ;Config register CONFIG1L @ 0x300000
  3209                           ;	PLL Selection
  3210                           ;	PLLSEL = PLL4X, 4x clock multiplier
  3211                           ;	PLL Enable Configuration bit
  3212                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  3213                           ;	CPU System Clock Postscaler
  3214                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  3215                           ;	Low Speed USB mode with 48 MHz system clock
  3216                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  3217  300000                     	org	3145728
  3218  300000  00                 	db	0
  3219                           
  3220                           ;Config register CONFIG1H @ 0x300001
  3221                           ;	Oscillator Selection
  3222                           ;	FOSC = INTOSCIO, Internal oscillator
  3223                           ;	Primary Oscillator Shutdown
  3224                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  3225                           ;	Fail-Safe Clock Monitor
  3226                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3227                           ;	Internal/External Oscillator Switchover
  3228                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3229  300001                     	org	3145729
  3230  300001  08                 	db	8
  3231                           
  3232                           ;Config register CONFIG2L @ 0x300002
  3233                           ;	Power-up Timer Enable
  3234                           ;	nPWRTEN = ON, Power up timer enabled
  3235                           ;	Brown-out Reset Enable
  3236                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  3237                           ;	Brown-out Reset Voltage
  3238                           ;	BORV = 190, BOR set to 1.9V nominal
  3239                           ;	Low-Power Brown-out Reset
  3240                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  3241  300002                     	org	3145730
  3242  300002  58                 	db	88
  3243                           
  3244                           ;Config register CONFIG2H @ 0x300003
  3245                           ;	Watchdog Timer Enable bits
  3246                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  3247                           ;	Watchdog Timer Postscaler
  3248                           ;	WDTPS = 32768, 1:32768
  3249  300003                     	org	3145731
  3250  300003  3C                 	db	60
  3251                           
  3252                           ; Padding undefined space
  3253  300004                     	org	3145732
  3254  300004  FF                 	db	255
  3255                           
  3256                           ;Config register CONFIG3H @ 0x300005
  3257                           ;	CCP2 MUX bit
  3258                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  3259                           ;	PORTB A/D Enable bit
  3260                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  3261                           ;	Timer3 Clock Input MUX bit
  3262                           ;	T3CMX = RC0, T3CKI function is on RC0
  3263                           ;	SDO Output MUX bit
  3264                           ;	SDOMX = RB3, SDO function is on RB3
  3265                           ;	Master Clear Reset Pin Enable
  3266                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  3267  300005                     	org	3145733
  3268  300005  D1                 	db	209
  3269                           
  3270                           ;Config register CONFIG4L @ 0x300006
  3271                           ;	Stack Full/Underflow Reset
  3272                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3273                           ;	Single-Supply ICSP Enable bit
  3274                           ;	LVP = OFF, Single-Supply ICSP disabled
  3275                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  3276                           ;	ICPRT = OFF, ICPORT disabled
  3277                           ;	Extended Instruction Set Enable bit
  3278                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  3279                           ;	Background Debugger Enable bit
  3280                           ;	DEBUG = 0x1, unprogrammed default
  3281  300006                     	org	3145734
  3282  300006  81                 	db	129
  3283                           
  3284                           ; Padding undefined space
  3285  300007                     	org	3145735
  3286  300007  FF                 	db	255
  3287                           
  3288                           ;Config register CONFIG5L @ 0x300008
  3289                           ;	Block 0 Code Protect
  3290                           ;	CP0 = OFF, Block 0 is not code-protected
  3291                           ;	Block 1 Code Protect
  3292                           ;	CP1 = OFF, Block 1 is not code-protected
  3293                           ;	Block 2 Code Protect
  3294                           ;	CP2 = OFF, Block 2 is not code-protected
  3295                           ;	Block 3 Code Protect
  3296                           ;	CP3 = OFF, Block 3 is not code-protected
  3297  300008                     	org	3145736
  3298  300008  0F                 	db	15
  3299                           
  3300                           ;Config register CONFIG5H @ 0x300009
  3301                           ;	Boot Block Code Protect
  3302                           ;	CPB = OFF, Boot block is not code-protected
  3303                           ;	Data EEPROM Code Protect
  3304                           ;	CPD = OFF, Data EEPROM is not code-protected
  3305  300009                     	org	3145737
  3306  300009  C0                 	db	192
  3307                           
  3308                           ;Config register CONFIG6L @ 0x30000A
  3309                           ;	Block 0 Write Protect
  3310                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  3311                           ;	Block 1 Write Protect
  3312                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  3313                           ;	Block 2 Write Protect
  3314                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  3315                           ;	Block 3 Write Protect
  3316                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  3317  30000A                     	org	3145738
  3318  30000A  0F                 	db	15
  3319                           
  3320                           ;Config register CONFIG6H @ 0x30000B
  3321                           ;	Configuration Registers Write Protect
  3322                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3323                           ;	Boot Block Write Protect
  3324                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  3325                           ;	Data EEPROM Write Protect
  3326                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3327  30000B                     	org	3145739
  3328  30000B  E0                 	db	224
  3329                           
  3330                           ;Config register CONFIG7L @ 0x30000C
  3331                           ;	Block 0 Table Read Protect
  3332                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  3333                           ;	Block 1 Table Read Protect
  3334                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  3335                           ;	Block 2 Table Read Protect
  3336                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  3337                           ;	Block 3 Table Read Protect
  3338                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  3339  30000C                     	org	3145740
  3340  30000C  0F                 	db	15
  3341                           
  3342                           ;Config register CONFIG7H @ 0x30000D
  3343                           ;	Boot Block Table Read Protect
  3344                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  3345  30000D                     	org	3145741
  3346  30000D  40                 	db	64
  3347                           tosu	equ	0xFFF
  3348                           tosh	equ	0xFFE
  3349                           tosl	equ	0xFFD
  3350                           stkptr	equ	0xFFC
  3351                           pclatu	equ	0xFFB
  3352                           pclath	equ	0xFFA
  3353                           pcl	equ	0xFF9
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           prodh	equ	0xFF4
  3359                           prodl	equ	0xFF3
  3360                           indf0	equ	0xFEF
  3361                           postinc0	equ	0xFEE
  3362                           postdec0	equ	0xFED
  3363                           preinc0	equ	0xFEC
  3364                           plusw0	equ	0xFEB
  3365                           fsr0h	equ	0xFEA
  3366                           fsr0l	equ	0xFE9
  3367                           wreg	equ	0xFE8
  3368                           indf1	equ	0xFE7
  3369                           postinc1	equ	0xFE6
  3370                           postdec1	equ	0xFE5
  3371                           preinc1	equ	0xFE4
  3372                           plusw1	equ	0xFE3
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           bsr	equ	0xFE0
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           preinc2	equ	0xFDC
  3380                           plusw2	equ	0xFDB
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8

Data Sizes:
    Strings     66
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[8]), STR_6(CODE[11]), STR_5(CODE[5]), STR_4(CODE[6]), 
		 -> STR_3(CODE[5]), STR_2(CODE[17]), STR_1(CODE[14]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[8]), STR_6(CODE[11]), STR_5(CODE[5]), STR_4(CODE[6]), 
		 -> STR_3(CODE[5]), STR_2(CODE[17]), STR_1(CODE[14]), 

    ESCRIBE_MENSAJE2@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[8]), STR_6(CODE[11]), STR_5(CODE[5]), STR_4(CODE[6]), 
		 -> STR_3(CODE[5]), STR_2(CODE[17]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _splash_screen->_ESCRIBE_MENSAJE2
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE2->_strlen
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuro->_LCD_INIT
    _LCD_INIT->_CURSOR_ONOFF
    _LCD_INIT->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _ISRs in COMRAM

    _ISRs->i2_ESCRIBE_MENSAJE2
    i2_POS_CURSOR->i2_ENVIA_LCD_CMD
    i2_ESCRIBE_MENSAJE2->i2_strlen
    i2_ENVIA_CHAR->i2_ENVIA_NIBBLE
    i2_ENVIA_CHAR->i2_LEER_LCD
    i2_BORRAR_LCD->i2_ENVIA_LCD_CMD
    i2_ENVIA_LCD_CMD->i2_ENVIA_NIBBLE
    i2_ENVIA_LCD_CMD->i2_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISRs in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISRs in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISRs in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRs in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRs in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRs in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRs in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRs in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5320
                                             30 COMRAM     2     2      0
                         _BORRAR_LCD
                         _ENVIA_CHAR
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
                          _configuro
                          _convierte
                      _splash_screen
                    _tomamuestra_ADC
 ---------------------------------------------------------------------------------
 (1) _tomamuestra_ADC                                      5     3      2      22
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _splash_screen                                        0     0      0    1492
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (2) _POS_CURSOR                                           2     1      1     612
                                             19 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ESCRIBE_MENSAJE2                                     6     4      2     880
                                             20 COMRAM     6     4      2
                         _ENVIA_CHAR
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     166
                                             16 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ENVIA_CHAR                                           2     2      0     120
                                             17 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1549
                                             28 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                    _tomamuestra_ADC (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                             16 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                             21 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0     525
                           _LCD_INIT
 ---------------------------------------------------------------------------------
 (2) _LCD_INIT                                             1     1      0     525
                                             20 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                             19 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                             19 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                             17 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISRs                                                 6     6      0     971
                                             10 COMRAM     6     6      0
                       i2_BORRAR_LCD
                 i2_ESCRIBE_MENSAJE2
                       i2_POS_CURSOR
 ---------------------------------------------------------------------------------
 (7) i2_POS_CURSOR                                         2     1      1     323
                                              3 COMRAM     2     1      1
                    i2_ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (7) i2_ESCRIBE_MENSAJE2                                   6     4      2     465
                                              4 COMRAM     6     4      2
                       i2_ENVIA_CHAR
                           i2_strlen
 ---------------------------------------------------------------------------------
 (8) i2_strlen                                             4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_ENVIA_CHAR                                         2     2      0     183
                                              1 COMRAM     2     2      0
                     i2_ENVIA_NIBBLE
                         i2_LEER_LCD
 ---------------------------------------------------------------------------------
 (7) i2_BORRAR_LCD                                         0     0      0     183
                    i2_ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (8) i2_ENVIA_LCD_CMD                                      2     2      0     183
                                              1 COMRAM     2     2      0
                     i2_ENVIA_NIBBLE
                         i2_LEER_LCD
 ---------------------------------------------------------------------------------
 (9) i2_LEER_LCD                                           1     1      0      70
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_ENVIA_NIBBLE                                       1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE2
     _ENVIA_CHAR
     _strlen
   _POS_CURSOR
     _ENVIA_LCD_CMD
   _configuro
     _LCD_INIT
       _BORRAR_LCD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _tomamuestra_ADC (ARG)
   _splash_screen
     _ESCRIBE_MENSAJE2
     _POS_CURSOR
   _tomamuestra_ADC

 _ISRs (ROOT)
   i2_BORRAR_LCD
     i2_ENVIA_LCD_CMD
       i2_ENVIA_NIBBLE
       i2_LEER_LCD
   i2_ESCRIBE_MENSAJE2
     i2_ENVIA_CHAR
       i2_ENVIA_NIBBLE
       i2_LEER_LCD
     i2_strlen
   i2_POS_CURSOR
     i2_ENVIA_LCD_CMD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      35        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      25       1       39.4%
BITBIGSFRhhlhll     23      0       0      25        0.0%
BITBIGSFRlllhh      21      0       0      31        0.0%
BITBIGSFRhhhl       1C      0       0      21        0.0%
BITBIGSFRhhlhhh      E      0       0      22        0.0%
BITBIGSFRhhhh        D      0       0      20        0.0%
BITBIGSFRllll        8      0       0      33        0.0%
BITBIGSFRllhh        4      0       0      29        0.0%
BITBIGSFRhl          4      0       0      27        0.0%
BITBIGSFRllhl        3      0       0      30        0.0%
BITBIGSFRlh          2      0       0      28        0.0%
BITBIGSFRhhlhlh      1      0       0      23        0.0%
BITBIGSFRhhlhlh      1      0       0      24        0.0%
BITBIGSFRlllhl       1      0       0      32        0.0%
BITBIGSFRhhll        1      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25      34        0.0%
DATA                 0      0      25       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Jun 09 17:55:10 2023

                        l26 0D6C                          l39 0FD0                          l71 0E4E  
                        l80 0F94                          l56 0F4A                          l74 0FD8  
                        l83 0E82                          l68 0CE8                          l77 0C9E  
                        l87 0AE8                          l89 0B22                          l97 0F1A  
                        u10 0B22                          u11 0B1E                          u20 0F2E  
                        u21 0F2A                          u30 0F44                          u31 0F40  
             _splash_screen 0F4C               ENVIA_CHAR@aux 0013                         l171 0F78  
                       l174 09B8                         l183 0A1C                         l168 0C4C  
                       l186 0A3C                         l179 0A1A                         l721 0AB0  
                       l714 0AA8                         l731 0BF8                         l724 0BF0  
                       l900 0DA6                         l910 0ABC                         l902 0AB2  
                       l920 0AD4                         l912 0AC4                         l904 0AB6  
                       l930 0AF6                         l922 0ADC                         l914 0AC8  
                       l906 0AB8                         l940 0F7C                         l932 0B00  
                       l924 0ADE                         l916 0ACA                         l908 0ABA  
                       l942 0F88                         l934 0B0A                         l926 0AEA  
                       l918 0AD2                         l950 0E54                         l944 0F8A  
                       l928 0AF2                         l960 0E68                         l952 0E58  
                       l946 0F92                         l938 0B10                         l962 0E6A  
                       l954 0E5C                         l970 0FCA                         l964 0E70  
                       l956 0E64                         l948 0E52                         l972 0F1E  
                       l980 0E1E                         l966 0E76                         l958 0E66  
                       l974 0F2E                         l990 0E32                         l982 0E20  
                       l968 0E7C                         l976 0F34                         l992 0E34  
                       l984 0E24                         l978 0F44                         l994 0E36  
                       l986 0E28                         l996 0E3C                         l988 0E30  
                       l998 0E42                         u310 0D9A                         u311 0D96  
                       u400 0BC6                         u401 0BC2                         u410 0BDC  
                       u330 0D46                         u411 0BD8                         u331 0D42  
                       u340 0D64                         u341 0D60                         u350 0CE8  
                       u430 0A2A                         _PR2 000FBB                         u351 0CE4  
                       u431 0A26                         u360 0A58                         u361 0A54  
                       u370 0A76                         u371 0A72                         u380 0A92  
                       u381 0A8E                         u390 0BA8                         u607 0ACC  
                       u391 0BA4                         u527 0856                         u617 0AD6  
                       u537 0E2A                         u627 0AEC                         u547 0EF2  
                       u637 0AFA                         u557 0F04                         u647 0B04  
                       u567 0C5E                         u657 0F8C                         u577 0C6E  
                       u587 0E5E                         u597 0ABE                 LEER_LCD@aux 0011  
                       wreg 000FE8            ??i2_ENVIA_NIBBLE 0001                ?_CURSOR_HOME 0001  
            ??_ENVIA_NIBBLE 0011              ENVIA_CHAR@dato 0012                        l1000 0E48  
                      l1012 0FD2                        l1020 0C66                        l1030 0C8C  
                      l1022 0C74                        l1014 0C4E                        l1102 0EEC  
                      l1032 0C92                        l1024 0C7A                        l1016 0C52  
                      l1104 0EFA                        l1200 0BFA                        l1034 0C98  
                      l1026 0C80                        l1018 0C58                        l1106 0EFE  
                      l1210 0C1C                        l1202 0C10                        l1028 0C86  
                      l1220 0C26                        l1212 0C1E                        l1204 0C12  
                      l1222 0C34                        l1214 0C20                        l1206 0C14  
                      l1224 0C36                        l1216 0C22                        l1208 0C1A  
                      l1226 0C48                        l1218 0C24                        l1530 0D46  
                      l1540 0CB0                        l1532 0D52                        l1700 0866  
                      l1550 0A46                        l1542 0CB8                        l1534 0D64  
                      l1710 089E                        l1702 0870                        l1560 0A7C  
                      l1552 0A58                        l1472 0D6E                        l1544 0CD4  
                      l1536 0CA0                        l1528 0D36                        l1640 0F4C  
                      l1720 08D2                        l1712 08A6                        l1704 087C  
                      l1562 0A92                        l1554 0A60                        l1570 0B96  
                      l1474 0D7A                        l1546 0CD6                        l1538 0CB0  
                      l1642 0F56                        l1650 09C0                        l1730 0908  
                      l1722 08DA                        l1714 08AE                        l1706 088E  
                      l1564 0A9A                        l1556 0A68                        l1548 0A3E  
                      l1580 0BDC                        l1572 0BA8                        l1476 0D7E  
                      l1644 0F62                        l1652 09C8                        l1660 09E0  
                      l1732 0910                        l1724 08E0                        l1716 08BA  
                      l1708 0896                        l1566 0A9C                        l1558 0A76  
                      l1582 0BE4                        l1574 0BB0                        l1646 0930  
                      l1478 0D9A                        l1662 0A2A                        l1654 09D0  
                      l1734 0918                        l1726 08EA                        l1718 08CA  
                      l1568 0AA2                        l1584 0BEA                        l1576 0BB8  
                      l1656 09D8                        l1648 09BC                        l1736 0920  
                      l1728 08F6                        l1578 0BC6                        l1836 09F4  
                      l1692 0844                        l1694 0848                        l1696 084C  
                      l1698 0862                        STR_1 0812                        STR_2 0801  
                      STR_3 0839                        STR_4 0833                        STR_5 083E  
                      STR_6 0820                        STR_7 082B                        _LATB 000F8A  
                      i2l26 0DE0                        i2l71 0EB6                        i2l80 0FB0  
                      i2l74 0FE0                        i2l83 0EEA                        i2l68 0D32  
                      i2l87 0B5A                        i2l89 0B94                        _ISRs 0008  
                      _WPUB 000F85                 ?i2_LEER_LCD 0001                        _main 0844  
                      btemp 0026           ??i2_ENVIA_LCD_CMD 0002                        prodh 000FF4  
                      prodl 000FF3                        start 01AA               ?_CURSOR_ONOFF 0001  
         ??_tomamuestra_ADC 0013                ___param_bank 000000             ??_ENVIA_LCD_CMD 0012  
          __end_of_LCD_INIT 0F1C            __end_of_LEER_LCD 0B24              ?_splash_screen 0001  
                     ?_ISRs 0001                       ?_main 0001                       _T2CON 000FBA  
           __end_of___lwdiv 0AB2             __end_of___lwmod 0BFA                       i2l202 00D8  
                     i2l203 0078                       i2l220 0196                       i2l199 004A  
                     i2l900 0E1A                       _PORTB 000F81                       _TRISB 000F93  
                     _TRISE 000F96                       _nivel 0021                 ?_POS_CURSOR 0014  
                     tablat 000FF5                       ttemp5 0027                       ttemp6 002A  
                     ttemp7 002E                       status 000FD8                       wtemp8 0027  
            ??_CURSOR_ONOFF 0014            __end_ofi2_strlen 0E1C                __end_of_ISRs 01AA  
           __initialization 0FB2                __end_of_main 0930    i2ESCRIBE_MENSAJE2@cadena 0005  
                    ??_ISRs 000B                      ??_main 001F               __activetblptr 000002  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
             ?i2_BORRAR_LCD 0001                      _ADRESH 000FC4                      _ADRESL 000FC3  
                    _CCPR1L 000FBE                      _ANSELB 000F5C                      _ANSELE 000F5F  
                    i2l1500 0B36                      i2l1510 0B4E                      i2l1502 0B3A  
                    i2l1520 0B72                      i2l1512 0B50                      i2l1504 0B3C  
                    i2l1600 0E9E                      i2l1522 0B7C                      i2l1514 0B5C  
                    i2l1506 0B44                      i2l1610 0EBC                      i2l1602 0EA4  
                    i2l1516 0B64                      i2l1508 0B46                      i2l1620 0ED0  
                    i2l1612 0EC0                      i2l1604 0EAA                      i2l1518 0B68  
                    i2l1526 0B82                      i2l1622 0ED2                      i2l1614 0EC4  
                    i2l1606 0EB0                      i2l1630 0DE2                      i2l1624 0ED8  
                    i2l1616 0ECC                      i2l1608 0EBA                      i2l1632 0DEE  
                    i2l1482 0F98                      i2l1490 0B24                      i2l1626 0EDE  
                    i2l1618 0ECE                      i2l1634 0DF2                      i2l1484 0FA4  
                    i2l1492 0B28                      i2l1628 0EE4                      i2l1636 0E0E  
                    i2l1740 0028                      i2l1486 0FA6                      i2l1494 0B2A  
                    i2l1590 0E8C                      i2l1670 0DAA                      i2l1750 005A  
                    i2l1742 002A                      i2l1488 0FAE                      i2l1496 0B2C  
                    i2l1592 0E90                      i2l1680 0CFA                      i2l1672 0DBA  
                    i2l1760 0096                      i2l1752 006A                      i2l1744 003C  
                    i2l1498 0B2E                      i2l1690 0FDA                      i2l1594 0E98  
                    i2l1586 0E86                      i2l1682 0CFA                      i2l1674 0DC6  
                    i2l1770 00E4                      i2l1762 00A2                      i2l1754 0072  
                    i2l1746 0044                      i2l1738 001A                      i2l1596 0E9A  
                    i2l1588 0E88                      i2l1684 0D02                      i2l1676 0DD8  
                    i2l1780 010C                      i2l1772 00EC                      i2l1764 00B8  
                    i2l1756 0086                      i2l1748 0058                      i2l1598 0E9C  
                    i2l1686 0D1E                      i2l1678 0CEA                      i2l1838 0140  
                    i2l1782 0114                      i2l1774 00F4                      i2l1766 00D0  
                    i2l1758 0088                      i2l1790 012C                      i2l1688 0D20  
                    i2l1784 011C                      i2l1776 00FC                      i2l1768 00DC  
                    i2l1786 0124                      i2l1778 0104                      _OSCCON 000FD3  
       i2ESCRIBE_MENSAJE2@i 000A               ?i2_ENVIA_CHAR 0001             ??_splash_screen 001B  
                    _decena 0023        __end_of_ENVIA_NIBBLE 0F96                   ??___lwdiv 001A  
                 ??___lwmod 0015                      _millar 0025                      isa$std 000001  
                    _unidad 0022                      _strlen 0D6E                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
            ??i2_BORRAR_LCD 0004                ??_BORRAR_LCD 0014                   ?_LCD_INIT 0001  
                 ?_LEER_LCD 0001                  __accesstop 0060     __end_of__initialization 0FBC  
              ??_LCD_CONFIG 0014              ??i2_ENVIA_CHAR 0002               ___rparam_used 000001  
              ??_ENVIA_CHAR 0012              __pcstackCOMRAM 0001          __end_of_BORRAR_LCD 0FDA  
       i2ENVIA_LCD_CMD@dato 0002            _ESCRIBE_MENSAJE2 0CA0            ENVIA_LCD_CMD@aux 0013  
      __end_of_CURSOR_ONOFF 0F4C          __end_of_LCD_CONFIG 0CA0          __end_of_ENVIA_CHAR 0E50  
           i2_ENVIA_LCD_CMD 0EB8                   ?i2_strlen 0001               ?i2_POS_CURSOR 0004  
           _tomamuestra_ADC 09BA                  ??_LCD_INIT 0015                ??i2_LEER_LCD 0001  
                ??_LEER_LCD 0011            ENVIA_NIBBLE@dato 0011                     _CCP1CON 000FBD  
__end_ofi2_ESCRIBE_MENSAJE2 0D34                     ?_strlen 0011          __end_ofi2_LEER_LCD 0B96  
                   i2u32_40 0B94                     i2u32_41 0B90                     i2u42_40 0E0E  
                   i2u50_40 006A                     i2u42_41 0E0A                     i2u50_41 0066  
                   i2u51_40 0086                     i2u51_41 0082                     i2u44_40 0DBA  
                   i2u44_41 0DB6                     i2u45_40 0DD8                     i2u45_41 0DD4  
                   i2u46_40 0D32                     i2u46_41 0D2E                     i2u70_47 0B3E  
                   i2u47_40 0028                     i2u47_41 0024                     i2u71_47 0B48  
                   i2u48_40 003C                     i2u48_41 0038                     i2u72_47 0B5E  
                   i2u49_40 0058                     i2u49_41 0054                     i2u73_47 0B6C  
                   i2u74_47 0B76                     i2u66_47 00C2                     i2u75_47 0FA8  
                   i2u67_47 0E92                     i2u68_47 0EC6                     i2u69_47 0B30  
                ??i2_strlen 0003              ??i2_POS_CURSOR 0005                ??_POS_CURSOR 0015  
                   __Hparam 0000                     __Lparam 0000        tomamuestra_ADC@canal 0015  
         __end_of_configuro 0C4E        __end_ofi2_BORRAR_LCD 0FE2                     ___lwdiv 0A3E  
                   ___lwmod 0B96                __psmallconst 0800       __end_of_ENVIA_LCD_CMD 0E84  
         __end_of_convierte 09BA                     __pcinit 0FB2          __end_of_POS_CURSOR 0D6E  
                   __ramtop 0800                     _centena 0024                     __ptext0 0844  
                   __ptext1 09BA                     __ptext2 0F4C                     __ptext3 0D34  
                   __ptext4 0CA0                     __ptext5 0D6E                     __ptext6 0E1C  
                   __ptext7 0930                     __ptext8 0B96                     __ptext9 0A3E  
   __end_ofi2_ENVIA_LCD_CMD 0EEC        __end_ofi2_ENVIA_CHAR 0EB8     __end_of_tomamuestra_ADC 0A3E  
           i2ENVIA_CHAR@aux 0003                _ENVIA_NIBBLE 0F7A        end_of_initialization 0FBC  
             __Lmediumconst 0000                     strlen@a 0013                     strlen@s 0011  
         ESCRIBE_MENSAJE2@i 001A                   _TRISAbits 000F92                   _TRISCbits 000F94  
  __end_of_ESCRIBE_MENSAJE2 0CEA                _CURSOR_ONOFF 0F1C          CURSOR_ONOFF@estado 0014  
      __end_ofi2_POS_CURSOR 0DE2       __end_of_splash_screen 0F7A            ?i2_ENVIA_LCD_CMD 0001  
            __end_of_strlen 0DA8               ??_CURSOR_HOME 0014            ?_tomamuestra_ADC 0011  
       start_initialization 0FB2                   i2strlen@a 0003                   i2strlen@s 0001  
         ENVIA_LCD_CMD@dato 0012            i2POS_CURSOR@fila 0005                    ??_strlen 0013  
               __pbssCOMRAM 0021               i2LEER_LCD@aux 0001                i2_BORRAR_LCD 0FDA  
        i2_ESCRIBE_MENSAJE2 0CEA          i2ENVIA_LCD_CMD@aux 0003         __end_of_CURSOR_HOME 0FD2  
            i2_ENVIA_NIBBLE 0F96         ?i2_ESCRIBE_MENSAJE2 0005                i2_ENVIA_CHAR 0E84  
          ___lwdiv@dividend 0016          i2ENVIA_NIBBLE@dato 0001                   __pintcode 0008  
                  ?___lwdiv 0016                    ?___lwmod 0011                   _configuro 0BFA  
      ??i2_ESCRIBE_MENSAJE2 0007                 __smallconst 0800                   _convierte 0930  
           convierte@numero 001D         i2POS_CURSOR@columna 0004            ___lwdiv@quotient 001A  
    __end_ofi2_ENVIA_NIBBLE 0FB2                    _LCD_INIT 0EEC                    _LEER_LCD 0AB2  
                  _LATEbits 000F8D              POS_CURSOR@fila 0015                  ?_configuro 0001  
                _ADCON0bits 000FC2      ESCRIBE_MENSAJE2@cadena 0015                  ?_convierte 001D  
               _CURSOR_HOME 0FCA       i2ESCRIBE_MENSAJE2@tam 0009                    i2_strlen 0DE2  
               _INTCON2bits 000FF1                 _INTCON3bits 000FF0                i2_POS_CURSOR 0DA8  
           ?i2_ENVIA_NIBBLE 0001                    __Hrparam 0000           ?_ESCRIBE_MENSAJE2 0015  
                  __Lrparam 0000          ??_ESCRIBE_MENSAJE2 0017                  _ANSELAbits 000F5B  
                _ANSELCbits 000F5D             ___lwdiv@divisor 0018             ___lwdiv@counter 001C  
                  __ptext10 0BFA                    __ptext11 0EEC                    __ptext20 0DA8  
                  __ptext12 0C4E                    __ptext21 0CEA                    __ptext13 0F1C  
                  __ptext22 0DE2                    __ptext14 0FCA                    __ptext23 0E84  
                  __ptext15 0FD2                    __ptext24 0FDA                    __ptext16 0E50  
                  __ptext25 0EB8                    __ptext17 0AB2                    __ptext26 0B24  
                  __ptext18 0F7A                    __ptext27 0F96                  _BORRAR_LCD 0FD2  
                _LCD_CONFIG 0C4E                  _ENVIA_CHAR 0E1C                    isa$xinst 000000  
                  int$flags 0026            i2ENVIA_CHAR@dato 0002               _ENVIA_LCD_CMD 0E50  
               ??_configuro 0016                 ??_convierte 001F                  _INTCONbits 000FF2  
                  intlevel2 0000                  i2_LEER_LCD 0B24            ___lwmod@dividend 0011  
            ?_ENVIA_LCD_CMD 0001             ___lwmod@divisor 0013             ___lwmod@counter 0015  
       ESCRIBE_MENSAJE2@tam 0019                 ?_BORRAR_LCD 0001               ?_ENVIA_NIBBLE 0001  
                _POS_CURSOR 0D34                 ?_LCD_CONFIG 0001                 ?_ENVIA_CHAR 0001  
         POS_CURSOR@columna 0014  
