

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Jun 07 21:07:58 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.35
    37                           ; Generated 05/05/2021 GMT
    38                           ; 
    39                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F45K50 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     _ADRESL	set	4035
    72  0000                     _ADRESH	set	4036
    73  0000                     _ADCON0	set	4034
    74  0000                     _ADCON1	set	4033
    75  0000                     _ADCON0bits	set	4034
    76  0000                     _LATD	set	3980
    77  0000                     _ANSELAbits	set	3931
    78  0000                     _ANSELD	set	3934
    79  0000                     _PORTD	set	3971
    80  0000                     _LATDbits	set	3980
    81  0000                     _TRISAbits	set	3986
    82  0000                     _TRISD	set	3989
    83  0000                     _ADCON2	set	4032
    84  0000                     _RCONbits	set	4048
    85  0000                     _OSCCON	set	4051
    86  0000                     _WPUBbits	set	3973
    87  0000                     _INTCON3bits	set	4080
    88  0000                     _INTCON2bits	set	4081
    89  0000                     _TRISBbits	set	3987
    90  0000                     _ANSELBbits	set	3932
    91  0000                     _INTCONbits	set	4082
    92                           
    93                           	psect	smallconst
    94  000800                     __psmallconst:
    95                           	callstack 0
    96  000800  00                 	db	0
    97  000801                     STR_1:
    98  000801  4C                 	db	76	;'L'
    99  000802  61                 	db	97	;'a'
   100  000803  62                 	db	98	;'b'
   101  000804  6F                 	db	111	;'o'
   102  000805  72                 	db	114	;'r'
   103  000806  61                 	db	97	;'a'
   104  000807  74                 	db	116	;'t'
   105  000808  6F                 	db	111	;'o'
   106  000809  72                 	db	114	;'r'
   107  00080A  69                 	db	105	;'i'
   108  00080B  6F                 	db	111	;'o'
   109  00080C  20                 	db	32
   110  00080D  33                 	db	51	;'3'
   111  00080E  00                 	db	0
   112  00080F                     STR_2:
   113  00080F  79                 	db	121	;'y'
   114  000810  61                 	db	97	;'a'
   115  000811  20                 	db	32
   116  000812  6A                 	db	106	;'j'
   117  000813  61                 	db	97	;'a'
   118  000814  6C                 	db	108	;'l'
   119  000815  65                 	db	101	;'e'
   120  000816  00                 	db	0
   121  000817                     STR_5:
   122  000817  20                 	db	32
   123  000818  20                 	db	32
   124  000819  20                 	db	32
   125  00081A  38                 	db	56	;'8'
   126  00081B  62                 	db	98	;'b'
   127  00081C  69                 	db	105	;'i'
   128  00081D  74                 	db	116	;'t'
   129  00081E  00                 	db	0
   130  00081F                     STR_4:
   131  00081F  20                 	db	32
   132  000820  31                 	db	49	;'1'
   133  000821  30                 	db	48	;'0'
   134  000822  62                 	db	98	;'b'
   135  000823  69                 	db	105	;'i'
   136  000824  74                 	db	116	;'t'
   137  000825  00                 	db	0
   138  000826                     STR_3:
   139  000826  43                 	db	67	;'C'
   140  000827  48                 	db	72	;'H'
   141  000828  30                 	db	48	;'0'
   142  000829  3A                 	db	58	;':'
   143  00082A  00                 	db	0
   144  00082B                     STR_6:
   145  00082B  43                 	db	67	;'C'
   146  00082C  48                 	db	72	;'H'
   147  00082D  31                 	db	49	;'1'
   148  00082E  3A                 	db	58	;':'
   149  00082F  00                 	db	0
   150  000830  00                 	db	0	; dummy byte at the end
   151  0000                     
   152                           ; #config settings
   153                           
   154                           	psect	cinit
   155  000E80                     __pcinit:
   156                           	callstack 0
   157  000E80                     start_initialization:
   158                           	callstack 0
   159  000E80                     __initialization:
   160                           	callstack 0
   161                           
   162                           ; Clear objects allocated to COMRAM (8 bytes)
   163  000E80  EE00  F014         	lfsr	0,__pbssCOMRAM
   164  000E84  0E08               	movlw	8
   165  000E86                     clear_0:
   166  000E86  6AEE               	clrf	postinc0,c
   167  000E88  06E8               	decf	wreg,f,c
   168  000E8A  E1FD               	bnz	clear_0
   169  000E8C                     end_of_initialization:
   170                           	callstack 0
   171  000E8C                     __end_of__initialization:
   172                           	callstack 0
   173  000E8C  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   174  000E8E  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   175  000E90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   176  000E92  6EF8               	movwf	tblptru,c
   177  000E94  0100               	movlb	0
   178  000E96  EF19  F004         	goto	_main	;jump to C main() function
   179                           
   180                           	psect	bssCOMRAM
   181  000014                     __pbssCOMRAM:
   182                           	callstack 0
   183  000014                     _resultado_ADC:
   184                           	callstack 0
   185  000014                     	ds	2
   186  000016                     _modo_CH1:
   187                           	callstack 0
   188  000016                     	ds	1
   189  000017                     _modo_CH0:
   190                           	callstack 0
   191  000017                     	ds	1
   192  000018                     _unidades:
   193                           	callstack 0
   194  000018                     	ds	1
   195  000019                     _decenas:
   196                           	callstack 0
   197  000019                     	ds	1
   198  00001A                     _centenas:
   199                           	callstack 0
   200  00001A                     	ds	1
   201  00001B                     _millar:
   202                           	callstack 0
   203  00001B                     	ds	1
   204                           
   205                           	psect	cstackCOMRAM
   206  000001                     __pcstackCOMRAM:
   207                           	callstack 0
   208  000001                     ??_INT1_ISR:
   209                           
   210                           ; 1 bytes @ 0x0
   211  000001                     	ds	3
   212  000004                     ??_tomamuestra_ADC:
   213  000004                     ?_strlen:
   214                           	callstack 0
   215  000004                     ?___lwmod:
   216                           	callstack 0
   217  000004                     ENVIA_NIBBLE@dato:
   218                           	callstack 0
   219  000004                     LEER_LCD@aux:
   220                           	callstack 0
   221  000004                     ___lwmod@dividend:
   222                           	callstack 0
   223  000004                     strlen@s:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x3
   227  000004                     	ds	1
   228  000005                     ENVIA_CHAR@dato:
   229                           	callstack 0
   230  000005                     ENVIA_LCD_CMD@dato:
   231                           	callstack 0
   232                           
   233                           ; 1 bytes @ 0x4
   234  000005                     	ds	1
   235  000006                     ENVIA_CHAR@aux:
   236                           	callstack 0
   237  000006                     ENVIA_LCD_CMD@aux:
   238                           	callstack 0
   239  000006                     tomamuestra_ADC@canal:
   240                           	callstack 0
   241  000006                     ___lwmod@divisor:
   242                           	callstack 0
   243  000006                     strlen@a:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0x5
   247  000006                     	ds	1
   248  000007                     ??_LCD_CONFIG:
   249  000007                     POS_CURSOR@columna:
   250                           	callstack 0
   251  000007                     CURSOR_ONOFF@estado:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0x6
   255  000007                     	ds	1
   256  000008                     ??_LCD_INIT:
   257  000008                     POS_CURSOR@fila:
   258                           	callstack 0
   259  000008                     ___lwmod@counter:
   260                           	callstack 0
   261  000008                     ESCRIBE_MENSAJE2@cadena:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x7
   265  000008                     	ds	1
   266  000009                     ?___lwdiv:
   267                           	callstack 0
   268  000009                     ___lwdiv@dividend:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x8
   272  000009                     	ds	1
   273  00000A                     ??_ESCRIBE_MENSAJE2:
   274                           
   275                           ; 1 bytes @ 0x9
   276  00000A                     	ds	1
   277  00000B                     ___lwdiv@divisor:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0xA
   281  00000B                     	ds	1
   282  00000C                     ESCRIBE_MENSAJE2@tam:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0xB
   286  00000C                     	ds	1
   287  00000D                     ESCRIBE_MENSAJE2@i:
   288                           	callstack 0
   289  00000D                     ___lwdiv@quotient:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0xC
   293  00000D                     	ds	2
   294  00000F                     ___lwdiv@counter:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0xE
   298  00000F                     	ds	1
   299  000010                     convierte@numero:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0xF
   303  000010                     	ds	2
   304  000012                     ??_main:
   305                           
   306                           ; 1 bytes @ 0x11
   307  000012                     	ds	2
   308                           
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 63 in file "maincode.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : 0/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   328 ;;      Params:         0       0       0       0       0       0       0       0       0
   329 ;;      Locals:         0       0       0       0       0       0       0       0       0
   330 ;;      Temps:          2       0       0       0       0       0       0       0       0
   331 ;;      Totals:         2       0       0       0       0       0       0       0       0
   332 ;;Total ram usage:        2 bytes
   333 ;; Hardware stack levels required when called: 7
   334 ;; This function calls:
   335 ;;		_BORRAR_LCD
   336 ;;		_ENVIA_CHAR
   337 ;;		_ESCRIBE_MENSAJE2
   338 ;;		_POS_CURSOR
   339 ;;		_configuro
   340 ;;		_convierte
   341 ;;		_tomamuestra_ADC
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348  000832                     __ptext0:
   349                           	callstack 0
   350  000832                     _main:
   351                           	callstack 24
   352  000832                     
   353                           ;maincode.c: 64:     configuro();
   354  000832  EC60  F006         	call	_configuro	;wreg free
   355                           
   356                           ;maincode.c: 65:     POS_CURSOR(1,0);
   357  000836  0E00               	movlw	0
   358  000838  6E07               	movwf	POS_CURSOR@columna^0,c
   359  00083A  0E01               	movlw	1
   360  00083C  EC83  F006         	call	_POS_CURSOR
   361  000840                     
   362                           ;maincode.c: 66:     ESCRIBE_MENSAJE2("Laboratorio 3");
   363  000840  0E01               	movlw	low STR_1
   364  000842  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   365  000844  0E08               	movlw	high STR_1
   366  000846  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   367  000848  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   368  00084C                     
   369                           ;maincode.c: 67:     POS_CURSOR(2,0);
   370  00084C  0E00               	movlw	0
   371  00084E  6E07               	movwf	POS_CURSOR@columna^0,c
   372  000850  0E02               	movlw	2
   373  000852  EC83  F006         	call	_POS_CURSOR
   374                           
   375                           ;maincode.c: 68:     ESCRIBE_MENSAJE2("ya jale");
   376  000856  0E0F               	movlw	low STR_2
   377  000858  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   378  00085A  0E08               	movlw	high STR_2
   379  00085C  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   380  00085E  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   381  000862                     
   382                           ;maincode.c: 69:     _delay((unsigned long)((3000)*(4000000UL/4000.0)));
   383  000862  0E10               	movlw	16
   384  000864  6E13               	movwf	(??_main+1)^0,c
   385  000866  0E39               	movlw	57
   386  000868  6E12               	movwf	??_main^0,c
   387  00086A  0E0E               	movlw	14
   388  00086C                     u377:
   389  00086C  2EE8               	decfsz	wreg,f,c
   390  00086E  D7FE               	bra	u377
   391  000870  2E12               	decfsz	??_main^0,f,c
   392  000872  D7FC               	bra	u377
   393  000874  2E13               	decfsz	(??_main+1)^0,f,c
   394  000876  D7FA               	bra	u377
   395  000878                     
   396                           ;maincode.c: 70:     BORRAR_LCD();
   397  000878  EC51  F007         	call	_BORRAR_LCD	;wreg free
   398  00087C                     l1354:
   399                           
   400                           ;maincode.c: 72:         POS_CURSOR(1,0);
   401  00087C  0E00               	movlw	0
   402  00087E  6E07               	movwf	POS_CURSOR@columna^0,c
   403  000880  0E01               	movlw	1
   404  000882  EC83  F006         	call	_POS_CURSOR
   405  000886                     
   406                           ;maincode.c: 73:         ESCRIBE_MENSAJE2("CH0:");
   407  000886  0E26               	movlw	low STR_3
   408  000888  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   409  00088A  0E08               	movlw	high STR_3
   410  00088C  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   411  00088E  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   412  000892                     
   413                           ;maincode.c: 74:         tomamuestra_ADC(0);
   414  000892  0E00               	movlw	0
   415  000894  EC33  F005         	call	_tomamuestra_ADC
   416  000898                     
   417                           ;maincode.c: 75:         if(modo_CH0 == 0){
   418  000898  5017               	movf	_modo_CH0^0,w,c
   419  00089A  A4D8               	btfss	status,2,c
   420  00089C  EF52  F004         	goto	u351
   421  0008A0  EF54  F004         	goto	u350
   422  0008A4                     u351:
   423  0008A4  EF72  F004         	goto	l1366
   424  0008A8                     u350:
   425  0008A8                     
   426                           ;maincode.c: 76:             convierte(resultado_ADC);
   427  0008A8  C014  F010         	movff	_resultado_ADC,convierte@numero
   428  0008AC  C015  F011         	movff	_resultado_ADC+1,convierte@numero+1
   429  0008B0  ECEE  F004         	call	_convierte	;wreg free
   430                           
   431                           ;maincode.c: 77:             ENVIA_CHAR(millar+0x30);
   432  0008B4  501B               	movf	_millar^0,w,c
   433  0008B6  0F30               	addlw	48
   434  0008B8  ECD7  F006         	call	_ENVIA_CHAR
   435                           
   436                           ;maincode.c: 78:             ENVIA_CHAR(centenas+0x30);
   437  0008BC  501A               	movf	_centenas^0,w,c
   438  0008BE  0F30               	addlw	48
   439  0008C0  ECD7  F006         	call	_ENVIA_CHAR
   440                           
   441                           ;maincode.c: 79:             ENVIA_CHAR(decenas+0x30);
   442  0008C4  5019               	movf	_decenas^0,w,c
   443  0008C6  0F30               	addlw	48
   444  0008C8  ECD7  F006         	call	_ENVIA_CHAR
   445                           
   446                           ;maincode.c: 80:             ENVIA_CHAR(unidades+0x30);
   447  0008CC  5018               	movf	_unidades^0,w,c
   448  0008CE  0F30               	addlw	48
   449  0008D0  ECD7  F006         	call	_ENVIA_CHAR
   450  0008D4                     
   451                           ;maincode.c: 81:             ESCRIBE_MENSAJE2(" 10bit");
   452  0008D4  0E1F               	movlw	low STR_4
   453  0008D6  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   454  0008D8  0E08               	movlw	high STR_4
   455  0008DA  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   456  0008DC  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   457                           
   458                           ;maincode.c: 82:         }
   459  0008E0  EF94  F004         	goto	l1370
   460  0008E4                     l1366:
   461                           
   462                           ;maincode.c: 84:             convierte(resultado_ADC>>2);
   463  0008E4  C014  F012         	movff	_resultado_ADC,??_main
   464  0008E8  C015  F013         	movff	_resultado_ADC+1,??_main+1
   465  0008EC  90D8               	bcf	status,0,c
   466  0008EE  3213               	rrcf	(??_main+1)^0,f,c
   467  0008F0  3212               	rrcf	??_main^0,f,c
   468  0008F2  90D8               	bcf	status,0,c
   469  0008F4  3213               	rrcf	(??_main+1)^0,f,c
   470  0008F6  3212               	rrcf	??_main^0,f,c
   471  0008F8  C012  F010         	movff	??_main,convierte@numero
   472  0008FC  C013  F011         	movff	??_main+1,convierte@numero+1
   473  000900  ECEE  F004         	call	_convierte	;wreg free
   474                           
   475                           ;maincode.c: 85:             ENVIA_CHAR(centenas+0x30);
   476  000904  501A               	movf	_centenas^0,w,c
   477  000906  0F30               	addlw	48
   478  000908  ECD7  F006         	call	_ENVIA_CHAR
   479                           
   480                           ;maincode.c: 86:             ENVIA_CHAR(decenas+0x30);
   481  00090C  5019               	movf	_decenas^0,w,c
   482  00090E  0F30               	addlw	48
   483  000910  ECD7  F006         	call	_ENVIA_CHAR
   484                           
   485                           ;maincode.c: 87:             ENVIA_CHAR(unidades+0x30);
   486  000914  5018               	movf	_unidades^0,w,c
   487  000916  0F30               	addlw	48
   488  000918  ECD7  F006         	call	_ENVIA_CHAR
   489  00091C                     
   490                           ;maincode.c: 88:             ESCRIBE_MENSAJE2("   8bit");
   491  00091C  0E17               	movlw	low STR_5
   492  00091E  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   493  000920  0E08               	movlw	high STR_5
   494  000922  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   495  000924  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   496  000928                     l1370:
   497                           
   498                           ;maincode.c: 90:         POS_CURSOR(2,0);
   499  000928  0E00               	movlw	0
   500  00092A  6E07               	movwf	POS_CURSOR@columna^0,c
   501  00092C  0E02               	movlw	2
   502  00092E  EC83  F006         	call	_POS_CURSOR
   503                           
   504                           ;maincode.c: 91:         ESCRIBE_MENSAJE2("CH1:");
   505  000932  0E2B               	movlw	low STR_6
   506  000934  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   507  000936  0E08               	movlw	high STR_6
   508  000938  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   509  00093A  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   510  00093E                     
   511                           ;maincode.c: 92:         tomamuestra_ADC(1);
   512  00093E  0E01               	movlw	1
   513  000940  EC33  F005         	call	_tomamuestra_ADC
   514  000944                     
   515                           ;maincode.c: 93:         if(modo_CH1 == 0){
   516  000944  5016               	movf	_modo_CH1^0,w,c
   517  000946  A4D8               	btfss	status,2,c
   518  000948  EFA8  F004         	goto	u361
   519  00094C  EFAA  F004         	goto	u360
   520  000950                     u361:
   521  000950  EFC8  F004         	goto	l1380
   522  000954                     u360:
   523  000954                     
   524                           ;maincode.c: 94:             convierte(resultado_ADC);
   525  000954  C014  F010         	movff	_resultado_ADC,convierte@numero
   526  000958  C015  F011         	movff	_resultado_ADC+1,convierte@numero+1
   527  00095C  ECEE  F004         	call	_convierte	;wreg free
   528                           
   529                           ;maincode.c: 95:             ENVIA_CHAR(millar+0x30);
   530  000960  501B               	movf	_millar^0,w,c
   531  000962  0F30               	addlw	48
   532  000964  ECD7  F006         	call	_ENVIA_CHAR
   533                           
   534                           ;maincode.c: 96:             ENVIA_CHAR(centenas+0x30);
   535  000968  501A               	movf	_centenas^0,w,c
   536  00096A  0F30               	addlw	48
   537  00096C  ECD7  F006         	call	_ENVIA_CHAR
   538                           
   539                           ;maincode.c: 97:             ENVIA_CHAR(decenas+0x30);
   540  000970  5019               	movf	_decenas^0,w,c
   541  000972  0F30               	addlw	48
   542  000974  ECD7  F006         	call	_ENVIA_CHAR
   543                           
   544                           ;maincode.c: 98:             ENVIA_CHAR(unidades+0x30);
   545  000978  5018               	movf	_unidades^0,w,c
   546  00097A  0F30               	addlw	48
   547  00097C  ECD7  F006         	call	_ENVIA_CHAR
   548  000980                     
   549                           ;maincode.c: 99:             ESCRIBE_MENSAJE2(" 10bit");
   550  000980  0E1F               	movlw	low STR_4
   551  000982  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   552  000984  0E08               	movlw	high STR_4
   553  000986  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   554  000988  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   555                           
   556                           ;maincode.c: 100:         }
   557  00098C  EF3E  F004         	goto	l1354
   558  000990                     l1380:
   559                           
   560                           ;maincode.c: 102:             convierte(resultado_ADC>>2);
   561  000990  C014  F012         	movff	_resultado_ADC,??_main
   562  000994  C015  F013         	movff	_resultado_ADC+1,??_main+1
   563  000998  90D8               	bcf	status,0,c
   564  00099A  3213               	rrcf	(??_main+1)^0,f,c
   565  00099C  3212               	rrcf	??_main^0,f,c
   566  00099E  90D8               	bcf	status,0,c
   567  0009A0  3213               	rrcf	(??_main+1)^0,f,c
   568  0009A2  3212               	rrcf	??_main^0,f,c
   569  0009A4  C012  F010         	movff	??_main,convierte@numero
   570  0009A8  C013  F011         	movff	??_main+1,convierte@numero+1
   571  0009AC  ECEE  F004         	call	_convierte	;wreg free
   572                           
   573                           ;maincode.c: 103:             ENVIA_CHAR(centenas+0x30);
   574  0009B0  501A               	movf	_centenas^0,w,c
   575  0009B2  0F30               	addlw	48
   576  0009B4  ECD7  F006         	call	_ENVIA_CHAR
   577                           
   578                           ;maincode.c: 104:             ENVIA_CHAR(decenas+0x30);
   579  0009B8  5019               	movf	_decenas^0,w,c
   580  0009BA  0F30               	addlw	48
   581  0009BC  ECD7  F006         	call	_ENVIA_CHAR
   582                           
   583                           ;maincode.c: 105:             ENVIA_CHAR(unidades+0x30);
   584  0009C0  5018               	movf	_unidades^0,w,c
   585  0009C2  0F30               	addlw	48
   586  0009C4  ECD7  F006         	call	_ENVIA_CHAR
   587  0009C8                     
   588                           ;maincode.c: 106:             ESCRIBE_MENSAJE2("   8bit");
   589  0009C8  0E17               	movlw	low STR_5
   590  0009CA  6E08               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   591  0009CC  0E08               	movlw	high STR_5
   592  0009CE  6E09               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   593  0009D0  EC3B  F006         	call	_ESCRIBE_MENSAJE2	;wreg free
   594  0009D4  EF3E  F004         	goto	l1354
   595  0009D8  EF2A  F000         	goto	start
   596  0009DC                     __end_of_main:
   597                           	callstack 0
   598                           
   599 ;; *************** function _tomamuestra_ADC *****************
   600 ;; Defined at:
   601 ;;		line 46 in file "maincode.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  canal           1    wreg     unsigned char 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  canal           1    5[COMRAM] unsigned char 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   615 ;;      Params:         0       0       0       0       0       0       0       0       0
   616 ;;      Locals:         1       0       0       0       0       0       0       0       0
   617 ;;      Temps:          2       0       0       0       0       0       0       0       0
   618 ;;      Totals:         3       0       0       0       0       0       0       0       0
   619 ;;Total ram usage:        3 bytes
   620 ;; Hardware stack levels used: 1
   621 ;; Hardware stack levels required when called: 2
   622 ;; This function calls:
   623 ;;		Nothing
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text1
   630  000A66                     __ptext1:
   631                           	callstack 0
   632  000A66                     _tomamuestra_ADC:
   633                           	callstack 28
   634                           
   635                           ;incstack = 0
   636                           ;tomamuestra_ADC@canal stored from wreg
   637  000A66  6E06               	movwf	tomamuestra_ADC@canal^0,c
   638  000A68                     
   639                           ;maincode.c: 47:     switch(canal){
   640  000A68  EF42  F005         	goto	l1142
   641  000A6C                     l1134:
   642                           
   643                           ;maincode.c: 49:             ADCON0 = 0x01;
   644  000A6C  0E01               	movlw	1
   645  000A6E  6EC2               	movwf	194,c	;volatile
   646                           
   647                           ;maincode.c: 50:             break;
   648  000A70  EF5B  F005         	goto	l170
   649  000A74                     l1136:
   650                           
   651                           ;maincode.c: 52:             ADCON0 = 0x05;
   652  000A74  0E05               	movlw	5
   653  000A76  6EC2               	movwf	194,c	;volatile
   654                           
   655                           ;maincode.c: 53:             break;
   656  000A78  EF5B  F005         	goto	l170
   657  000A7C                     l1138:
   658                           
   659                           ;maincode.c: 55:             ADCON0 = 0x09;
   660  000A7C  0E09               	movlw	9
   661  000A7E  6EC2               	movwf	194,c	;volatile
   662                           
   663                           ;maincode.c: 56:             break;
   664  000A80  EF5B  F005         	goto	l170
   665  000A84                     l1142:
   666  000A84  5006               	movf	tomamuestra_ADC@canal^0,w,c
   667  000A86  6E04               	movwf	??_tomamuestra_ADC^0,c
   668  000A88  6A05               	clrf	(??_tomamuestra_ADC+1)^0,c
   669                           
   670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   671                           ; Switch size 1, requested type "simple"
   672                           ; Number of cases is 1, Range of values is 0 to 0
   673                           ; switch strategies available:
   674                           ; Name         Instructions Cycles
   675                           ; simple_byte            4     3 (average)
   676                           ;	Chosen strategy is simple_byte
   677  000A8A  5005               	movf	(??_tomamuestra_ADC+1)^0,w,c
   678  000A8C  0A00               	xorlw	0	; case 0
   679  000A8E  B4D8               	btfsc	status,2,c
   680  000A90  EF4C  F005         	goto	l1404
   681  000A94  EF5B  F005         	goto	l170
   682  000A98                     l1404:
   683                           
   684                           ; Switch size 1, requested type "simple"
   685                           ; Number of cases is 3, Range of values is 0 to 2
   686                           ; switch strategies available:
   687                           ; Name         Instructions Cycles
   688                           ; simple_byte           10     6 (average)
   689                           ;	Chosen strategy is simple_byte
   690  000A98  5004               	movf	??_tomamuestra_ADC^0,w,c
   691  000A9A  0A00               	xorlw	0	; case 0
   692  000A9C  B4D8               	btfsc	status,2,c
   693  000A9E  EF36  F005         	goto	l1134
   694  000AA2  0A01               	xorlw	1	; case 1
   695  000AA4  B4D8               	btfsc	status,2,c
   696  000AA6  EF3A  F005         	goto	l1136
   697  000AAA  0A03               	xorlw	3	; case 2
   698  000AAC  B4D8               	btfsc	status,2,c
   699  000AAE  EF3E  F005         	goto	l1138
   700  000AB2  EF5B  F005         	goto	l170
   701  000AB6                     l170:
   702                           
   703                           ;maincode.c: 58:     ADCON0bits.GO = 1;
   704  000AB6  82C2               	bsf	194,1,c	;volatile
   705  000AB8                     l173:
   706  000AB8  B2C2               	btfsc	194,1,c	;volatile
   707  000ABA  EF61  F005         	goto	u141
   708  000ABE  EF63  F005         	goto	u140
   709  000AC2                     u141:
   710  000AC2  EF5C  F005         	goto	l173
   711  000AC6                     u140:
   712  000AC6                     
   713                           ;maincode.c: 60:     resultado_ADC = (ADRESH << 8) + ADRESL;
   714  000AC6  50C4               	movf	196,w,c	;volatile
   715  000AC8  6E05               	movwf	(??_tomamuestra_ADC+1)^0,c
   716  000ACA  6A04               	clrf	??_tomamuestra_ADC^0,c
   717  000ACC  50C3               	movf	195,w,c	;volatile
   718  000ACE  2404               	addwf	??_tomamuestra_ADC^0,w,c
   719  000AD0  6E14               	movwf	_resultado_ADC^0,c
   720  000AD2  0E00               	movlw	0
   721  000AD4  2005               	addwfc	(??_tomamuestra_ADC+1)^0,w,c
   722  000AD6  6E15               	movwf	(_resultado_ADC+1)^0,c
   723  000AD8  0012               	return		;funcret
   724  000ADA                     __end_of_tomamuestra_ADC:
   725                           	callstack 0
   726                           
   727 ;; *************** function _convierte *****************
   728 ;; Defined at:
   729 ;;		line 39 in file "maincode.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;  numero          2   15[COMRAM] unsigned int 
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, status,2, status,0, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   743 ;;      Params:         2       0       0       0       0       0       0       0       0
   744 ;;      Locals:         0       0       0       0       0       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0       0       0       0       0
   746 ;;      Totals:         2       0       0       0       0       0       0       0       0
   747 ;;Total ram usage:        2 bytes
   748 ;; Hardware stack levels used: 1
   749 ;; Hardware stack levels required when called: 3
   750 ;; This function calls:
   751 ;;		___lwdiv
   752 ;;		___lwmod
   753 ;; This function is called by:
   754 ;;		_main
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           	psect	text2
   759  0009DC                     __ptext2:
   760                           	callstack 0
   761  0009DC                     _convierte:
   762                           	callstack 27
   763  0009DC                     
   764                           ;maincode.c: 40:     millar = numero / 1000;
   765  0009DC  C010  F009         	movff	convierte@numero,___lwdiv@dividend
   766  0009E0  C011  F00A         	movff	convierte@numero+1,___lwdiv@dividend+1
   767  0009E4  0E03               	movlw	3
   768  0009E6  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
   769  0009E8  0EE8               	movlw	232
   770  0009EA  6E0B               	movwf	___lwdiv@divisor^0,c
   771  0009EC  EC6D  F005         	call	___lwdiv	;wreg free
   772  0009F0  5009               	movf	?___lwdiv^0,w,c
   773  0009F2  6E1B               	movwf	_millar^0,c
   774                           
   775                           ;maincode.c: 41:     centenas = (numero % 1000) / 100;
   776  0009F4  0E03               	movlw	3
   777  0009F6  6E07               	movwf	(___lwmod@divisor+1)^0,c
   778  0009F8  0EE8               	movlw	232
   779  0009FA  6E06               	movwf	___lwmod@divisor^0,c
   780  0009FC  C010  F004         	movff	convierte@numero,___lwmod@dividend
   781  000A00  C011  F005         	movff	convierte@numero+1,___lwmod@dividend+1
   782  000A04  ECE0  F005         	call	___lwmod	;wreg free
   783  000A08  C004  F009         	movff	?___lwmod,___lwdiv@dividend
   784  000A0C  C005  F00A         	movff	?___lwmod+1,___lwdiv@dividend+1
   785  000A10  0E00               	movlw	0
   786  000A12  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
   787  000A14  0E64               	movlw	100
   788  000A16  6E0B               	movwf	___lwdiv@divisor^0,c
   789  000A18  EC6D  F005         	call	___lwdiv	;wreg free
   790  000A1C  5009               	movf	?___lwdiv^0,w,c
   791  000A1E  6E1A               	movwf	_centenas^0,c
   792                           
   793                           ;maincode.c: 42:     decenas = (numero % 100) / 10;
   794  000A20  0E00               	movlw	0
   795  000A22  6E07               	movwf	(___lwmod@divisor+1)^0,c
   796  000A24  0E64               	movlw	100
   797  000A26  6E06               	movwf	___lwmod@divisor^0,c
   798  000A28  C010  F004         	movff	convierte@numero,___lwmod@dividend
   799  000A2C  C011  F005         	movff	convierte@numero+1,___lwmod@dividend+1
   800  000A30  ECE0  F005         	call	___lwmod	;wreg free
   801  000A34  C004  F009         	movff	?___lwmod,___lwdiv@dividend
   802  000A38  C005  F00A         	movff	?___lwmod+1,___lwdiv@dividend+1
   803  000A3C  0E00               	movlw	0
   804  000A3E  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
   805  000A40  0E0A               	movlw	10
   806  000A42  6E0B               	movwf	___lwdiv@divisor^0,c
   807  000A44  EC6D  F005         	call	___lwdiv	;wreg free
   808  000A48  5009               	movf	?___lwdiv^0,w,c
   809  000A4A  6E19               	movwf	_decenas^0,c
   810                           
   811                           ;maincode.c: 43:     unidades = numero % 10;
   812  000A4C  C010  F004         	movff	convierte@numero,___lwmod@dividend
   813  000A50  C011  F005         	movff	convierte@numero+1,___lwmod@dividend+1
   814  000A54  0E00               	movlw	0
   815  000A56  6E07               	movwf	(___lwmod@divisor+1)^0,c
   816  000A58  0E0A               	movlw	10
   817  000A5A  6E06               	movwf	___lwmod@divisor^0,c
   818  000A5C  ECE0  F005         	call	___lwmod	;wreg free
   819  000A60  5004               	movf	?___lwmod^0,w,c
   820  000A62  6E18               	movwf	_unidades^0,c
   821  000A64  0012               	return		;funcret
   822  000A66                     __end_of_convierte:
   823                           	callstack 0
   824                           
   825 ;; *************** function ___lwmod *****************
   826 ;; Defined at:
   827 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwmod.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  dividend        2    3[COMRAM] unsigned int 
   830 ;;  divisor         2    5[COMRAM] unsigned int 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  counter         1    7[COMRAM] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  2    3[COMRAM] unsigned int 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   842 ;;      Params:         4       0       0       0       0       0       0       0       0
   843 ;;      Locals:         1       0       0       0       0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0       0       0       0       0
   845 ;;      Totals:         5       0       0       0       0       0       0       0       0
   846 ;;Total ram usage:        5 bytes
   847 ;; Hardware stack levels used: 1
   848 ;; Hardware stack levels required when called: 2
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_convierte
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text3
   857  000BC0                     __ptext3:
   858                           	callstack 0
   859  000BC0                     ___lwmod:
   860                           	callstack 27
   861  000BC0  5006               	movf	___lwmod@divisor^0,w,c
   862  000BC2  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
   863  000BC4  B4D8               	btfsc	status,2,c
   864  000BC6  EFE7  F005         	goto	u291
   865  000BCA  EFE9  F005         	goto	u290
   866  000BCE                     u291:
   867  000BCE  EF0D  F006         	goto	l706
   868  000BD2                     u290:
   869  000BD2  0E01               	movlw	1
   870  000BD4  6E08               	movwf	___lwmod@counter^0,c
   871  000BD6  EFF1  F005         	goto	l1312
   872  000BDA                     l1310:
   873  000BDA  90D8               	bcf	status,0,c
   874  000BDC  3606               	rlcf	___lwmod@divisor^0,f,c
   875  000BDE  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
   876  000BE0  2A08               	incf	___lwmod@counter^0,f,c
   877  000BE2                     l1312:
   878  000BE2  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
   879  000BE4  EFF6  F005         	goto	u301
   880  000BE8  EFF8  F005         	goto	u300
   881  000BEC                     u301:
   882  000BEC  EFED  F005         	goto	l1310
   883  000BF0                     u300:
   884  000BF0                     l1314:
   885  000BF0  5006               	movf	___lwmod@divisor^0,w,c
   886  000BF2  5C04               	subwf	___lwmod@dividend^0,w,c
   887  000BF4  5007               	movf	(___lwmod@divisor+1)^0,w,c
   888  000BF6  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
   889  000BF8  A0D8               	btfss	status,0,c
   890  000BFA  EF01  F006         	goto	u311
   891  000BFE  EF03  F006         	goto	u310
   892  000C02                     u311:
   893  000C02  EF07  F006         	goto	l1318
   894  000C06                     u310:
   895  000C06  5006               	movf	___lwmod@divisor^0,w,c
   896  000C08  5E04               	subwf	___lwmod@dividend^0,f,c
   897  000C0A  5007               	movf	(___lwmod@divisor+1)^0,w,c
   898  000C0C  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
   899  000C0E                     l1318:
   900  000C0E  90D8               	bcf	status,0,c
   901  000C10  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
   902  000C12  3206               	rrcf	___lwmod@divisor^0,f,c
   903  000C14  2E08               	decfsz	___lwmod@counter^0,f,c
   904  000C16  EFF8  F005         	goto	l1314
   905  000C1A                     l706:
   906  000C1A  C004  F004         	movff	___lwmod@dividend,?___lwmod
   907  000C1E  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
   908  000C22  0012               	return		;funcret
   909  000C24                     __end_of___lwmod:
   910                           	callstack 0
   911                           
   912 ;; *************** function ___lwdiv *****************
   913 ;; Defined at:
   914 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  dividend        2    8[COMRAM] unsigned int 
   917 ;;  divisor         2   10[COMRAM] unsigned int 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  quotient        2   12[COMRAM] unsigned int 
   920 ;;  counter         1   14[COMRAM] unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;                  2    8[COMRAM] unsigned int 
   923 ;; Registers used:
   924 ;;		wreg, status,2, status,0
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   930 ;;      Params:         4       0       0       0       0       0       0       0       0
   931 ;;      Locals:         3       0       0       0       0       0       0       0       0
   932 ;;      Temps:          0       0       0       0       0       0       0       0       0
   933 ;;      Totals:         7       0       0       0       0       0       0       0       0
   934 ;;Total ram usage:        7 bytes
   935 ;; Hardware stack levels used: 1
   936 ;; Hardware stack levels required when called: 2
   937 ;; This function calls:
   938 ;;		Nothing
   939 ;; This function is called by:
   940 ;;		_convierte
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           	psect	text4
   945  000ADA                     __ptext4:
   946                           	callstack 0
   947  000ADA                     ___lwdiv:
   948                           	callstack 27
   949  000ADA  0E00               	movlw	0
   950  000ADC  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
   951  000ADE  0E00               	movlw	0
   952  000AE0  6E0D               	movwf	___lwdiv@quotient^0,c
   953  000AE2  500B               	movf	___lwdiv@divisor^0,w,c
   954  000AE4  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
   955  000AE6  B4D8               	btfsc	status,2,c
   956  000AE8  EF78  F005         	goto	u261
   957  000AEC  EF7A  F005         	goto	u260
   958  000AF0                     u261:
   959  000AF0  EFA2  F005         	goto	l696
   960  000AF4                     u260:
   961  000AF4  0E01               	movlw	1
   962  000AF6  6E0F               	movwf	___lwdiv@counter^0,c
   963  000AF8  EF82  F005         	goto	l1292
   964  000AFC                     l1290:
   965  000AFC  90D8               	bcf	status,0,c
   966  000AFE  360B               	rlcf	___lwdiv@divisor^0,f,c
   967  000B00  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
   968  000B02  2A0F               	incf	___lwdiv@counter^0,f,c
   969  000B04                     l1292:
   970  000B04  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
   971  000B06  EF87  F005         	goto	u271
   972  000B0A  EF89  F005         	goto	u270
   973  000B0E                     u271:
   974  000B0E  EF7E  F005         	goto	l1290
   975  000B12                     u270:
   976  000B12                     l1294:
   977  000B12  90D8               	bcf	status,0,c
   978  000B14  360D               	rlcf	___lwdiv@quotient^0,f,c
   979  000B16  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
   980  000B18  500B               	movf	___lwdiv@divisor^0,w,c
   981  000B1A  5C09               	subwf	___lwdiv@dividend^0,w,c
   982  000B1C  500C               	movf	(___lwdiv@divisor+1)^0,w,c
   983  000B1E  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
   984  000B20  A0D8               	btfss	status,0,c
   985  000B22  EF95  F005         	goto	u281
   986  000B26  EF97  F005         	goto	u280
   987  000B2A                     u281:
   988  000B2A  EF9C  F005         	goto	l1302
   989  000B2E                     u280:
   990  000B2E  500B               	movf	___lwdiv@divisor^0,w,c
   991  000B30  5E09               	subwf	___lwdiv@dividend^0,f,c
   992  000B32  500C               	movf	(___lwdiv@divisor+1)^0,w,c
   993  000B34  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
   994  000B36  800D               	bsf	___lwdiv@quotient^0,0,c
   995  000B38                     l1302:
   996  000B38  90D8               	bcf	status,0,c
   997  000B3A  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
   998  000B3C  320B               	rrcf	___lwdiv@divisor^0,f,c
   999  000B3E  2E0F               	decfsz	___lwdiv@counter^0,f,c
  1000  000B40  EF89  F005         	goto	l1294
  1001  000B44                     l696:
  1002  000B44  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  1003  000B48  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1004  000B4C  0012               	return		;funcret
  1005  000B4E                     __end_of___lwdiv:
  1006                           	callstack 0
  1007                           
  1008 ;; *************** function _configuro *****************
  1009 ;; Defined at:
  1010 ;;		line 10 in file "maincode.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1027 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1028 ;;Total ram usage:        0 bytes
  1029 ;; Hardware stack levels used: 1
  1030 ;; Hardware stack levels required when called: 6
  1031 ;; This function calls:
  1032 ;;		_LCD_INIT
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text5
  1039  000CC0                     __ptext5:
  1040                           	callstack 0
  1041  000CC0                     _configuro:
  1042                           	callstack 24
  1043  000CC0                     
  1044                           ;maincode.c: 11:     OSCCON = 0x52;
  1045  000CC0  0E52               	movlw	82
  1046  000CC2  6ED3               	movwf	211,c	;volatile
  1047                           
  1048                           ;maincode.c: 12:     TRISD = 0x00;
  1049  000CC4  0E00               	movlw	0
  1050  000CC6  6E95               	movwf	149,c	;volatile
  1051                           
  1052                           ;maincode.c: 13:     ANSELD = 0x00;
  1053  000CC8  0E00               	movlw	0
  1054  000CCA  010F               	movlb	15	; () banked
  1055  000CCC  6F5E               	movwf	94,b	;volatile
  1056  000CCE                     
  1057                           ; BSR set to: 15
  1058                           ;maincode.c: 14:     TRISAbits.RA0 = 1;
  1059  000CCE  8092               	bsf	146,0,c	;volatile
  1060  000CD0                     
  1061                           ; BSR set to: 15
  1062                           ;maincode.c: 15:     ANSELAbits.ANSA0 = 1;
  1063  000CD0  815B               	bsf	91,0,b	;volatile
  1064  000CD2                     
  1065                           ; BSR set to: 15
  1066                           ;maincode.c: 16:     TRISAbits.RA1 = 1;
  1067  000CD2  8292               	bsf	146,1,c	;volatile
  1068  000CD4                     
  1069                           ; BSR set to: 15
  1070                           ;maincode.c: 17:     ANSELAbits.ANSA1 = 1;
  1071  000CD4  835B               	bsf	91,1,b	;volatile
  1072  000CD6                     
  1073                           ; BSR set to: 15
  1074                           ;maincode.c: 18:     TRISBbits.RB0 = 1;
  1075  000CD6  8093               	bsf	147,0,c	;volatile
  1076  000CD8                     
  1077                           ; BSR set to: 15
  1078                           ;maincode.c: 19:     ANSELBbits.ANSB0 = 0;
  1079  000CD8  915C               	bcf	92,0,b	;volatile
  1080  000CDA                     
  1081                           ; BSR set to: 15
  1082                           ;maincode.c: 20:     TRISBbits.RB1 = 1;
  1083  000CDA  8293               	bsf	147,1,c	;volatile
  1084  000CDC                     
  1085                           ; BSR set to: 15
  1086                           ;maincode.c: 21:     ANSELBbits.ANSB1 = 0;
  1087  000CDC  935C               	bcf	92,1,b	;volatile
  1088  000CDE                     
  1089                           ; BSR set to: 15
  1090                           ;maincode.c: 22:     INTCON2bits.RBPU = 1;
  1091  000CDE  8EF1               	bsf	241,7,c	;volatile
  1092  000CE0                     
  1093                           ; BSR set to: 15
  1094                           ;maincode.c: 23:     WPUBbits.WPUB0 = 1;
  1095  000CE0  8085               	bsf	133,0,c	;volatile
  1096  000CE2                     
  1097                           ; BSR set to: 15
  1098                           ;maincode.c: 24:     WPUBbits.WPUB1 = 1;
  1099  000CE2  8285               	bsf	133,1,c	;volatile
  1100  000CE4                     
  1101                           ; BSR set to: 15
  1102                           ;maincode.c: 25:     INTCON2bits.INTEDG0 = 0;
  1103  000CE4  9CF1               	bcf	241,6,c	;volatile
  1104  000CE6                     
  1105                           ; BSR set to: 15
  1106                           ;maincode.c: 26:     INTCON2bits.INTEDG1 = 0;
  1107  000CE6  9AF1               	bcf	241,5,c	;volatile
  1108  000CE8                     
  1109                           ; BSR set to: 15
  1110                           ;maincode.c: 27:     RCONbits.IPEN = 1;
  1111  000CE8  8ED0               	bsf	208,7,c	;volatile
  1112  000CEA                     
  1113                           ; BSR set to: 15
  1114                           ;maincode.c: 28:     INTCONbits.GIEH = 1;
  1115  000CEA  8EF2               	bsf	242,7,c	;volatile
  1116  000CEC                     
  1117                           ; BSR set to: 15
  1118                           ;maincode.c: 29:     INTCONbits.GIEL = 1;
  1119  000CEC  8CF2               	bsf	242,6,c	;volatile
  1120  000CEE                     
  1121                           ; BSR set to: 15
  1122                           ;maincode.c: 30:     INTCON3bits.INT1IP = 0;
  1123  000CEE  9CF0               	bcf	240,6,c	;volatile
  1124  000CF0                     
  1125                           ; BSR set to: 15
  1126                           ;maincode.c: 31:     INTCONbits.INT0IE = 1;
  1127  000CF0  88F2               	bsf	242,4,c	;volatile
  1128  000CF2                     
  1129                           ; BSR set to: 15
  1130                           ;maincode.c: 32:     INTCON3bits.INT1IE = 1;
  1131  000CF2  86F0               	bsf	240,3,c	;volatile
  1132  000CF4                     
  1133                           ; BSR set to: 15
  1134                           ;maincode.c: 33:     LCD_INIT();
  1135  000CF4  ECF1  F006         	call	_LCD_INIT	;wreg free
  1136  000CF8                     
  1137                           ;maincode.c: 34:     ADCON2 = 0xA4;
  1138  000CF8  0EA4               	movlw	164
  1139  000CFA  6EC0               	movwf	192,c	;volatile
  1140  000CFC                     
  1141                           ;maincode.c: 35:     ADCON1 = 0x00;
  1142  000CFC  0E00               	movlw	0
  1143  000CFE  6EC1               	movwf	193,c	;volatile
  1144  000D00                     
  1145                           ;maincode.c: 36:     ADCON0 = 0x01;
  1146  000D00  0E01               	movlw	1
  1147  000D02  6EC2               	movwf	194,c	;volatile
  1148  000D04  0012               	return		;funcret
  1149  000D06                     __end_of_configuro:
  1150                           	callstack 0
  1151                           
  1152 ;; *************** function _LCD_INIT *****************
  1153 ;; Defined at:
  1154 ;;		line 184 in file "LCD.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         0       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        1 bytes
  1173 ;; Hardware stack levels used: 1
  1174 ;; Hardware stack levels required when called: 5
  1175 ;; This function calls:
  1176 ;;		_BORRAR_LCD
  1177 ;;		_CURSOR_HOME
  1178 ;;		_CURSOR_ONOFF
  1179 ;;		_LCD_CONFIG
  1180 ;; This function is called by:
  1181 ;;		_configuro
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text6
  1186  000DE2                     __ptext6:
  1187                           	callstack 0
  1188  000DE2                     _LCD_INIT:
  1189                           	callstack 24
  1190  000DE2                     
  1191                           ;LCD.c: 185:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
  1192  000DE2  0E14               	movlw	20
  1193  000DE4  6E08               	movwf	??_LCD_INIT^0,c
  1194  000DE6  0E7A               	movlw	122
  1195  000DE8                     u387:
  1196  000DE8  2EE8               	decfsz	wreg,f,c
  1197  000DEA  D7FE               	bra	u387
  1198  000DEC  2E08               	decfsz	??_LCD_INIT^0,f,c
  1199  000DEE  D7FC               	bra	u387
  1200  000DF0                     
  1201                           ;LCD.c: 186:     LCD_CONFIG();
  1202  000DF0  EC12  F006         	call	_LCD_CONFIG	;wreg free
  1203  000DF4                     
  1204                           ;LCD.c: 187:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
  1205  000DF4  0E14               	movlw	20
  1206  000DF6  6E08               	movwf	??_LCD_INIT^0,c
  1207  000DF8  0E7A               	movlw	122
  1208  000DFA                     u397:
  1209  000DFA  2EE8               	decfsz	wreg,f,c
  1210  000DFC  D7FE               	bra	u397
  1211  000DFE  2E08               	decfsz	??_LCD_INIT^0,f,c
  1212  000E00  D7FC               	bra	u397
  1213                           
  1214                           ;LCD.c: 188:     BORRAR_LCD();
  1215  000E02  EC51  F007         	call	_BORRAR_LCD	;wreg free
  1216                           
  1217                           ;LCD.c: 189:     CURSOR_HOME();
  1218  000E06  EC4D  F007         	call	_CURSOR_HOME	;wreg free
  1219                           
  1220                           ;LCD.c: 190:     CURSOR_ONOFF(1);
  1221  000E0A  0E01               	movlw	1
  1222  000E0C  EC09  F007         	call	_CURSOR_ONOFF
  1223  000E10  0012               	return		;funcret
  1224  000E12                     __end_of_LCD_INIT:
  1225                           	callstack 0
  1226                           
  1227 ;; *************** function _LCD_CONFIG *****************
  1228 ;; Defined at:
  1229 ;;		line 101 in file "LCD.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1243 ;;      Params:         0       0       0       0       0       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1245 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1246 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1247 ;;Total ram usage:        1 bytes
  1248 ;; Hardware stack levels used: 1
  1249 ;; Hardware stack levels required when called: 4
  1250 ;; This function calls:
  1251 ;;		_ENVIA_LCD_CMD
  1252 ;;		_ENVIA_NIBBLE
  1253 ;; This function is called by:
  1254 ;;		_LCD_INIT
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text7
  1259  000C24                     __ptext7:
  1260                           	callstack 0
  1261  000C24                     _LCD_CONFIG:
  1262                           	callstack 24
  1263  000C24                     
  1264                           ;LCD.c: 103:  LATDbits.LATD0 = 0;
  1265  000C24  908C               	bcf	140,0,c	;volatile
  1266                           
  1267                           ;LCD.c: 104:  LATDbits.LATD1 = 0;
  1268  000C26  928C               	bcf	140,1,c	;volatile
  1269  000C28                     
  1270                           ;LCD.c: 105:  ENVIA_NIBBLE(0x30);
  1271  000C28  0E30               	movlw	48
  1272  000C2A  EC32  F007         	call	_ENVIA_NIBBLE
  1273  000C2E                     
  1274                           ;LCD.c: 106:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
  1275  000C2E  0E03               	movlw	3
  1276  000C30  6E07               	movwf	??_LCD_CONFIG^0,c
  1277  000C32  0E98               	movlw	152
  1278  000C34                     u407:
  1279  000C34  2EE8               	decfsz	wreg,f,c
  1280  000C36  D7FE               	bra	u407
  1281  000C38  2E07               	decfsz	??_LCD_CONFIG^0,f,c
  1282  000C3A  D7FC               	bra	u407
  1283  000C3C                     
  1284                           ;LCD.c: 107:  ENVIA_NIBBLE(0x30);
  1285  000C3C  0E30               	movlw	48
  1286  000C3E  EC32  F007         	call	_ENVIA_NIBBLE
  1287                           
  1288                           ;LCD.c: 108:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1289  000C42  0E21               	movlw	33
  1290  000C44                     u417:
  1291  000C44  2EE8               	decfsz	wreg,f,c
  1292  000C46  D7FE               	bra	u417
  1293  000C48  F000               	nop	
  1294  000C4A                     
  1295                           ;LCD.c: 109:     ENVIA_NIBBLE(0x30);
  1296  000C4A  0E30               	movlw	48
  1297  000C4C  EC32  F007         	call	_ENVIA_NIBBLE
  1298  000C50                     
  1299                           ;LCD.c: 110:  ENVIA_NIBBLE(0x20);
  1300  000C50  0E20               	movlw	32
  1301  000C52  EC32  F007         	call	_ENVIA_NIBBLE
  1302  000C56                     
  1303                           ;LCD.c: 111:  ENVIA_LCD_CMD(0x01);
  1304  000C56  0E01               	movlw	1
  1305  000C58  ECBD  F006         	call	_ENVIA_LCD_CMD
  1306  000C5C                     
  1307                           ;LCD.c: 112:  ENVIA_LCD_CMD(0x28);
  1308  000C5C  0E28               	movlw	40
  1309  000C5E  ECBD  F006         	call	_ENVIA_LCD_CMD
  1310  000C62                     
  1311                           ;LCD.c: 113:  ENVIA_LCD_CMD(0x0F);
  1312  000C62  0E0F               	movlw	15
  1313  000C64  ECBD  F006         	call	_ENVIA_LCD_CMD
  1314  000C68                     
  1315                           ;LCD.c: 114:  ENVIA_LCD_CMD(0x06);
  1316  000C68  0E06               	movlw	6
  1317  000C6A  ECBD  F006         	call	_ENVIA_LCD_CMD
  1318  000C6E                     
  1319                           ;LCD.c: 115:  ENVIA_LCD_CMD(0x01);
  1320  000C6E  0E01               	movlw	1
  1321  000C70  ECBD  F006         	call	_ENVIA_LCD_CMD
  1322  000C74  0012               	return		;funcret
  1323  000C76                     __end_of_LCD_CONFIG:
  1324                           	callstack 0
  1325                           
  1326 ;; *************** function _CURSOR_ONOFF *****************
  1327 ;; Defined at:
  1328 ;;		line 54 in file "LCD.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  estado          1    wreg     unsigned char 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  estado          1    6[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1342 ;;      Params:         0       0       0       0       0       0       0       0       0
  1343 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1345 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1346 ;;Total ram usage:        1 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 4
  1349 ;; This function calls:
  1350 ;;		_ENVIA_LCD_CMD
  1351 ;; This function is called by:
  1352 ;;		_LCD_INIT
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text8
  1357  000E12                     __ptext8:
  1358                           	callstack 0
  1359  000E12                     _CURSOR_ONOFF:
  1360                           	callstack 24
  1361                           
  1362                           ;incstack = 0
  1363                           ;CURSOR_ONOFF@estado stored from wreg
  1364  000E12  6E07               	movwf	CURSOR_ONOFF@estado^0,c
  1365  000E14                     
  1366                           ;LCD.c: 54: void CURSOR_ONOFF(unsigned char estado);LCD.c: 55: {;LCD.c: 56:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1367  000E14  5007               	movf	CURSOR_ONOFF@estado^0,w,c
  1368  000E16  A4D8               	btfss	status,2,c
  1369  000E18  EF10  F007         	goto	u21
  1370  000E1C  EF12  F007         	goto	u20
  1371  000E20                     u21:
  1372  000E20  EF15  F007         	goto	l958
  1373  000E24                     u20:
  1374  000E24  0E0E               	movlw	14
  1375  000E26  ECBD  F006         	call	_ENVIA_LCD_CMD
  1376  000E2A                     l958:
  1377                           
  1378                           ;LCD.c: 57:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1379  000E2A  0407               	decf	CURSOR_ONOFF@estado^0,w,c
  1380  000E2C  A4D8               	btfss	status,2,c
  1381  000E2E  EF1B  F007         	goto	u31
  1382  000E32  EF1D  F007         	goto	u30
  1383  000E36                     u31:
  1384  000E36  EF20  F007         	goto	l56
  1385  000E3A                     u30:
  1386  000E3A  0E0C               	movlw	12
  1387  000E3C  ECBD  F006         	call	_ENVIA_LCD_CMD
  1388  000E40                     l56:
  1389  000E40  0012               	return		;funcret
  1390  000E42                     __end_of_CURSOR_ONOFF:
  1391                           	callstack 0
  1392                           
  1393 ;; *************** function _CURSOR_HOME *****************
  1394 ;; Defined at:
  1395 ;;		line 29 in file "LCD.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0
  1410 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1411 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1412 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1413 ;;Total ram usage:        0 bytes
  1414 ;; Hardware stack levels used: 1
  1415 ;; Hardware stack levels required when called: 4
  1416 ;; This function calls:
  1417 ;;		_ENVIA_LCD_CMD
  1418 ;; This function is called by:
  1419 ;;		_LCD_INIT
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text9
  1424  000E9A                     __ptext9:
  1425                           	callstack 0
  1426  000E9A                     _CURSOR_HOME:
  1427                           	callstack 24
  1428  000E9A                     
  1429                           ;LCD.c: 31:  ENVIA_LCD_CMD(0x02);
  1430  000E9A  0E02               	movlw	2
  1431  000E9C  ECBD  F006         	call	_ENVIA_LCD_CMD
  1432  000EA0  0012               	return		;funcret
  1433  000EA2                     __end_of_CURSOR_HOME:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _BORRAR_LCD *****************
  1437 ;; Defined at:
  1438 ;;		line 96 in file "LCD.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1452 ;;      Params:         0       0       0       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used: 1
  1458 ;; Hardware stack levels required when called: 4
  1459 ;; This function calls:
  1460 ;;		_ENVIA_LCD_CMD
  1461 ;; This function is called by:
  1462 ;;		_LCD_INIT
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text10
  1468  000EA2                     __ptext10:
  1469                           	callstack 0
  1470  000EA2                     _BORRAR_LCD:
  1471                           	callstack 24
  1472  000EA2                     
  1473                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
  1474  000EA2  0E01               	movlw	1
  1475  000EA4  ECBD  F006         	call	_ENVIA_LCD_CMD
  1476  000EA8  0012               	return		;funcret
  1477  000EAA                     __end_of_BORRAR_LCD:
  1478                           	callstack 0
  1479                           
  1480 ;; *************** function _POS_CURSOR *****************
  1481 ;; Defined at:
  1482 ;;		line 5 in file "LCD.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  fila            1    wreg     unsigned char 
  1485 ;;  columna         1    6[COMRAM] unsigned char 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  fila            1    7[COMRAM] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1497 ;;      Params:         1       0       0       0       0       0       0       0       0
  1498 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1500 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1501 ;;Total ram usage:        2 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; Hardware stack levels required when called: 4
  1504 ;; This function calls:
  1505 ;;		_ENVIA_LCD_CMD
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text11
  1512  000D06                     __ptext11:
  1513                           	callstack 0
  1514  000D06                     _POS_CURSOR:
  1515                           	callstack 26
  1516                           
  1517                           ;incstack = 0
  1518                           ;POS_CURSOR@fila stored from wreg
  1519  000D06  6E08               	movwf	POS_CURSOR@fila^0,c
  1520  000D08                     
  1521                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
  1522  000D08  0408               	decf	POS_CURSOR@fila^0,w,c
  1523  000D0A  A4D8               	btfss	status,2,c
  1524  000D0C  EF8A  F006         	goto	u321
  1525  000D10  EF8C  F006         	goto	u320
  1526  000D14                     u321:
  1527  000D14  EF92  F006         	goto	l1326
  1528  000D18                     u320:
  1529  000D18                     
  1530                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
  1531  000D18  5007               	movf	POS_CURSOR@columna^0,w,c
  1532  000D1A  0F80               	addlw	128
  1533  000D1C  ECBD  F006         	call	_ENVIA_LCD_CMD
  1534                           
  1535                           ;LCD.c: 10:  }
  1536  000D20  EF9F  F006         	goto	l26
  1537  000D24                     l1326:
  1538  000D24  0E02               	movlw	2
  1539  000D26  1808               	xorwf	POS_CURSOR@fila^0,w,c
  1540  000D28  A4D8               	btfss	status,2,c
  1541  000D2A  EF99  F006         	goto	u331
  1542  000D2E  EF9B  F006         	goto	u330
  1543  000D32                     u331:
  1544  000D32  EF9F  F006         	goto	l26
  1545  000D36                     u330:
  1546  000D36                     
  1547                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
  1548  000D36  5007               	movf	POS_CURSOR@columna^0,w,c
  1549  000D38  0FC0               	addlw	192
  1550  000D3A  ECBD  F006         	call	_ENVIA_LCD_CMD
  1551  000D3E                     l26:
  1552  000D3E  0012               	return		;funcret
  1553  000D40                     __end_of_POS_CURSOR:
  1554                           	callstack 0
  1555                           
  1556 ;; *************** function _ENVIA_LCD_CMD *****************
  1557 ;; Defined at:
  1558 ;;		line 128 in file "LCD.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  dato            1    wreg     unsigned char 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  dato            1    4[COMRAM] unsigned char 
  1563 ;;  aux             1    5[COMRAM] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1573 ;;      Params:         0       0       0       0       0       0       0       0       0
  1574 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1576 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1577 ;;Total ram usage:        2 bytes
  1578 ;; Hardware stack levels used: 1
  1579 ;; Hardware stack levels required when called: 3
  1580 ;; This function calls:
  1581 ;;		_ENVIA_NIBBLE
  1582 ;;		_LEER_LCD
  1583 ;; This function is called by:
  1584 ;;		_POS_CURSOR
  1585 ;;		_CURSOR_HOME
  1586 ;;		_CURSOR_ONOFF
  1587 ;;		_BORRAR_LCD
  1588 ;;		_LCD_CONFIG
  1589 ;;		_BLINK_CURSOR
  1590 ;;		_DISPLAY_ONOFF
  1591 ;;		_CURSOR_SHIFTLEFT
  1592 ;;		_CURSOR_SHIFTRIGHT
  1593 ;;		_DISPLAY_SHIFTLEFT
  1594 ;;		_DISPLAY_SHIFTRIGHT
  1595 ;;		_GENERACARACTER
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text12
  1600  000D7A                     __ptext12:
  1601                           	callstack 0
  1602  000D7A                     _ENVIA_LCD_CMD:
  1603                           	callstack 24
  1604                           
  1605                           ;incstack = 0
  1606                           ;ENVIA_LCD_CMD@dato stored from wreg
  1607  000D7A  6E05               	movwf	ENVIA_LCD_CMD@dato^0,c
  1608  000D7C                     
  1609                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATDbits.LATD0 = 0;
  1610  000D7C  908C               	bcf	140,0,c	;volatile
  1611  000D7E                     
  1612                           ;LCD.c: 132:  LEER_LCD();
  1613  000D7E  ECA7  F005         	call	_LEER_LCD	;wreg free
  1614  000D82                     
  1615                           ;LCD.c: 133:  TRISD = 0b00000000;
  1616  000D82  0E00               	movlw	0
  1617  000D84  6E95               	movwf	149,c	;volatile
  1618  000D86                     
  1619                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1620  000D86  0E21               	movlw	33
  1621  000D88                     u427:
  1622  000D88  2EE8               	decfsz	wreg,f,c
  1623  000D8A  D7FE               	bra	u427
  1624  000D8C  F000               	nop	
  1625  000D8E                     
  1626                           ;LCD.c: 135:     LATDbits.LATD1 = 0;
  1627  000D8E  928C               	bcf	140,1,c	;volatile
  1628  000D90                     
  1629                           ;LCD.c: 136:  LATDbits.LATD2 = 0;
  1630  000D90  948C               	bcf	140,2,c	;volatile
  1631  000D92                     
  1632                           ;LCD.c: 137:  LATDbits.LATD0 = 0;
  1633  000D92  908C               	bcf	140,0,c	;volatile
  1634  000D94                     
  1635                           ;LCD.c: 138:  aux = dato & 0xF0;
  1636  000D94  5005               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1637  000D96  0BF0               	andlw	240
  1638  000D98  6E06               	movwf	ENVIA_LCD_CMD@aux^0,c
  1639  000D9A                     
  1640                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  1641  000D9A  5006               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1642  000D9C  EC32  F007         	call	_ENVIA_NIBBLE
  1643  000DA0                     
  1644                           ;LCD.c: 140:  aux = dato<<4;
  1645  000DA0  3805               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1646  000DA2  0BF0               	andlw	240
  1647  000DA4  6E06               	movwf	ENVIA_LCD_CMD@aux^0,c
  1648  000DA6                     
  1649                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  1650  000DA6  5006               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1651  000DA8  EC32  F007         	call	_ENVIA_NIBBLE
  1652  000DAC  0012               	return		;funcret
  1653  000DAE                     __end_of_ENVIA_LCD_CMD:
  1654                           	callstack 0
  1655                           
  1656 ;; *************** function _ESCRIBE_MENSAJE2 *****************
  1657 ;; Defined at:
  1658 ;;		line 69 in file "LCD.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  cadena          2    7[COMRAM] PTR const unsigned char 
  1661 ;;		 -> STR_8(8), STR_7(7), STR_6(5), STR_5(8), 
  1662 ;;		 -> STR_4(7), STR_3(5), STR_2(8), STR_1(14), 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  i               1   12[COMRAM] unsigned char 
  1665 ;;  tam             1   11[COMRAM] unsigned char 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1675 ;;      Params:         2       0       0       0       0       0       0       0       0
  1676 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1677 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1678 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1679 ;;Total ram usage:        6 bytes
  1680 ;; Hardware stack levels used: 1
  1681 ;; Hardware stack levels required when called: 4
  1682 ;; This function calls:
  1683 ;;		_ENVIA_CHAR
  1684 ;;		_strlen
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text13
  1691  000C76                     __ptext13:
  1692                           	callstack 0
  1693  000C76                     _ESCRIBE_MENSAJE2:
  1694                           	callstack 26
  1695  000C76                     
  1696                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
  1697  000C76  C008  F004         	movff	ESCRIBE_MENSAJE2@cadena,strlen@s
  1698  000C7A  C009  F005         	movff	ESCRIBE_MENSAJE2@cadena+1,strlen@s+1
  1699  000C7E  ECA0  F006         	call	_strlen	;wreg free
  1700  000C82  5004               	movf	?_strlen^0,w,c
  1701  000C84  6E0C               	movwf	ESCRIBE_MENSAJE2@tam^0,c
  1702  000C86                     
  1703                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
  1704  000C86  0E00               	movlw	0
  1705  000C88  6E0D               	movwf	ESCRIBE_MENSAJE2@i^0,c
  1706  000C8A  EF56  F006         	goto	l1340
  1707  000C8E                     l1336:
  1708                           
  1709                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
  1710  000C8E  500D               	movf	ESCRIBE_MENSAJE2@i^0,w,c
  1711  000C90  2408               	addwf	ESCRIBE_MENSAJE2@cadena^0,w,c
  1712  000C92  6E0A               	movwf	??_ESCRIBE_MENSAJE2^0,c
  1713  000C94  0E00               	movlw	0
  1714  000C96  2009               	addwfc	(ESCRIBE_MENSAJE2@cadena+1)^0,w,c
  1715  000C98  6E0B               	movwf	(??_ESCRIBE_MENSAJE2+1)^0,c
  1716  000C9A  C00A  FFF6         	movff	??_ESCRIBE_MENSAJE2,tblptrl
  1717  000C9E  C00B  FFF7         	movff	??_ESCRIBE_MENSAJE2+1,tblptrh
  1718  000CA2                     	if	0	;tblptru may be non-zero
  1719  000CA2                     	endif
  1720  000CA2                     	if	0	;tblptru may be non-zero
  1721  000CA2                     	endif
  1722  000CA2  0008               	tblrd		*
  1723  000CA4  50F5               	movf	tablat,w,c
  1724  000CA6  ECD7  F006         	call	_ENVIA_CHAR
  1725  000CAA                     
  1726                           ;LCD.c: 77:  }
  1727  000CAA  2A0D               	incf	ESCRIBE_MENSAJE2@i^0,f,c
  1728  000CAC                     l1340:
  1729  000CAC  500C               	movf	ESCRIBE_MENSAJE2@tam^0,w,c
  1730  000CAE  5C0D               	subwf	ESCRIBE_MENSAJE2@i^0,w,c
  1731  000CB0  A0D8               	btfss	status,0,c
  1732  000CB2  EF5D  F006         	goto	u341
  1733  000CB6  EF5F  F006         	goto	u340
  1734  000CBA                     u341:
  1735  000CBA  EF47  F006         	goto	l1336
  1736  000CBE                     u340:
  1737  000CBE  0012               	return		;funcret
  1738  000CC0                     __end_of_ESCRIBE_MENSAJE2:
  1739                           	callstack 0
  1740                           
  1741 ;; *************** function _strlen *****************
  1742 ;; Defined at:
  1743 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1746 ;;		 -> STR_8(8), STR_7(7), STR_6(5), STR_5(8), 
  1747 ;;		 -> STR_4(7), STR_3(5), STR_2(8), STR_1(14), 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  a               2    5[COMRAM] PTR const unsigned char 
  1750 ;;		 -> STR_8(8), STR_7(7), STR_6(5), STR_5(8), 
  1751 ;;		 -> STR_4(7), STR_3(5), STR_2(8), STR_1(14), 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  2    3[COMRAM] unsigned int 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1761 ;;      Params:         2       0       0       0       0       0       0       0       0
  1762 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1764 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1765 ;;Total ram usage:        4 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 2
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_ESCRIBE_MENSAJE2
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text14
  1776  000D40                     __ptext14:
  1777                           	callstack 0
  1778  000D40                     _strlen:
  1779                           	callstack 27
  1780  000D40  C004  F006         	movff	strlen@s,strlen@a
  1781  000D44  C005  F007         	movff	strlen@s+1,strlen@a+1
  1782  000D48  EFA8  F006         	goto	l1278
  1783  000D4C                     l1276:
  1784  000D4C  4A04               	infsnz	strlen@s^0,f,c
  1785  000D4E  2A05               	incf	(strlen@s+1)^0,f,c
  1786  000D50                     l1278:
  1787  000D50  C004  FFF6         	movff	strlen@s,tblptrl
  1788  000D54  C005  FFF7         	movff	strlen@s+1,tblptrh
  1789  000D58                     	if	0	;tblptru may be non-zero
  1790  000D58                     	endif
  1791  000D58                     	if	0	;tblptru may be non-zero
  1792  000D58                     	endif
  1793  000D58  0008               	tblrd		*
  1794  000D5A  50F5               	movf	tablat,w,c
  1795  000D5C  0900               	iorlw	0
  1796  000D5E  A4D8               	btfss	status,2,c
  1797  000D60  EFB4  F006         	goto	u251
  1798  000D64  EFB6  F006         	goto	u250
  1799  000D68                     u251:
  1800  000D68  EFA6  F006         	goto	l1276
  1801  000D6C                     u250:
  1802  000D6C  5006               	movf	strlen@a^0,w,c
  1803  000D6E  5C04               	subwf	strlen@s^0,w,c
  1804  000D70  6E04               	movwf	?_strlen^0,c
  1805  000D72  5007               	movf	(strlen@a+1)^0,w,c
  1806  000D74  5805               	subwfb	(strlen@s+1)^0,w,c
  1807  000D76  6E05               	movwf	(?_strlen+1)^0,c
  1808  000D78  0012               	return		;funcret
  1809  000D7A                     __end_of_strlen:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _ENVIA_CHAR *****************
  1813 ;; Defined at:
  1814 ;;		line 80 in file "LCD.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  dato            1    wreg     unsigned char 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  dato            1    4[COMRAM] unsigned char 
  1819 ;;  aux             1    5[COMRAM] unsigned char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1829 ;;      Params:         0       0       0       0       0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1832 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1833 ;;Total ram usage:        2 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 3
  1836 ;; This function calls:
  1837 ;;		_ENVIA_NIBBLE
  1838 ;;		_LEER_LCD
  1839 ;; This function is called by:
  1840 ;;		_ESCRIBE_MENSAJE2
  1841 ;;		_main
  1842 ;;		_ESCRIBE_MENSAJE
  1843 ;;		_GENERACARACTER
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text15
  1848  000DAE                     __ptext15:
  1849                           	callstack 0
  1850  000DAE                     _ENVIA_CHAR:
  1851                           	callstack 26
  1852                           
  1853                           ;incstack = 0
  1854                           ;ENVIA_CHAR@dato stored from wreg
  1855  000DAE  6E05               	movwf	ENVIA_CHAR@dato^0,c
  1856  000DB0                     
  1857                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATDbits.LATD0 = 1;
  1858  000DB0  808C               	bsf	140,0,c	;volatile
  1859  000DB2                     
  1860                           ;LCD.c: 84:  LEER_LCD();
  1861  000DB2  ECA7  F005         	call	_LEER_LCD	;wreg free
  1862  000DB6                     
  1863                           ;LCD.c: 85:  TRISD = 0x00;
  1864  000DB6  0E00               	movlw	0
  1865  000DB8  6E95               	movwf	149,c	;volatile
  1866  000DBA                     
  1867                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1868  000DBA  0E21               	movlw	33
  1869  000DBC                     u437:
  1870  000DBC  2EE8               	decfsz	wreg,f,c
  1871  000DBE  D7FE               	bra	u437
  1872  000DC0  F000               	nop	
  1873  000DC2                     
  1874                           ;LCD.c: 87:  LATDbits.LATD1 = 0;
  1875  000DC2  928C               	bcf	140,1,c	;volatile
  1876  000DC4                     
  1877                           ;LCD.c: 88:  LATDbits.LATD2 = 0;
  1878  000DC4  948C               	bcf	140,2,c	;volatile
  1879  000DC6                     
  1880                           ;LCD.c: 89:  LATDbits.LATD0 = 1;
  1881  000DC6  808C               	bsf	140,0,c	;volatile
  1882  000DC8                     
  1883                           ;LCD.c: 90:  aux = dato & 0xF0;
  1884  000DC8  5005               	movf	ENVIA_CHAR@dato^0,w,c
  1885  000DCA  0BF0               	andlw	240
  1886  000DCC  6E06               	movwf	ENVIA_CHAR@aux^0,c
  1887  000DCE                     
  1888                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
  1889  000DCE  5006               	movf	ENVIA_CHAR@aux^0,w,c
  1890  000DD0  EC32  F007         	call	_ENVIA_NIBBLE
  1891  000DD4                     
  1892                           ;LCD.c: 92:  aux = dato << 4;
  1893  000DD4  3805               	swapf	ENVIA_CHAR@dato^0,w,c
  1894  000DD6  0BF0               	andlw	240
  1895  000DD8  6E06               	movwf	ENVIA_CHAR@aux^0,c
  1896  000DDA                     
  1897                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
  1898  000DDA  5006               	movf	ENVIA_CHAR@aux^0,w,c
  1899  000DDC  EC32  F007         	call	_ENVIA_NIBBLE
  1900  000DE0  0012               	return		;funcret
  1901  000DE2                     __end_of_ENVIA_CHAR:
  1902                           	callstack 0
  1903                           
  1904 ;; *************** function _LEER_LCD *****************
  1905 ;; Defined at:
  1906 ;;		line 144 in file "LCD.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;		None
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  aux             1    3[COMRAM] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg, status,2, status,0
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1920 ;;      Params:         0       0       0       0       0       0       0       0       0
  1921 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1923 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1924 ;;Total ram usage:        1 bytes
  1925 ;; Hardware stack levels used: 1
  1926 ;; Hardware stack levels required when called: 2
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_ENVIA_CHAR
  1931 ;;		_ENVIA_LCD_CMD
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text16
  1936  000B4E                     __ptext16:
  1937                           	callstack 0
  1938  000B4E                     _LEER_LCD:
  1939                           	callstack 24
  1940  000B4E                     
  1941                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISD = 0xF8;
  1942  000B4E  0EF8               	movlw	248
  1943  000B50  6E95               	movwf	149,c	;volatile
  1944  000B52                     
  1945                           ;LCD.c: 148:  LATDbits.LATD0 = 0;
  1946  000B52  908C               	bcf	140,0,c	;volatile
  1947  000B54                     
  1948                           ;LCD.c: 149:  LATDbits.LATD1 = 1;
  1949  000B54  828C               	bsf	140,1,c	;volatile
  1950  000B56                     
  1951                           ;LCD.c: 150:  LATDbits.LATD2 = 1;
  1952  000B56  848C               	bsf	140,2,c	;volatile
  1953  000B58                     
  1954                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1955  000B58  0E21               	movlw	33
  1956  000B5A                     u447:
  1957  000B5A  2EE8               	decfsz	wreg,f,c
  1958  000B5C  D7FE               	bra	u447
  1959  000B5E  F000               	nop	
  1960  000B60                     
  1961                           ;LCD.c: 152:  aux = PORTD;
  1962  000B60  CF83 F004          	movff	3971,LEER_LCD@aux	;volatile
  1963  000B64                     
  1964                           ;LCD.c: 153:  LATDbits.LATD2 = 0;
  1965  000B64  948C               	bcf	140,2,c	;volatile
  1966  000B66                     
  1967                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1968  000B66  0E21               	movlw	33
  1969  000B68                     u457:
  1970  000B68  2EE8               	decfsz	wreg,f,c
  1971  000B6A  D7FE               	bra	u457
  1972  000B6C  F000               	nop	
  1973  000B6E                     
  1974                           ;LCD.c: 155:  LATDbits.LATD2 = 1;
  1975  000B6E  848C               	bsf	140,2,c	;volatile
  1976  000B70                     
  1977                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1978  000B70  0E21               	movlw	33
  1979  000B72                     u467:
  1980  000B72  2EE8               	decfsz	wreg,f,c
  1981  000B74  D7FE               	bra	u467
  1982  000B76  F000               	nop	
  1983  000B78                     
  1984                           ;LCD.c: 157:  LATDbits.LATD2 = 0;
  1985  000B78  948C               	bcf	140,2,c	;volatile
  1986  000B7A                     l906:
  1987                           
  1988                           ;LCD.c: 158:  aux = aux & 0x80;
  1989  000B7A  5004               	movf	LEER_LCD@aux^0,w,c
  1990  000B7C  0B80               	andlw	128
  1991  000B7E  6E04               	movwf	LEER_LCD@aux^0,c
  1992                           
  1993                           ;LCD.c: 159:  while(aux == 0x80)
  1994  000B80  EFD6  F005         	goto	l920
  1995  000B84                     l87:
  1996                           
  1997                           ;LCD.c: 160:         {;LCD.c: 161:             LATDbits.LATD2 = 1;
  1998  000B84  848C               	bsf	140,2,c	;volatile
  1999  000B86                     
  2000                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2001  000B86  0E21               	movlw	33
  2002  000B88                     u477:
  2003  000B88  2EE8               	decfsz	wreg,f,c
  2004  000B8A  D7FE               	bra	u477
  2005  000B8C  F000               	nop	
  2006  000B8E                     
  2007                           ;LCD.c: 163:             aux = PORTD;
  2008  000B8E  CF83 F004          	movff	3971,LEER_LCD@aux	;volatile
  2009  000B92                     
  2010                           ;LCD.c: 164:             LATDbits.LATD2 = 0;
  2011  000B92  948C               	bcf	140,2,c	;volatile
  2012                           
  2013                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2014  000B94  0E21               	movlw	33
  2015  000B96                     u487:
  2016  000B96  2EE8               	decfsz	wreg,f,c
  2017  000B98  D7FE               	bra	u487
  2018  000B9A  F000               	nop	
  2019  000B9C                     
  2020                           ;LCD.c: 166:             LATDbits.LATD2 = 1;
  2021  000B9C  848C               	bsf	140,2,c	;volatile
  2022                           
  2023                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2024  000B9E  0E21               	movlw	33
  2025  000BA0                     u497:
  2026  000BA0  2EE8               	decfsz	wreg,f,c
  2027  000BA2  D7FE               	bra	u497
  2028  000BA4  F000               	nop	
  2029  000BA6                     
  2030                           ;LCD.c: 168:             LATDbits.LATD2 = 0;
  2031  000BA6  948C               	bcf	140,2,c	;volatile
  2032  000BA8  EFBD  F005         	goto	l906
  2033  000BAC                     l920:
  2034                           
  2035                           ;LCD.c: 159:  while(aux == 0x80)
  2036  000BAC  0E80               	movlw	128
  2037  000BAE  1804               	xorwf	LEER_LCD@aux^0,w,c
  2038  000BB0  B4D8               	btfsc	status,2,c
  2039  000BB2  EFDD  F005         	goto	u11
  2040  000BB6  EFDF  F005         	goto	u10
  2041  000BBA                     u11:
  2042  000BBA  EFC2  F005         	goto	l87
  2043  000BBE                     u10:
  2044  000BBE  0012               	return		;funcret
  2045  000BC0                     __end_of_LEER_LCD:
  2046                           	callstack 0
  2047                           
  2048 ;; *************** function _ENVIA_NIBBLE *****************
  2049 ;; Defined at:
  2050 ;;		line 118 in file "LCD.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  dato            1    wreg     unsigned char 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  dato            1    3[COMRAM] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2064 ;;      Params:         0       0       0       0       0       0       0       0       0
  2065 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2067 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2068 ;;Total ram usage:        1 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; Hardware stack levels required when called: 2
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_ENVIA_CHAR
  2075 ;;		_LCD_CONFIG
  2076 ;;		_ENVIA_LCD_CMD
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text17
  2081  000E64                     __ptext17:
  2082                           	callstack 0
  2083  000E64                     _ENVIA_NIBBLE:
  2084                           	callstack 25
  2085                           
  2086                           ;incstack = 0
  2087                           ;ENVIA_NIBBLE@dato stored from wreg
  2088  000E64  6E04               	movwf	ENVIA_NIBBLE@dato^0,c
  2089  000E66                     
  2090                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATD &= 0x
      +                          0F;
  2091  000E66  0E0F               	movlw	15
  2092  000E68  168C               	andwf	140,f,c	;volatile
  2093                           
  2094                           ;LCD.c: 121:  dato &= 0xF0;
  2095  000E6A  0EF0               	movlw	240
  2096  000E6C  1604               	andwf	ENVIA_NIBBLE@dato^0,f,c
  2097                           
  2098                           ;LCD.c: 122:  LATD|= dato;
  2099  000E6E  5004               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  2100  000E70  128C               	iorwf	140,f,c	;volatile
  2101  000E72                     
  2102                           ;LCD.c: 123:  LATDbits.LATD2 = 1;
  2103  000E72  848C               	bsf	140,2,c	;volatile
  2104  000E74                     
  2105                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  2106  000E74  0E21               	movlw	33
  2107  000E76                     u507:
  2108  000E76  2EE8               	decfsz	wreg,f,c
  2109  000E78  D7FE               	bra	u507
  2110  000E7A  F000               	nop	
  2111  000E7C                     
  2112                           ;LCD.c: 125:  LATDbits.LATD2 = 0;
  2113  000E7C  948C               	bcf	140,2,c	;volatile
  2114  000E7E  0012               	return		;funcret
  2115  000E80                     __end_of_ENVIA_NIBBLE:
  2116                           	callstack 0
  2117                           
  2118 ;; *************** function _INT1_ISR *****************
  2119 ;; Defined at:
  2120 ;;		line 121 in file "maincode.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;		None
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;		None
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      void 
  2127 ;; Registers used:
  2128 ;;		wreg, status,2
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2134 ;;      Params:         0       0       0       0       0       0       0       0       0
  2135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2136 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2137 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2138 ;;Total ram usage:        3 bytes
  2139 ;; Hardware stack levels used: 1
  2140 ;; Hardware stack levels required when called: 1
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		Interrupt level 1
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	intcodelo
  2149  000018                     __pintcodelo:
  2150                           	callstack 0
  2151  000018                     _INT1_ISR:
  2152                           	callstack 24
  2153                           
  2154                           ;incstack = 0
  2155  000018  801C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2156  00001A  CFD8 F001          	movff	status,??_INT1_ISR
  2157  00001E  CFE8 F002          	movff	wreg,??_INT1_ISR+1
  2158  000022  CFE0 F003          	movff	bsr,??_INT1_ISR+2
  2159  000026                     
  2160                           ;maincode.c: 122:     INTCON3bits.INT1IF = 0;
  2161  000026  90F0               	bcf	240,0,c	;volatile
  2162  000028                     
  2163                           ;maincode.c: 123:     if(modo_CH1 == 0){
  2164  000028  5016               	movf	_modo_CH1^0,w,c
  2165  00002A  A4D8               	btfss	status,2,c
  2166  00002C  EF1A  F000         	goto	i1u24_21
  2167  000030  EF1C  F000         	goto	i1u24_20
  2168  000034                     i1u24_21:
  2169  000034  EF20  F000         	goto	i1l1252
  2170  000038                     i1u24_20:
  2171  000038                     
  2172                           ;maincode.c: 124:         modo_CH1 = 1;
  2173  000038  0E01               	movlw	1
  2174  00003A  6E16               	movwf	_modo_CH1^0,c
  2175                           
  2176                           ;maincode.c: 125:     }
  2177  00003C  EF22  F000         	goto	i1l202
  2178  000040                     i1l1252:
  2179                           
  2180                           ;maincode.c: 127:         modo_CH1 = 0;
  2181  000040  0E00               	movlw	0
  2182  000042  6E16               	movwf	_modo_CH1^0,c
  2183  000044                     i1l202:
  2184  000044  C003  FFE0         	movff	??_INT1_ISR+2,bsr
  2185  000048  C002  FFE8         	movff	??_INT1_ISR+1,wreg
  2186  00004C  C001  FFD8         	movff	??_INT1_ISR,status
  2187  000050  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2188  000052  0010               	retfie	
  2189  000054                     __end_of_INT1_ISR:
  2190                           	callstack 0
  2191                           
  2192 ;; *************** function _INT0_ISR *****************
  2193 ;; Defined at:
  2194 ;;		line 111 in file "maincode.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;		None
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;		None
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, status,2
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2208 ;;      Params:         0       0       0       0       0       0       0       0       0
  2209 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2211 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2212 ;;Total ram usage:        0 bytes
  2213 ;; Hardware stack levels used: 1
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		Interrupt level 2
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	intcode
  2222  000008                     __pintcode:
  2223                           	callstack 0
  2224  000008                     _INT0_ISR:
  2225                           	callstack 24
  2226                           
  2227                           ;incstack = 0
  2228  000008  821C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2229  00000A  EF21  F007         	goto	int_func
  2230                           
  2231                           	psect	intcode_body
  2232  000E42                     __pintcode_body:
  2233                           	callstack 24
  2234  000E42                     int_func:
  2235                           	callstack 24
  2236  000E42                     
  2237                           ;maincode.c: 112:     INTCONbits.INT0IF = 0;
  2238  000E42  92F2               	bcf	242,1,c	;volatile
  2239  000E44                     
  2240                           ;maincode.c: 113:     if(modo_CH0 == 0){
  2241  000E44  5017               	movf	_modo_CH0^0,w,c
  2242  000E46  A4D8               	btfss	status,2,c
  2243  000E48  EF28  F007         	goto	i2u23_41
  2244  000E4C  EF2A  F007         	goto	i2u23_40
  2245  000E50                     i2u23_41:
  2246  000E50  EF2E  F007         	goto	i2l1244
  2247  000E54                     i2u23_40:
  2248  000E54                     
  2249                           ;maincode.c: 114:         modo_CH0 = 1;
  2250  000E54  0E01               	movlw	1
  2251  000E56  6E17               	movwf	_modo_CH0^0,c
  2252                           
  2253                           ;maincode.c: 115:     }
  2254  000E58  EF30  F007         	goto	i2l195
  2255  000E5C                     i2l1244:
  2256                           
  2257                           ;maincode.c: 117:         modo_CH0 = 0;
  2258  000E5C  0E00               	movlw	0
  2259  000E5E  6E17               	movwf	_modo_CH0^0,c
  2260  000E60                     i2l195:
  2261  000E60  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2262  000E62  0011               	retfie		f
  2263  000E64                     __end_of_INT0_ISR:
  2264                           	callstack 0
  2265                           
  2266                           	psect	rparam
  2267  0000                     
  2268                           	psect	temp
  2269  00001C                     btemp:
  2270                           	callstack 0
  2271  00001C                     	ds	1
  2272  0000                     int$flags	set	btemp
  2273  0000                     wtemp8	set	btemp+1
  2274  0000                     ttemp5	set	btemp+1
  2275  0000                     ttemp6	set	btemp+4
  2276  0000                     ttemp7	set	btemp+8
  2277                           
  2278                           	psect	idloc
  2279                           
  2280                           ;Config register IDLOC0 @ 0x200000
  2281                           ;	unspecified, using default values
  2282  200000                     	org	2097152
  2283  200000  FF                 	db	255
  2284                           
  2285                           ;Config register IDLOC1 @ 0x200001
  2286                           ;	unspecified, using default values
  2287  200001                     	org	2097153
  2288  200001  FF                 	db	255
  2289                           
  2290                           ;Config register IDLOC2 @ 0x200002
  2291                           ;	unspecified, using default values
  2292  200002                     	org	2097154
  2293  200002  FF                 	db	255
  2294                           
  2295                           ;Config register IDLOC3 @ 0x200003
  2296                           ;	unspecified, using default values
  2297  200003                     	org	2097155
  2298  200003  FF                 	db	255
  2299                           
  2300                           ;Config register IDLOC4 @ 0x200004
  2301                           ;	unspecified, using default values
  2302  200004                     	org	2097156
  2303  200004  FF                 	db	255
  2304                           
  2305                           ;Config register IDLOC5 @ 0x200005
  2306                           ;	unspecified, using default values
  2307  200005                     	org	2097157
  2308  200005  FF                 	db	255
  2309                           
  2310                           ;Config register IDLOC6 @ 0x200006
  2311                           ;	unspecified, using default values
  2312  200006                     	org	2097158
  2313  200006  FF                 	db	255
  2314                           
  2315                           ;Config register IDLOC7 @ 0x200007
  2316                           ;	unspecified, using default values
  2317  200007                     	org	2097159
  2318  200007  FF                 	db	255
  2319                           
  2320                           	psect	config
  2321                           
  2322                           ;Config register CONFIG1L @ 0x300000
  2323                           ;	PLL Selection
  2324                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2325                           ;	PLL Enable Configuration bit
  2326                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2327                           ;	CPU System Clock Postscaler
  2328                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2329                           ;	Low Speed USB mode with 48 MHz system clock
  2330                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2331  300000                     	org	3145728
  2332  300000  00                 	db	0
  2333                           
  2334                           ;Config register CONFIG1H @ 0x300001
  2335                           ;	Oscillator Selection
  2336                           ;	FOSC = INTOSCIO, Internal oscillator
  2337                           ;	Primary Oscillator Shutdown
  2338                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  2339                           ;	Fail-Safe Clock Monitor
  2340                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2341                           ;	Internal/External Oscillator Switchover
  2342                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2343  300001                     	org	3145729
  2344  300001  08                 	db	8
  2345                           
  2346                           ;Config register CONFIG2L @ 0x300002
  2347                           ;	Power-up Timer Enable
  2348                           ;	nPWRTEN = ON, Power up timer enabled
  2349                           ;	Brown-out Reset Enable
  2350                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  2351                           ;	Brown-out Reset Voltage
  2352                           ;	BORV = 190, BOR set to 1.9V nominal
  2353                           ;	Low-Power Brown-out Reset
  2354                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2355  300002                     	org	3145730
  2356  300002  58                 	db	88
  2357                           
  2358                           ;Config register CONFIG2H @ 0x300003
  2359                           ;	Watchdog Timer Enable bits
  2360                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2361                           ;	Watchdog Timer Postscaler
  2362                           ;	WDTPS = 32768, 1:32768
  2363  300003                     	org	3145731
  2364  300003  3C                 	db	60
  2365                           
  2366                           ; Padding undefined space
  2367  300004                     	org	3145732
  2368  300004  FF                 	db	255
  2369                           
  2370                           ;Config register CONFIG3H @ 0x300005
  2371                           ;	CCP2 MUX bit
  2372                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2373                           ;	PORTB A/D Enable bit
  2374                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2375                           ;	Timer3 Clock Input MUX bit
  2376                           ;	T3CMX = RC0, T3CKI function is on RC0
  2377                           ;	SDO Output MUX bit
  2378                           ;	SDOMX = RB3, SDO function is on RB3
  2379                           ;	Master Clear Reset Pin Enable
  2380                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2381  300005                     	org	3145733
  2382  300005  D1                 	db	209
  2383                           
  2384                           ;Config register CONFIG4L @ 0x300006
  2385                           ;	Stack Full/Underflow Reset
  2386                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2387                           ;	Single-Supply ICSP Enable bit
  2388                           ;	LVP = OFF, Single-Supply ICSP disabled
  2389                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2390                           ;	ICPRT = OFF, ICPORT disabled
  2391                           ;	Extended Instruction Set Enable bit
  2392                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2393                           ;	Background Debugger Enable bit
  2394                           ;	DEBUG = 0x1, unprogrammed default
  2395  300006                     	org	3145734
  2396  300006  81                 	db	129
  2397                           
  2398                           ; Padding undefined space
  2399  300007                     	org	3145735
  2400  300007  FF                 	db	255
  2401                           
  2402                           ;Config register CONFIG5L @ 0x300008
  2403                           ;	Block 0 Code Protect
  2404                           ;	CP0 = OFF, Block 0 is not code-protected
  2405                           ;	Block 1 Code Protect
  2406                           ;	CP1 = OFF, Block 1 is not code-protected
  2407                           ;	Block 2 Code Protect
  2408                           ;	CP2 = OFF, Block 2 is not code-protected
  2409                           ;	Block 3 Code Protect
  2410                           ;	CP3 = OFF, Block 3 is not code-protected
  2411  300008                     	org	3145736
  2412  300008  0F                 	db	15
  2413                           
  2414                           ;Config register CONFIG5H @ 0x300009
  2415                           ;	Boot Block Code Protect
  2416                           ;	CPB = OFF, Boot block is not code-protected
  2417                           ;	Data EEPROM Code Protect
  2418                           ;	CPD = OFF, Data EEPROM is not code-protected
  2419  300009                     	org	3145737
  2420  300009  C0                 	db	192
  2421                           
  2422                           ;Config register CONFIG6L @ 0x30000A
  2423                           ;	Block 0 Write Protect
  2424                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2425                           ;	Block 1 Write Protect
  2426                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2427                           ;	Block 2 Write Protect
  2428                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2429                           ;	Block 3 Write Protect
  2430                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2431  30000A                     	org	3145738
  2432  30000A  0F                 	db	15
  2433                           
  2434                           ;Config register CONFIG6H @ 0x30000B
  2435                           ;	Configuration Registers Write Protect
  2436                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2437                           ;	Boot Block Write Protect
  2438                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2439                           ;	Data EEPROM Write Protect
  2440                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2441  30000B                     	org	3145739
  2442  30000B  E0                 	db	224
  2443                           
  2444                           ;Config register CONFIG7L @ 0x30000C
  2445                           ;	Block 0 Table Read Protect
  2446                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2447                           ;	Block 1 Table Read Protect
  2448                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2449                           ;	Block 2 Table Read Protect
  2450                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2451                           ;	Block 3 Table Read Protect
  2452                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2453  30000C                     	org	3145740
  2454  30000C  0F                 	db	15
  2455                           
  2456                           ;Config register CONFIG7H @ 0x30000D
  2457                           ;	Boot Block Table Read Protect
  2458                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2459  30000D                     	org	3145741
  2460  30000D  40                 	db	64
  2461                           tosu	equ	0xFFF
  2462                           tosh	equ	0xFFE
  2463                           tosl	equ	0xFFD
  2464                           stkptr	equ	0xFFC
  2465                           pclatu	equ	0xFFB
  2466                           pclath	equ	0xFFA
  2467                           pcl	equ	0xFF9
  2468                           tblptru	equ	0xFF8
  2469                           tblptrh	equ	0xFF7
  2470                           tblptrl	equ	0xFF6
  2471                           tablat	equ	0xFF5
  2472                           prodh	equ	0xFF4
  2473                           prodl	equ	0xFF3
  2474                           indf0	equ	0xFEF
  2475                           postinc0	equ	0xFEE
  2476                           postdec0	equ	0xFED
  2477                           preinc0	equ	0xFEC
  2478                           plusw0	equ	0xFEB
  2479                           fsr0h	equ	0xFEA
  2480                           fsr0l	equ	0xFE9
  2481                           wreg	equ	0xFE8
  2482                           indf1	equ	0xFE7
  2483                           postinc1	equ	0xFE6
  2484                           postdec1	equ	0xFE5
  2485                           preinc1	equ	0xFE4
  2486                           plusw1	equ	0xFE3
  2487                           fsr1h	equ	0xFE2
  2488                           fsr1l	equ	0xFE1
  2489                           bsr	equ	0xFE0
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           preinc2	equ	0xFDC
  2494                           plusw2	equ	0xFDB
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8

Data Sizes:
    Strings     47
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     19      27
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[5]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[14]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[5]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[14]), 

    ESCRIBE_MENSAJE2@cadena	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[5]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[5]), STR_2(CODE[8]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _configuro->_LCD_INIT
    _LCD_INIT->_CURSOR_ONOFF
    _LCD_INIT->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE2->_strlen
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _INT1_ISR in COMRAM

    None.

Critical Paths under _INT0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT1_ISR in BANK0

    None.

Critical Paths under _INT0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT1_ISR in BANK1

    None.

Critical Paths under _INT0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT1_ISR in BANK2

    None.

Critical Paths under _INT0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT1_ISR in BANK3

    None.

Critical Paths under _INT0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT1_ISR in BANK4

    None.

Critical Paths under _INT0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT1_ISR in BANK5

    None.

Critical Paths under _INT0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT1_ISR in BANK6

    None.

Critical Paths under _INT0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT1_ISR in BANK7

    None.

Critical Paths under _INT0_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3925
                                             17 COMRAM     2     2      0
                         _BORRAR_LCD
                         _ENVIA_CHAR
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
                          _configuro
                          _convierte
                    _tomamuestra_ADC
 ---------------------------------------------------------------------------------
 (1) _tomamuestra_ADC                                      3     3      0      15
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1625
                                             15 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              8 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0     525
                           _LCD_INIT
 ---------------------------------------------------------------------------------
 (2) _LCD_INIT                                             1     1      0     525
                                              7 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                              6 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                              6 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     512
                                              6 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _ENVIA_LCD_CMD                                        2     2      0     120
                                              4 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE2                                     6     4      2    1008
                                              7 COMRAM     6     4      2
                         _ENVIA_CHAR
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              4 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (5) _LEER_LCD                                             1     1      0      45
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INT1_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INT0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE2
     _ENVIA_CHAR
     _strlen
   _POS_CURSOR
     _ENVIA_LCD_CMD
   _configuro
     _LCD_INIT
       _BORRAR_LCD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _tomamuestra_ADC

 _INT1_ISR (ROOT)

 _INT0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      33        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     13      1B       1       28.7%
BITBIGSFRhhlll      2A      0       0      24        0.0%
BITBIGSFRllh        24      0       0      29        0.0%
BITBIGSFRhhhl       1C      0       0      21        0.0%
BITBIGSFRhhhh        D      0       0      20        0.0%
BITBIGSFRhhllhh      B      0       0      23        0.0%
BITBIGSFRllll        8      0       0      31        0.0%
BITBIGSFRlhh         6      0       0      27        0.0%
BITBIGSFRhll         5      0       0      26        0.0%
BITBIGSFRhhlh        2      0       0      22        0.0%
BITBIGSFRlllh        1      0       0      30        0.0%
BITBIGSFRhlh         1      0       0      25        0.0%
BITBIGSFRlhl         1      0       0      28        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1B      32        0.0%
DATA                 0      0      1B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Jun 07 21:07:58 2023

                      l26 0D3E                        l71 0DE0                        l39 0EA0  
                      l80 0E7E                        l56 0E40                        l74 0EA8  
                      l83 0DAC                        l68 0CBE                        l77 0C74  
                      l87 0B84                        l89 0BBE                        l97 0E10  
                      u10 0BBE                        u11 0BBA                        u20 0E24  
                      u21 0E20                        u30 0E3A                        u31 0E36  
                      bsr 000FE0             ENVIA_CHAR@aux 0006                       l162 0D04  
                     l170 0AB6                       l165 0A64                       l173 0AB8  
                     l176 0AD8                       l703 0B4C                       l713 0C22  
                     l706 0C1A                       l900 0B6E                       l910 0B8E  
                     l902 0B70                       l912 0B92                       l920 0BAC  
                     l904 0B78                       l922 0E66                       l914 0B9C  
                     l906 0B7A                       l930 0D7C                       l924 0E72  
                     l916 0BA6                       l908 0B86                       l940 0D90  
                     l932 0D7E                       l926 0E74                       l950 0DA6  
                     l942 0D92                       l934 0D82                       l928 0E7C  
                     l944 0D94                       l936 0D86                       l952 0E9A  
                     l960 0E3A                       l696 0B44                       l890 0B56  
                     l882 0D78                       l946 0D9A                       l938 0D8E  
                     l962 0EA2                       l954 0E14                       l970 0C3C  
                     l892 0B58                       l884 0B4E                       l948 0DA0  
                     l956 0E24                       l980 0C62                       l972 0C4A  
                     l964 0C24                       l894 0B60                       l886 0B52  
                     l990 0DB6                       l958 0E2A                       l982 0C68  
                     l974 0C50                       l966 0C28                       l896 0B64  
                     l888 0B54                       l992 0DBA                       l984 0C6E  
                     l976 0C56                       l968 0C2E                       l898 0B66  
                     l994 0DC2                       l986 0DB0                       l978 0C5C  
                     l996 0DC4                       l988 0DB2                       l998 0DC6  
                     u300 0BF0                       u140 0AC6                       u301 0BEC  
                     u141 0AC2                       u310 0C06                       u311 0C02  
                     u320 0D18                       u321 0D14                       u250 0D6C  
                     u330 0D36                       u251 0D68                       u331 0D32  
                     u340 0CBE                       u260 0AF4                       u341 0CBA  
                     u261 0AF0                       u270 0B12                       u350 08A8  
                     u407 0C34                       u271 0B0E                       u351 08A4  
                     u280 0B2E                       u360 0954                       u417 0C44  
                     u281 0B2A                       u361 0950                       u290 0BD2  
                     u507 0E76                       u427 0D88                       u291 0BCE  
                     u437 0DBC                       u447 0B5A                       u457 0B68  
                     u377 086C                       u467 0B72                       u387 0DE8  
                     u477 0B88                       u397 0DFA                       u487 0B96  
                     u497 0BA0               LEER_LCD@aux 0004                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0004            ENVIA_CHAR@dato 0005  
                    l1000 0DC8                      l1002 0DCE                      l1004 0DD4  
                    l1020 0DF0                      l1100 0CDE                      l1006 0DDA  
                    l1022 0DF4                      l1110 0CE8                      l1102 0CE0  
                    l1120 0CF2                      l1112 0CEA                      l1104 0CE2  
                    l1018 0DE2                      l1122 0CF4                      l1114 0CEC  
                    l1106 0CE4                      l1124 0CF8                      l1116 0CEE  
                    l1108 0CE6                      l1300 0B36                      l1132 0A68  
                    l1126 0CFC                      l1118 0CF0                      l1302 0B38  
                    l1310 0BDA                      l1134 0A6C                      l1142 0A84  
                    l1128 0D00                      l1304 0B3E                      l1320 0C14  
                    l1312 0BE2                      l1144 0AC6                      l1136 0A74  
                    l1330 0C76                      l1322 0D08                      l1090 0CD4  
                    l1082 0CC0                      l1314 0BF0                      l1306 0BC0  
                    l1138 0A7C                      l1340 0CAC                      l1332 0C86  
                    l1324 0D18                      l1092 0CD6                      l1084 0CCE  
                    l1316 0C06                      l1308 0BD2                      l1404 0A98  
                    l1334 0C86                      l1326 0D24                      l1094 0CD8  
                    l1086 0CD0                      l1318 0C0E                      l1342 09DC  
                    l1350 0862                      l1280 0D6C                      l1336 0C8E  
                    l1328 0D36                      l1096 0CDA                      l1088 0CD2  
                    l1360 0898                      l1352 0878                      l1344 0832  
                    l1274 0D40                      l1338 0CAA                      l1098 0CDC  
                    l1290 0AFC                      l1370 0928                      l1362 08A8  
                    l1354 087C                      l1346 0840                      l1276 0D4C  
                    l1292 0B04                      l1284 0ADA                      l1380 0990  
                    l1372 093E                      l1364 08D4                      l1356 0886  
                    l1348 084C                      l1278 0D50                      l1294 0B12  
                    l1286 0AE2                      l1382 09C8                      l1374 0944  
                    l1366 08E4                      l1358 0892                      l1296 0B18  
                    l1288 0AF4                      l1376 0954                      l1368 091C  
                    l1298 0B2E                      l1378 0980                      STR_1 0801  
                    STR_2 080F                      STR_3 0826                      STR_4 081F  
                    STR_5 0817                      STR_6 082B                      STR_7 081F  
                    STR_8 0817                      _LATD 000F8C                      _main 0832  
                    btemp 001C                      start 0054             ?_CURSOR_ONOFF 0001  
       ??_tomamuestra_ADC 0004              ___param_bank 000000           ??_ENVIA_LCD_CMD 0005  
        __end_of_LCD_INIT 0E12          __end_of_LEER_LCD 0BC0          __end_of_INT0_ISR 0E64  
        __end_of_INT1_ISR 0054                     ?_main 0001           __end_of___lwdiv 0B4E  
                   i1l202 0044           __end_of___lwmod 0C24                     i2l195 0E60  
                   _PORTD 000F83                     _TRISD 000F95               ?_POS_CURSOR 0007  
                   tablat 000FF5                     ttemp5 001D                     ttemp6 0020  
                   ttemp7 0024                     status 000FD8                     wtemp8 001D  
          ??_CURSOR_ONOFF 0007           __initialization 0E80              __end_of_main 09DC  
                  ??_main 0012             __activetblptr 000002                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _ANSELD 000F5E                    i1l1250 0038  
                  i1l1252 0040                    i1l1246 0026                    i1l1248 0028  
                  i2l1240 0E44                    i2l1242 0E54                    i2l1244 0E5C  
                  i2l1238 0E42                    _OSCCON 000FD3      __end_of_ENVIA_NIBBLE 0E80  
               ??___lwdiv 000D                 ??___lwmod 0008                    _millar 001B  
                  clear_0 0E86                    isa$std 000001                    _strlen 0D40  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0007                 ?_LCD_INIT 0001  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0E8C  
               ?_INT0_ISR 0001                 ?_INT1_ISR 0001              ??_LCD_CONFIG 0007  
           ___rparam_used 000001              ??_ENVIA_CHAR 0005            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0EAA          _ESCRIBE_MENSAJE2 0C76          ENVIA_LCD_CMD@aux 0006  
    __end_of_CURSOR_ONOFF 0E42        __end_of_LCD_CONFIG 0C76        __end_of_ENVIA_CHAR 0DE2  
         _tomamuestra_ADC 0A66                ??_LCD_INIT 0008                ??_LEER_LCD 0004  
        ENVIA_NIBBLE@dato 0004                ??_INT0_ISR 0001                ??_INT1_ISR 0001  
                 ?_strlen 0004                   i1u24_20 0038                   i1u24_21 0034  
                 i2u23_40 0E54                   i2u23_41 0E50              ??_POS_CURSOR 0008  
                 __Hparam 0000                   __Lparam 0000      tomamuestra_ADC@canal 0006  
       __end_of_configuro 0D06                   ___lwdiv 0ADA                   ___lwmod 0BC0  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0DAE         __end_of_convierte 0A66  
                 _decenas 0019                   __pcinit 0E80        __end_of_POS_CURSOR 0D40  
                 __ramtop 0800                   __ptext0 0832                   __ptext1 0A66  
                 __ptext2 09DC                   __ptext3 0BC0                   __ptext4 0ADA  
                 __ptext5 0CC0                   __ptext6 0DE2                   __ptext7 0C24  
                 __ptext8 0E12                   __ptext9 0E9A   __end_of_tomamuestra_ADC 0ADA  
          __pintcode_body 0E42              _ENVIA_NIBBLE 0E64      end_of_initialization 0E8C  
           __Lmediumconst 0000                   int_func 0E42                   postinc0 000FEE  
                 strlen@a 0006                   strlen@s 0004         ESCRIBE_MENSAJE2@i 000D  
               _TRISAbits 000F92                 _TRISBbits 000F93  __end_of_ESCRIBE_MENSAJE2 0CC0  
            _CURSOR_ONOFF 0E12        CURSOR_ONOFF@estado 0007            __end_of_strlen 0D7A  
           ??_CURSOR_HOME 0007          ?_tomamuestra_ADC 0001       start_initialization 0E80  
       ENVIA_LCD_CMD@dato 0005                  ??_strlen 0006               __pbssCOMRAM 0014  
     __end_of_CURSOR_HOME 0EA2          ___lwdiv@dividend 0009                 __pintcode 0008  
                ?___lwdiv 0009                  ?___lwmod 0004               __pintcodelo 0018  
               _configuro 0CC0               __smallconst 0800                 _convierte 09DC  
         convierte@numero 0010          ___lwdiv@quotient 000D                  _LCD_INIT 0DE2  
                _LEER_LCD 0B4E                  _INT0_ISR 0008                  _INT1_ISR 0018  
                _LATDbits 000F8C                  _RCONbits 000FD0            POS_CURSOR@fila 0008  
              ?_configuro 0001                _ADCON0bits 000FC2    ESCRIBE_MENSAJE2@cadena 0008  
              ?_convierte 0010                  _WPUBbits 000F85               _CURSOR_HOME 0E9A  
             _INTCON2bits 000FF1               _INTCON3bits 000FF0                  __Hrparam 0000  
       ?_ESCRIBE_MENSAJE2 0008                  __Lrparam 0000        ??_ESCRIBE_MENSAJE2 000A  
              _ANSELAbits 000F5B                _ANSELBbits 000F5C           ___lwdiv@divisor 000B  
                _centenas 001A           ___lwdiv@counter 000F                  __ptext10 0EA2  
                __ptext11 0D06                  __ptext12 0D7A                  __ptext13 0C76  
                __ptext14 0D40                  __ptext15 0DAE                  __ptext16 0B4E  
                __ptext17 0E64                _BORRAR_LCD 0EA2             _resultado_ADC 0014  
                _modo_CH0 0017                  _modo_CH1 0016                _LCD_CONFIG 0C24  
              _ENVIA_CHAR 0DAE                  isa$xinst 000000                  int$flags 001C  
                _unidades 0018             _ENVIA_LCD_CMD 0D7A               ??_configuro 0009  
             ??_convierte 0012                _INTCONbits 000FF2                  intlevel1 0000  
                intlevel2 0000          ___lwmod@dividend 0004            ?_ENVIA_LCD_CMD 0001  
         ___lwmod@divisor 0006           ___lwmod@counter 0008       ESCRIBE_MENSAJE2@tam 000C  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0D06  
             ?_LCD_CONFIG 0001               ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0007  
