

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Jun 22 20:55:56 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36  0000                     
    37                           ; Version 2.35
    38                           ; Generated 05/05/2021 GMT
    39                           ; 
    40                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F45K50 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _SSPSTAT	set	4039
    73  0000                     _SSP1ADD	set	4040
    74  0000                     _SSPCON2bits	set	4037
    75  0000                     _SSPADD	set	4040
    76  0000                     _SSPCON1	set	4038
    77  0000                     _LATD	set	3980
    78  0000                     _ANSELD	set	3934
    79  0000                     _PORTAbits	set	3968
    80  0000                     _PORTD	set	3971
    81  0000                     _LATDbits	set	3980
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISD	set	3989
    84  0000                     _PIR1bits	set	3998
    85  0000                     _SSPCON2	set	4037
    86  0000                     _SSP1CON1bits	set	4038
    87  0000                     _OSCCON	set	4051
    88  0000                     _LATAbits	set	3977
    89  0000                     _TRISBbits	set	3987
    90  0000                     _SSPBUF	set	4041
    91                           
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	callstack 0
    95  000800  00                 	db	0
    96  000801                     STR_4:
    97  000801  43                 	db	67	;'C'
    98  000802  6F                 	db	111	;'o'
    99  000803  6E                 	db	110	;'n'
   100  000804  20                 	db	32
   101  000805  50                 	db	80	;'P'
   102  000806  49                 	db	73	;'I'
   103  000807  43                 	db	67	;'C'
   104  000808  31                 	db	49	;'1'
   105  000809  38                 	db	56	;'8'
   106  00080A  46                 	db	70	;'F'
   107  00080B  34                 	db	52	;'4'
   108  00080C  35                 	db	53	;'5'
   109  00080D  4B                 	db	75	;'K'
   110  00080E  35                 	db	53	;'5'
   111  00080F  30                 	db	48	;'0'
   112  000810  00                 	db	0
   113  000811                     STR_1:
   114  000811  43                 	db	67	;'C'
   115  000812  69                 	db	105	;'i'
   116  000813  72                 	db	114	;'r'
   117  000814  63                 	db	99	;'c'
   118  000815  75                 	db	117	;'u'
   119  000816  69                 	db	105	;'i'
   120  000817  74                 	db	116	;'t'
   121  000818  6F                 	db	111	;'o'
   122  000819  20                 	db	32
   123  00081A  63                 	db	99	;'c'
   124  00081B  6F                 	db	111	;'o'
   125  00081C  6E                 	db	110	;'n'
   126  00081D  20                 	db	32
   127  00081E  65                 	db	101	;'e'
   128  00081F  6C                 	db	108	;'l'
   129  000820  00                 	db	0
   130  000821                     STR_2:
   131  000821  20                 	db	32
   132  000822  73                 	db	115	;'s'
   133  000823  65                 	db	101	;'e'
   134  000824  6E                 	db	110	;'n'
   135  000825  73                 	db	115	;'s'
   136  000826  6F                 	db	111	;'o'
   137  000827  72                 	db	114	;'r'
   138  000828  20                 	db	32
   139  000829  44                 	db	68	;'D'
   140  00082A  48                 	db	72	;'H'
   141  00082B  54                 	db	84	;'T'
   142  00082C  32                 	db	50	;'2'
   143  00082D  32                 	db	50	;'2'
   144  00082E  00                 	db	0
   145  00082F                     STR_3:
   146  00082F  4C                 	db	76	;'L'
   147  000830  63                 	db	99	;'c'
   148  000831  64                 	db	100	;'d'
   149  000832  20                 	db	32
   150  000833  31                 	db	49	;'1'
   151  000834  36                 	db	54	;'6'
   152  000835  78                 	db	120	;'x'
   153  000836  32                 	db	50	;'2'
   154  000837  20                 	db	32
   155  000838  49                 	db	73	;'I'
   156  000839  32                 	db	50	;'2'
   157  00083A  43                 	db	67	;'C'
   158  00083B  00                 	db	0
   159  00083C  00                 	db	0	; dummy byte at the end
   160  0000                     
   161                           ; #config settings
   162                           
   163                           	psect	cinit
   164  000DEC                     __pcinit:
   165                           	callstack 0
   166  000DEC                     start_initialization:
   167                           	callstack 0
   168  000DEC                     __initialization:
   169                           	callstack 0
   170  000DEC                     end_of_initialization:
   171                           	callstack 0
   172  000DEC                     __end_of__initialization:
   173                           	callstack 0
   174  000DEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   175  000DEE  6EF8               	movwf	tblptru,c
   176  000DF0  0100               	movlb	0
   177  000DF2  EFA9  F005         	goto	_main	;jump to C main() function
   178                           
   179                           	psect	cstackCOMRAM
   180  000001                     __pcstackCOMRAM:
   181                           	callstack 0
   182  000001                     ?_strlen:
   183                           	callstack 0
   184  000001                     ENVIA_NIBBLE@dato:
   185                           	callstack 0
   186  000001                     LEER_LCD@aux:
   187                           	callstack 0
   188  000001                     I2C_Write@data:
   189                           	callstack 0
   190  000001                     strlen@s:
   191                           	callstack 0
   192                           
   193                           ; 2 bytes @ 0x0
   194  000001                     	ds	1
   195  000002                     ENVIA_CHAR@dato:
   196                           	callstack 0
   197  000002                     ENVIA_LCD_CMD@dato:
   198                           	callstack 0
   199  000002                     Lcd_I2C_Write@dato:
   200                           	callstack 0
   201                           
   202                           ; 1 bytes @ 0x1
   203  000002                     	ds	1
   204  000003                     ENVIA_CHAR@aux:
   205                           	callstack 0
   206  000003                     ENVIA_LCD_CMD@aux:
   207                           	callstack 0
   208  000003                     Lcd_Port@nibble:
   209                           	callstack 0
   210  000003                     strlen@a:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x2
   214  000003                     	ds	1
   215  000004                     ??_LCD_CONFIG:
   216  000004                     POS_CURSOR@columna:
   217                           	callstack 0
   218  000004                     CURSOR_ONOFF@estado:
   219                           	callstack 0
   220  000004                     Lcd_Port@add:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0x3
   224  000004                     	ds	1
   225  000005                     ??_LCD_INIT:
   226  000005                     POS_CURSOR@fila:
   227                           	callstack 0
   228  000005                     Lcd_Port@datos:
   229                           	callstack 0
   230  000005                     ESCRIBE_MENSAJE2@cadena:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x4
   234  000005                     	ds	1
   235  000006                     Lcd_Send_Byte@n:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x5
   239  000006                     	ds	1
   240  000007                     ??_ESCRIBE_MENSAJE2:
   241  000007                     Lcd_Send_Byte@add:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0x6
   245  000007                     	ds	1
   246  000008                     ??_Lcd_Init:
   247  000008                     Lcd_Set_Cursor@col:
   248                           	callstack 0
   249  000008                     Lcd_Write_String@str:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0x7
   253  000008                     	ds	1
   254  000009                     ??_Lcd_Set_Cursor:
   255  000009                     ESCRIBE_MENSAJE2@tam:
   256                           	callstack 0
   257  000009                     Lcd_Init@i:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x8
   261  000009                     	ds	1
   262  00000A                     ESCRIBE_MENSAJE2@i:
   263                           	callstack 0
   264                           
   265                           ; 1 bytes @ 0x9
   266  00000A                     	ds	1
   267  00000B                     Lcd_Set_Cursor@row:
   268                           	callstack 0
   269                           
   270                           ; 1 bytes @ 0xA
   271  00000B                     	ds	1
   272  00000C                     
   273                           ; 1 bytes @ 0xB
   274 ;;
   275 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   276 ;;
   277 ;; *************** function _main *****************
   278 ;; Defined at:
   279 ;;		line 28 in file "maincode2.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;		None
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   288 ;; Tracked objects:
   289 ;;		On entry : 0/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   293 ;;      Params:         0       0       0       0       0       0       0       0       0
   294 ;;      Locals:         0       0       0       0       0       0       0       0       0
   295 ;;      Temps:          0       0       0       0       0       0       0       0       0
   296 ;;      Totals:         0       0       0       0       0       0       0       0       0
   297 ;;Total ram usage:        0 bytes
   298 ;; Hardware stack levels required when called: 6
   299 ;; This function calls:
   300 ;;		_Lcd_Set_Cursor
   301 ;;		_Lcd_Write_String
   302 ;;		_configuro
   303 ;;		_splash_msg
   304 ;; This function is called by:
   305 ;;		Startup code after reset
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           	psect	text0
   310  000B52                     __ptext0:
   311                           	callstack 0
   312  000B52                     _main:
   313                           	callstack 25
   314  000B52                     
   315                           ;maincode2.c: 29:     configuro();
   316  000B52  EC99  F006         	call	_configuro	;wreg free
   317  000B56                     
   318                           ;maincode2.c: 30:     splash_msg();
   319  000B56  EC82  F006         	call	_splash_msg	;wreg free
   320  000B5A                     l1632:
   321                           
   322                           ;maincode2.c: 32:         Lcd_Set_Cursor(1,1);
   323  000B5A  0E01               	movlw	1
   324  000B5C  6E08               	movwf	Lcd_Set_Cursor@col^0,c
   325  000B5E  0E01               	movlw	1
   326  000B60  ECE1  F004         	call	_Lcd_Set_Cursor
   327                           
   328                           ;maincode2.c: 33:         Lcd_Write_String("Lcd 16x2 I2C");
   329  000B64  0E2F               	movlw	low STR_3
   330  000B66  6E08               	movwf	Lcd_Write_String@str^0,c
   331  000B68  0E08               	movlw	high STR_3
   332  000B6A  6E09               	movwf	(Lcd_Write_String@str+1)^0,c
   333  000B6C  EC01  F006         	call	_Lcd_Write_String	;wreg free
   334  000B70                     
   335                           ;maincode2.c: 34:         Lcd_Set_Cursor(2,1);
   336  000B70  0E01               	movlw	1
   337  000B72  6E08               	movwf	Lcd_Set_Cursor@col^0,c
   338  000B74  0E02               	movlw	2
   339  000B76  ECE1  F004         	call	_Lcd_Set_Cursor
   340  000B7A                     
   341                           ;maincode2.c: 35:         Lcd_Write_String("Con PIC18F45K50");
   342  000B7A  0E01               	movlw	low STR_4
   343  000B7C  6E08               	movwf	Lcd_Write_String@str^0,c
   344  000B7E  0E08               	movlw	high STR_4
   345  000B80  6E09               	movwf	(Lcd_Write_String@str+1)^0,c
   346  000B82  EC01  F006         	call	_Lcd_Write_String	;wreg free
   347  000B86  EFAD  F005         	goto	l1632
   348  000B8A  EF00  F000         	goto	start
   349  000B8E                     __end_of_main:
   350                           	callstack 0
   351                           
   352 ;; *************** function _splash_msg *****************
   353 ;; Defined at:
   354 ;;		line 19 in file "maincode2.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;		None
   357 ;; Auto vars:     Size  Location     Type
   358 ;;		None
   359 ;; Return value:  Size  Location     Type
   360 ;;                  1    wreg      void 
   361 ;; Registers used:
   362 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   363 ;; Tracked objects:
   364 ;;		On entry : 0/0
   365 ;;		On exit  : 0/0
   366 ;;		Unchanged: 0/0
   367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   368 ;;      Params:         0       0       0       0       0       0       0       0       0
   369 ;;      Locals:         0       0       0       0       0       0       0       0       0
   370 ;;      Temps:          0       0       0       0       0       0       0       0       0
   371 ;;      Totals:         0       0       0       0       0       0       0       0       0
   372 ;;Total ram usage:        0 bytes
   373 ;; Hardware stack levels used: 1
   374 ;; Hardware stack levels required when called: 3
   375 ;; This function calls:
   376 ;;		_ESCRIBE_MENSAJE2
   377 ;;		_POS_CURSOR
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           	psect	text1
   384  000D04                     __ptext1:
   385                           	callstack 0
   386  000D04                     _splash_msg:
   387                           	callstack 27
   388  000D04                     
   389                           ;maincode2.c: 20:     POS_CURSOR(1,0);
   390  000D04  0E00               	movlw	0
   391  000D06  6E04               	movwf	POS_CURSOR@columna^0,c
   392  000D08  0E01               	movlw	1
   393  000D0A  ECC7  F005         	call	_POS_CURSOR
   394  000D0E                     
   395                           ;maincode2.c: 21:     ESCRIBE_MENSAJE2("Circuito con el");
   396  000D0E  0E11               	movlw	low STR_1
   397  000D10  6E05               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   398  000D12  0E08               	movlw	high STR_1
   399  000D14  6E06               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   400  000D16  EC84  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   401  000D1A                     
   402                           ;maincode2.c: 22:     POS_CURSOR(2,0);
   403  000D1A  0E00               	movlw	0
   404  000D1C  6E04               	movwf	POS_CURSOR@columna^0,c
   405  000D1E  0E02               	movlw	2
   406  000D20  ECC7  F005         	call	_POS_CURSOR
   407                           
   408                           ;maincode2.c: 23:     ESCRIBE_MENSAJE2(" sensor DHT22");
   409  000D24  0E21               	movlw	low STR_2
   410  000D26  6E05               	movwf	ESCRIBE_MENSAJE2@cadena^0,c
   411  000D28  0E08               	movlw	high STR_2
   412  000D2A  6E06               	movwf	(ESCRIBE_MENSAJE2@cadena+1)^0,c
   413  000D2C  EC84  F005         	call	_ESCRIBE_MENSAJE2	;wreg free
   414  000D30  0012               	return		;funcret
   415  000D32                     __end_of_splash_msg:
   416                           	callstack 0
   417                           
   418 ;; *************** function _POS_CURSOR *****************
   419 ;; Defined at:
   420 ;;		line 5 in file "LCD.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;  fila            1    wreg     unsigned char 
   423 ;;  columna         1    3[COMRAM] unsigned char 
   424 ;; Auto vars:     Size  Location     Type
   425 ;;  fila            1    4[COMRAM] unsigned char 
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg, status,2, status,0, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   435 ;;      Params:         1       0       0       0       0       0       0       0       0
   436 ;;      Locals:         1       0       0       0       0       0       0       0       0
   437 ;;      Temps:          0       0       0       0       0       0       0       0       0
   438 ;;      Totals:         2       0       0       0       0       0       0       0       0
   439 ;;Total ram usage:        2 bytes
   440 ;; Hardware stack levels used: 1
   441 ;; Hardware stack levels required when called: 2
   442 ;; This function calls:
   443 ;;		_ENVIA_LCD_CMD
   444 ;; This function is called by:
   445 ;;		_splash_msg
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text2
   450  000B8E                     __ptext2:
   451                           	callstack 0
   452  000B8E                     _POS_CURSOR:
   453                           	callstack 27
   454                           
   455                           ;incstack = 0
   456                           ;POS_CURSOR@fila stored from wreg
   457  000B8E  6E05               	movwf	POS_CURSOR@fila^0,c
   458  000B90                     
   459                           ;LCD.c: 5: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 6: {;LCD.c: 
      +                          7:  if(fila == 1)
   460  000B90  0405               	decf	POS_CURSOR@fila^0,w,c
   461  000B92  A4D8               	btfss	status,2,c
   462  000B94  EFCE  F005         	goto	u441
   463  000B98  EFD0  F005         	goto	u440
   464  000B9C                     u441:
   465  000B9C  EFD6  F005         	goto	l1534
   466  000BA0                     u440:
   467  000BA0                     
   468                           ;LCD.c: 8:  {;LCD.c: 9:   ENVIA_LCD_CMD(0x80+columna);
   469  000BA0  5004               	movf	POS_CURSOR@columna^0,w,c
   470  000BA2  0F80               	addlw	128
   471  000BA4  EC38  F006         	call	_ENVIA_LCD_CMD
   472                           
   473                           ;LCD.c: 10:  }
   474  000BA8  EFE3  F005         	goto	l26
   475  000BAC                     l1534:
   476  000BAC  0E02               	movlw	2
   477  000BAE  1805               	xorwf	POS_CURSOR@fila^0,w,c
   478  000BB0  A4D8               	btfss	status,2,c
   479  000BB2  EFDD  F005         	goto	u451
   480  000BB6  EFDF  F005         	goto	u450
   481  000BBA                     u451:
   482  000BBA  EFE3  F005         	goto	l26
   483  000BBE                     u450:
   484  000BBE                     
   485                           ;LCD.c: 12:  {;LCD.c: 13:   ENVIA_LCD_CMD(0xC0+columna);
   486  000BBE  5004               	movf	POS_CURSOR@columna^0,w,c
   487  000BC0  0FC0               	addlw	192
   488  000BC2  EC38  F006         	call	_ENVIA_LCD_CMD
   489  000BC6                     l26:
   490  000BC6  0012               	return		;funcret
   491  000BC8                     __end_of_POS_CURSOR:
   492                           	callstack 0
   493                           
   494 ;; *************** function _ESCRIBE_MENSAJE2 *****************
   495 ;; Defined at:
   496 ;;		line 69 in file "LCD.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;  cadena          2    4[COMRAM] PTR const unsigned char 
   499 ;;		 -> STR_2(14), STR_1(16), 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  i               1    9[COMRAM] unsigned char 
   502 ;;  tam             1    8[COMRAM] unsigned char 
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   512 ;;      Params:         2       0       0       0       0       0       0       0       0
   513 ;;      Locals:         2       0       0       0       0       0       0       0       0
   514 ;;      Temps:          2       0       0       0       0       0       0       0       0
   515 ;;      Totals:         6       0       0       0       0       0       0       0       0
   516 ;;Total ram usage:        6 bytes
   517 ;; Hardware stack levels used: 1
   518 ;; Hardware stack levels required when called: 2
   519 ;; This function calls:
   520 ;;		_ENVIA_CHAR
   521 ;;		_strlen
   522 ;; This function is called by:
   523 ;;		_splash_msg
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           	psect	text3
   528  000B08                     __ptext3:
   529                           	callstack 0
   530  000B08                     _ESCRIBE_MENSAJE2:
   531                           	callstack 27
   532  000B08                     
   533                           ;LCD.c: 69: void ESCRIBE_MENSAJE2(const char *cadena);LCD.c: 70: {;LCD.c: 71:     unsign
      +                          ed char tam;;LCD.c: 72:     tam = strlen(cadena);
   534  000B08  C005  F001         	movff	ESCRIBE_MENSAJE2@cadena,strlen@s
   535  000B0C  C006  F002         	movff	ESCRIBE_MENSAJE2@cadena+1,strlen@s+1
   536  000B10  ECE4  F005         	call	_strlen	;wreg free
   537  000B14  5001               	movf	?_strlen^0,w,c
   538  000B16  6E09               	movwf	ESCRIBE_MENSAJE2@tam^0,c
   539  000B18                     
   540                           ;LCD.c: 74:  for(i = 0; i<tam; i++)
   541  000B18  0E00               	movlw	0
   542  000B1A  6E0A               	movwf	ESCRIBE_MENSAJE2@i^0,c
   543  000B1C  EF9F  F005         	goto	l1548
   544  000B20                     l1544:
   545                           
   546                           ;LCD.c: 75:  {;LCD.c: 76:   ENVIA_CHAR(cadena[i]);
   547  000B20  500A               	movf	ESCRIBE_MENSAJE2@i^0,w,c
   548  000B22  2405               	addwf	ESCRIBE_MENSAJE2@cadena^0,w,c
   549  000B24  6E07               	movwf	??_ESCRIBE_MENSAJE2^0,c
   550  000B26  0E00               	movlw	0
   551  000B28  2006               	addwfc	(ESCRIBE_MENSAJE2@cadena+1)^0,w,c
   552  000B2A  6E08               	movwf	(??_ESCRIBE_MENSAJE2+1)^0,c
   553  000B2C  C007  FFF6         	movff	??_ESCRIBE_MENSAJE2,tblptrl
   554  000B30  C008  FFF7         	movff	??_ESCRIBE_MENSAJE2+1,tblptrh
   555  000B34                     	if	0	;tblptru may be non-zero
   556  000B34                     	endif
   557  000B34                     	if	0	;tblptru may be non-zero
   558  000B34                     	endif
   559  000B34  0008               	tblrd		*
   560  000B36  50F5               	movf	tablat,w,c
   561  000B38  EC1E  F006         	call	_ENVIA_CHAR
   562  000B3C                     
   563                           ;LCD.c: 77:  }
   564  000B3C  2A0A               	incf	ESCRIBE_MENSAJE2@i^0,f,c
   565  000B3E                     l1548:
   566  000B3E  5009               	movf	ESCRIBE_MENSAJE2@tam^0,w,c
   567  000B40  5C0A               	subwf	ESCRIBE_MENSAJE2@i^0,w,c
   568  000B42  A0D8               	btfss	status,0,c
   569  000B44  EFA6  F005         	goto	u461
   570  000B48  EFA8  F005         	goto	u460
   571  000B4C                     u461:
   572  000B4C  EF90  F005         	goto	l1544
   573  000B50                     u460:
   574  000B50  0012               	return		;funcret
   575  000B52                     __end_of_ESCRIBE_MENSAJE2:
   576                           	callstack 0
   577                           
   578 ;; *************** function _strlen *****************
   579 ;; Defined at:
   580 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;  s               2    0[COMRAM] PTR const unsigned char 
   583 ;;		 -> STR_2(14), STR_1(16), 
   584 ;; Auto vars:     Size  Location     Type
   585 ;;  a               2    2[COMRAM] PTR const unsigned char 
   586 ;;		 -> STR_2(14), STR_1(16), 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  2    0[COMRAM] unsigned int 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   596 ;;      Params:         2       0       0       0       0       0       0       0       0
   597 ;;      Locals:         2       0       0       0       0       0       0       0       0
   598 ;;      Temps:          0       0       0       0       0       0       0       0       0
   599 ;;      Totals:         4       0       0       0       0       0       0       0       0
   600 ;;Total ram usage:        4 bytes
   601 ;; Hardware stack levels used: 1
   602 ;; This function calls:
   603 ;;		Nothing
   604 ;; This function is called by:
   605 ;;		_ESCRIBE_MENSAJE2
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           	psect	text4
   610  000BC8                     __ptext4:
   611                           	callstack 0
   612  000BC8                     _strlen:
   613                           	callstack 28
   614  000BC8  C001  F003         	movff	strlen@s,strlen@a
   615  000BCC  C002  F004         	movff	strlen@s+1,strlen@a+1
   616  000BD0  EFEC  F005         	goto	l1522
   617  000BD4                     l1520:
   618  000BD4  4A01               	infsnz	strlen@s^0,f,c
   619  000BD6  2A02               	incf	(strlen@s+1)^0,f,c
   620  000BD8                     l1522:
   621  000BD8  C001  FFF6         	movff	strlen@s,tblptrl
   622  000BDC  C002  FFF7         	movff	strlen@s+1,tblptrh
   623  000BE0                     	if	0	;tblptru may be non-zero
   624  000BE0                     	endif
   625  000BE0                     	if	0	;tblptru may be non-zero
   626  000BE0                     	endif
   627  000BE0  0008               	tblrd		*
   628  000BE2  50F5               	movf	tablat,w,c
   629  000BE4  0900               	iorlw	0
   630  000BE6  A4D8               	btfss	status,2,c
   631  000BE8  EFF8  F005         	goto	u431
   632  000BEC  EFFA  F005         	goto	u430
   633  000BF0                     u431:
   634  000BF0  EFEA  F005         	goto	l1520
   635  000BF4                     u430:
   636  000BF4  5003               	movf	strlen@a^0,w,c
   637  000BF6  5C01               	subwf	strlen@s^0,w,c
   638  000BF8  6E01               	movwf	?_strlen^0,c
   639  000BFA  5004               	movf	(strlen@a+1)^0,w,c
   640  000BFC  5802               	subwfb	(strlen@s+1)^0,w,c
   641  000BFE  6E02               	movwf	(?_strlen+1)^0,c
   642  000C00  0012               	return		;funcret
   643  000C02                     __end_of_strlen:
   644                           	callstack 0
   645                           
   646 ;; *************** function _ENVIA_CHAR *****************
   647 ;; Defined at:
   648 ;;		line 80 in file "LCD.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  dato            1    wreg     unsigned char 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  dato            1    1[COMRAM] unsigned char 
   653 ;;  aux             1    2[COMRAM] unsigned char 
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, status,2, status,0, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   663 ;;      Params:         0       0       0       0       0       0       0       0       0
   664 ;;      Locals:         2       0       0       0       0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0
   666 ;;      Totals:         2       0       0       0       0       0       0       0       0
   667 ;;Total ram usage:        2 bytes
   668 ;; Hardware stack levels used: 1
   669 ;; Hardware stack levels required when called: 1
   670 ;; This function calls:
   671 ;;		_ENVIA_NIBBLE
   672 ;;		_LEER_LCD
   673 ;; This function is called by:
   674 ;;		_ESCRIBE_MENSAJE2
   675 ;;		_ESCRIBE_MENSAJE
   676 ;;		_GENERACARACTER
   677 ;;		_LCD_ESCRIBE_VAR_CHAR
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text5
   682  000C3C                     __ptext5:
   683                           	callstack 0
   684  000C3C                     _ENVIA_CHAR:
   685                           	callstack 27
   686                           
   687                           ;incstack = 0
   688                           ;ENVIA_CHAR@dato stored from wreg
   689  000C3C  6E02               	movwf	ENVIA_CHAR@dato^0,c
   690  000C3E                     
   691                           ;LCD.c: 80: void ENVIA_CHAR(unsigned char dato);LCD.c: 81: {;LCD.c: 82:  unsigned char a
      +                          ux;;LCD.c: 83:  LATDbits.LATD0 = 1;
   692  000C3E  808C               	bsf	140,0,c	;volatile
   693  000C40                     
   694                           ;LCD.c: 84:  LEER_LCD();
   695  000C40  EC22  F005         	call	_LEER_LCD	;wreg free
   696  000C44                     
   697                           ;LCD.c: 85:  TRISD = 0x00;
   698  000C44  0E00               	movlw	0
   699  000C46  6E95               	movwf	149,c	;volatile
   700  000C48                     
   701                           ;LCD.c: 86:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
   702  000C48  0E21               	movlw	33
   703  000C4A                     u507:
   704  000C4A  2EE8               	decfsz	wreg,f,c
   705  000C4C  D7FE               	bra	u507
   706  000C4E  F000               	nop	
   707  000C50                     
   708                           ;LCD.c: 87:  LATDbits.LATD1 = 0;
   709  000C50  928C               	bcf	140,1,c	;volatile
   710  000C52                     
   711                           ;LCD.c: 88:  LATDbits.LATD2 = 0;
   712  000C52  948C               	bcf	140,2,c	;volatile
   713  000C54                     
   714                           ;LCD.c: 89:  LATDbits.LATD0 = 1;
   715  000C54  808C               	bsf	140,0,c	;volatile
   716  000C56                     
   717                           ;LCD.c: 90:  aux = dato & 0xF0;
   718  000C56  5002               	movf	ENVIA_CHAR@dato^0,w,c
   719  000C58  0BF0               	andlw	240
   720  000C5A  6E03               	movwf	ENVIA_CHAR@aux^0,c
   721  000C5C                     
   722                           ;LCD.c: 91:  ENVIA_NIBBLE(aux);
   723  000C5C  5003               	movf	ENVIA_CHAR@aux^0,w,c
   724  000C5E  ECAC  F006         	call	_ENVIA_NIBBLE
   725  000C62                     
   726                           ;LCD.c: 92:  aux = dato << 4;
   727  000C62  3802               	swapf	ENVIA_CHAR@dato^0,w,c
   728  000C64  0BF0               	andlw	240
   729  000C66  6E03               	movwf	ENVIA_CHAR@aux^0,c
   730  000C68                     
   731                           ;LCD.c: 93:  ENVIA_NIBBLE(aux);
   732  000C68  5003               	movf	ENVIA_CHAR@aux^0,w,c
   733  000C6A  ECAC  F006         	call	_ENVIA_NIBBLE
   734  000C6E  0012               	return		;funcret
   735  000C70                     __end_of_ENVIA_CHAR:
   736                           	callstack 0
   737                           
   738 ;; *************** function _configuro *****************
   739 ;; Defined at:
   740 ;;		line 8 in file "maincode2.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   754 ;;      Params:         0       0       0       0       0       0       0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0       0       0
   757 ;;      Totals:         0       0       0       0       0       0       0       0       0
   758 ;;Total ram usage:        0 bytes
   759 ;; Hardware stack levels used: 1
   760 ;; Hardware stack levels required when called: 5
   761 ;; This function calls:
   762 ;;		_LCD_INIT
   763 ;;		_Lcd_Init
   764 ;; This function is called by:
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text6
   770  000D32                     __ptext6:
   771                           	callstack 0
   772  000D32                     _configuro:
   773                           	callstack 25
   774  000D32                     
   775                           ;maincode2.c: 9:     OSCCON = 0x52;
   776  000D32  0E52               	movlw	82
   777  000D34  6ED3               	movwf	211,c	;volatile
   778                           
   779                           ;maincode2.c: 10:     TRISD = 0x00;
   780  000D36  0E00               	movlw	0
   781  000D38  6E95               	movwf	149,c	;volatile
   782                           
   783                           ;maincode2.c: 11:     ANSELD = 0x00;
   784  000D3A  0E00               	movlw	0
   785  000D3C  010F               	movlb	15	; () banked
   786  000D3E  6F5E               	movwf	94,b	;volatile
   787  000D40                     
   788                           ; BSR set to: 15
   789                           ;maincode2.c: 12:     SSP1CON1bits.SSPEN = 1;
   790  000D40  8AC6               	bsf	198,5,c	;volatile
   791                           
   792                           ;maincode2.c: 13:     SSP1CON1bits.SSPM = 0b1000;
   793  000D42  50C6               	movf	198,w,c	;volatile
   794  000D44  0BF0               	andlw	-16
   795  000D46  0908               	iorlw	8
   796  000D48  6EC6               	movwf	198,c	;volatile
   797                           
   798                           ;maincode2.c: 14:     SSP1ADD = 119;
   799  000D4A  0E77               	movlw	119
   800  000D4C  6EC8               	movwf	200,c	;volatile
   801  000D4E                     
   802                           ; BSR set to: 15
   803                           ;maincode2.c: 15:     LCD_INIT();
   804  000D4E  EC52  F006         	call	_LCD_INIT	;wreg free
   805  000D52                     
   806                           ;maincode2.c: 16:     Lcd_Init();
   807  000D52  EC1F  F004         	call	_Lcd_Init	;wreg free
   808  000D56  0012               	return		;funcret
   809  000D58                     __end_of_configuro:
   810                           	callstack 0
   811                           
   812 ;; *************** function _Lcd_Init *****************
   813 ;; Defined at:
   814 ;;		line 43 in file "i2c_lcd.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  i               1    8[COMRAM] unsigned char 
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   828 ;;      Params:         0       0       0       0       0       0       0       0       0
   829 ;;      Locals:         1       0       0       0       0       0       0       0       0
   830 ;;      Temps:          1       0       0       0       0       0       0       0       0
   831 ;;      Totals:         2       0       0       0       0       0       0       0       0
   832 ;;Total ram usage:        2 bytes
   833 ;; Hardware stack levels used: 1
   834 ;; Hardware stack levels required when called: 4
   835 ;; This function calls:
   836 ;;		_I2C_Start
   837 ;;		_I2C_Stop
   838 ;;		_I2C_Write
   839 ;;		_Lcd_Send_Byte
   840 ;; This function is called by:
   841 ;;		_configuro
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text7
   846  00083E                     __ptext7:
   847                           	callstack 0
   848  00083E                     _Lcd_Init:
   849                           	callstack 25
   850  00083E                     
   851                           ;i2c_lcd.c: 45:     char i;;i2c_lcd.c: 46:     I2C_Start();
   852  00083E  ECEC  F006         	call	_I2C_Start	;wreg free
   853  000842                     
   854                           ;i2c_lcd.c: 47:     I2C_Write(0x4E);
   855  000842  0E4E               	movlw	78
   856  000844  ECD5  F006         	call	_I2C_Write
   857  000848                     
   858                           ;i2c_lcd.c: 48:     I2C_Write(0x00);
   859  000848  0E00               	movlw	0
   860  00084A  ECD5  F006         	call	_I2C_Write
   861                           
   862                           ;i2c_lcd.c: 49:     I2C_Stop();
   863  00084E  ECE2  F006         	call	_I2C_Stop	;wreg free
   864  000852                     
   865                           ;i2c_lcd.c: 50:     _delay((unsigned long)((15)*(4000000/4000.0)));
   866  000852  0E14               	movlw	20
   867  000854  6E08               	movwf	??_Lcd_Init^0,c
   868  000856  0E7A               	movlw	122
   869  000858                     u517:
   870  000858  2EE8               	decfsz	wreg,f,c
   871  00085A  D7FE               	bra	u517
   872  00085C  2E08               	decfsz	??_Lcd_Init^0,f,c
   873  00085E  D7FC               	bra	u517
   874  000860                     
   875                           ;i2c_lcd.c: 52:     for(i=0 ;i<3; i++)
   876  000860  0E00               	movlw	0
   877  000862  6E09               	movwf	Lcd_Init@i^0,c
   878  000864                     l1564:
   879                           
   880                           ;i2c_lcd.c: 53:     {;i2c_lcd.c: 54:         Lcd_Send_Byte(0, 0x03);
   881  000864  0E03               	movlw	3
   882  000866  6E06               	movwf	Lcd_Send_Byte@n^0,c
   883  000868  0E00               	movlw	0
   884  00086A  ECBA  F006         	call	_Lcd_Send_Byte
   885  00086E                     
   886                           ;i2c_lcd.c: 55:         _delay((unsigned long)((5)*(4000000/4000.0)));
   887  00086E  0E07               	movlw	7
   888  000870  6E08               	movwf	??_Lcd_Init^0,c
   889  000872  0E7D               	movlw	125
   890  000874                     u527:
   891  000874  2EE8               	decfsz	wreg,f,c
   892  000876  D7FE               	bra	u527
   893  000878  2E08               	decfsz	??_Lcd_Init^0,f,c
   894  00087A  D7FC               	bra	u527
   895  00087C  F000               	nop	
   896  00087E                     
   897                           ;i2c_lcd.c: 56:     }
   898  00087E  2A09               	incf	Lcd_Init@i^0,f,c
   899  000880  0E02               	movlw	2
   900  000882  6409               	cpfsgt	Lcd_Init@i^0,c
   901  000884  EF46  F004         	goto	u471
   902  000888  EF48  F004         	goto	u470
   903  00088C                     u471:
   904  00088C  EF32  F004         	goto	l1564
   905  000890                     u470:
   906  000890                     
   907                           ;i2c_lcd.c: 57:     Lcd_Send_Byte(0, 0x02);
   908  000890  0E02               	movlw	2
   909  000892  6E06               	movwf	Lcd_Send_Byte@n^0,c
   910  000894  0E00               	movlw	0
   911  000896  ECBA  F006         	call	_Lcd_Send_Byte
   912                           
   913                           ;i2c_lcd.c: 58:     Lcd_Send_Byte(0, 0x28);
   914  00089A  0E28               	movlw	40
   915  00089C  6E06               	movwf	Lcd_Send_Byte@n^0,c
   916  00089E  0E00               	movlw	0
   917  0008A0  ECBA  F006         	call	_Lcd_Send_Byte
   918  0008A4                     
   919                           ;i2c_lcd.c: 59:     _delay((unsigned long)((5)*(4000000/4000.0)));
   920  0008A4  0E07               	movlw	7
   921  0008A6  6E08               	movwf	??_Lcd_Init^0,c
   922  0008A8  0E7D               	movlw	125
   923  0008AA                     u537:
   924  0008AA  2EE8               	decfsz	wreg,f,c
   925  0008AC  D7FE               	bra	u537
   926  0008AE  2E08               	decfsz	??_Lcd_Init^0,f,c
   927  0008B0  D7FC               	bra	u537
   928  0008B2  F000               	nop	
   929  0008B4                     
   930                           ;i2c_lcd.c: 60:     Lcd_Send_Byte(0, 0x08);
   931  0008B4  0E08               	movlw	8
   932  0008B6  6E06               	movwf	Lcd_Send_Byte@n^0,c
   933  0008B8  0E00               	movlw	0
   934  0008BA  ECBA  F006         	call	_Lcd_Send_Byte
   935                           
   936                           ;i2c_lcd.c: 61:     _delay((unsigned long)((5)*(4000000/4000.0)));
   937  0008BE  0E07               	movlw	7
   938  0008C0  6E08               	movwf	??_Lcd_Init^0,c
   939  0008C2  0E7D               	movlw	125
   940  0008C4                     u547:
   941  0008C4  2EE8               	decfsz	wreg,f,c
   942  0008C6  D7FE               	bra	u547
   943  0008C8  2E08               	decfsz	??_Lcd_Init^0,f,c
   944  0008CA  D7FC               	bra	u547
   945  0008CC  F000               	nop	
   946  0008CE                     
   947                           ;i2c_lcd.c: 62:     Lcd_Send_Byte(0, 0x01);
   948  0008CE  0E01               	movlw	1
   949  0008D0  6E06               	movwf	Lcd_Send_Byte@n^0,c
   950  0008D2  0E00               	movlw	0
   951  0008D4  ECBA  F006         	call	_Lcd_Send_Byte
   952  0008D8                     
   953                           ;i2c_lcd.c: 63:     _delay((unsigned long)((5)*(4000000/4000.0)));
   954  0008D8  0E07               	movlw	7
   955  0008DA  6E08               	movwf	??_Lcd_Init^0,c
   956  0008DC  0E7D               	movlw	125
   957  0008DE                     u557:
   958  0008DE  2EE8               	decfsz	wreg,f,c
   959  0008E0  D7FE               	bra	u557
   960  0008E2  2E08               	decfsz	??_Lcd_Init^0,f,c
   961  0008E4  D7FC               	bra	u557
   962  0008E6  F000               	nop	
   963                           
   964                           ;i2c_lcd.c: 64:     Lcd_Send_Byte(0, 0x06);
   965  0008E8  0E06               	movlw	6
   966  0008EA  6E06               	movwf	Lcd_Send_Byte@n^0,c
   967  0008EC  0E00               	movlw	0
   968  0008EE  ECBA  F006         	call	_Lcd_Send_Byte
   969  0008F2                     
   970                           ;i2c_lcd.c: 65:     _delay((unsigned long)((5)*(4000000/4000.0)));
   971  0008F2  0E07               	movlw	7
   972  0008F4  6E08               	movwf	??_Lcd_Init^0,c
   973  0008F6  0E7D               	movlw	125
   974  0008F8                     u567:
   975  0008F8  2EE8               	decfsz	wreg,f,c
   976  0008FA  D7FE               	bra	u567
   977  0008FC  2E08               	decfsz	??_Lcd_Init^0,f,c
   978  0008FE  D7FC               	bra	u567
   979  000900  F000               	nop	
   980  000902                     
   981                           ;i2c_lcd.c: 66:     Lcd_Send_Byte(0, 0x0C);
   982  000902  0E0C               	movlw	12
   983  000904  6E06               	movwf	Lcd_Send_Byte@n^0,c
   984  000906  0E00               	movlw	0
   985  000908  ECBA  F006         	call	_Lcd_Send_Byte
   986  00090C  0012               	return		;funcret
   987  00090E                     __end_of_Lcd_Init:
   988                           	callstack 0
   989                           
   990 ;; *************** function _LCD_INIT *****************
   991 ;; Defined at:
   992 ;;		line 184 in file "LCD.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;		None
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1006 ;;      Params:         0       0       0       0       0       0       0       0       0
  1007 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1008 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1009 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1010 ;;Total ram usage:        1 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 3
  1013 ;; This function calls:
  1014 ;;		_BORRAR_LCD
  1015 ;;		_CURSOR_HOME
  1016 ;;		_CURSOR_ONOFF
  1017 ;;		_LCD_CONFIG
  1018 ;; This function is called by:
  1019 ;;		_configuro
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text8
  1024  000CA4                     __ptext8:
  1025                           	callstack 0
  1026  000CA4                     _LCD_INIT:
  1027                           	callstack 26
  1028  000CA4                     
  1029                           ;LCD.c: 185:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
  1030  000CA4  0E14               	movlw	20
  1031  000CA6  6E05               	movwf	??_LCD_INIT^0,c
  1032  000CA8  0E7A               	movlw	122
  1033  000CAA                     u577:
  1034  000CAA  2EE8               	decfsz	wreg,f,c
  1035  000CAC  D7FE               	bra	u577
  1036  000CAE  2E05               	decfsz	??_LCD_INIT^0,f,c
  1037  000CB0  D7FC               	bra	u577
  1038  000CB2                     
  1039                           ;LCD.c: 186:     LCD_CONFIG();
  1040  000CB2  EC5B  F005         	call	_LCD_CONFIG	;wreg free
  1041  000CB6                     
  1042                           ;LCD.c: 187:     _delay((unsigned long)((15)*(4000000UL/4000.0)));
  1043  000CB6  0E14               	movlw	20
  1044  000CB8  6E05               	movwf	??_LCD_INIT^0,c
  1045  000CBA  0E7A               	movlw	122
  1046  000CBC                     u587:
  1047  000CBC  2EE8               	decfsz	wreg,f,c
  1048  000CBE  D7FE               	bra	u587
  1049  000CC0  2E05               	decfsz	??_LCD_INIT^0,f,c
  1050  000CC2  D7FC               	bra	u587
  1051                           
  1052                           ;LCD.c: 188:     BORRAR_LCD();
  1053  000CC4  ECFF  F006         	call	_BORRAR_LCD	;wreg free
  1054                           
  1055                           ;LCD.c: 189:     CURSOR_HOME();
  1056  000CC8  ECFB  F006         	call	_CURSOR_HOME	;wreg free
  1057                           
  1058                           ;LCD.c: 190:     CURSOR_ONOFF(1);
  1059  000CCC  0E01               	movlw	1
  1060  000CCE  EC6A  F006         	call	_CURSOR_ONOFF
  1061  000CD2  0012               	return		;funcret
  1062  000CD4                     __end_of_LCD_INIT:
  1063                           	callstack 0
  1064                           
  1065 ;; *************** function _LCD_CONFIG *****************
  1066 ;; Defined at:
  1067 ;;		line 101 in file "LCD.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1083 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1084 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:        1 bytes
  1086 ;; Hardware stack levels used: 1
  1087 ;; Hardware stack levels required when called: 2
  1088 ;; This function calls:
  1089 ;;		_ENVIA_LCD_CMD
  1090 ;;		_ENVIA_NIBBLE
  1091 ;; This function is called by:
  1092 ;;		_LCD_INIT
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text9
  1097  000AB6                     __ptext9:
  1098                           	callstack 0
  1099  000AB6                     _LCD_CONFIG:
  1100                           	callstack 26
  1101  000AB6                     
  1102                           ;LCD.c: 103:  LATDbits.LATD0 = 0;
  1103  000AB6  908C               	bcf	140,0,c	;volatile
  1104                           
  1105                           ;LCD.c: 104:  LATDbits.LATD1 = 0;
  1106  000AB8  928C               	bcf	140,1,c	;volatile
  1107  000ABA                     
  1108                           ;LCD.c: 105:  ENVIA_NIBBLE(0x30);
  1109  000ABA  0E30               	movlw	48
  1110  000ABC  ECAC  F006         	call	_ENVIA_NIBBLE
  1111  000AC0                     
  1112                           ;LCD.c: 106:     _delay((unsigned long)((2)*(4000000UL/4000.0)));
  1113  000AC0  0E03               	movlw	3
  1114  000AC2  6E04               	movwf	??_LCD_CONFIG^0,c
  1115  000AC4  0E98               	movlw	152
  1116  000AC6                     u597:
  1117  000AC6  2EE8               	decfsz	wreg,f,c
  1118  000AC8  D7FE               	bra	u597
  1119  000ACA  2E04               	decfsz	??_LCD_CONFIG^0,f,c
  1120  000ACC  D7FC               	bra	u597
  1121  000ACE                     
  1122                           ;LCD.c: 107:  ENVIA_NIBBLE(0x30);
  1123  000ACE  0E30               	movlw	48
  1124  000AD0  ECAC  F006         	call	_ENVIA_NIBBLE
  1125                           
  1126                           ;LCD.c: 108:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1127  000AD4  0E21               	movlw	33
  1128  000AD6                     u607:
  1129  000AD6  2EE8               	decfsz	wreg,f,c
  1130  000AD8  D7FE               	bra	u607
  1131  000ADA  F000               	nop	
  1132  000ADC                     
  1133                           ;LCD.c: 109:     ENVIA_NIBBLE(0x30);
  1134  000ADC  0E30               	movlw	48
  1135  000ADE  ECAC  F006         	call	_ENVIA_NIBBLE
  1136  000AE2                     
  1137                           ;LCD.c: 110:  ENVIA_NIBBLE(0x20);
  1138  000AE2  0E20               	movlw	32
  1139  000AE4  ECAC  F006         	call	_ENVIA_NIBBLE
  1140  000AE8                     
  1141                           ;LCD.c: 111:  ENVIA_LCD_CMD(0x01);
  1142  000AE8  0E01               	movlw	1
  1143  000AEA  EC38  F006         	call	_ENVIA_LCD_CMD
  1144  000AEE                     
  1145                           ;LCD.c: 112:  ENVIA_LCD_CMD(0x28);
  1146  000AEE  0E28               	movlw	40
  1147  000AF0  EC38  F006         	call	_ENVIA_LCD_CMD
  1148  000AF4                     
  1149                           ;LCD.c: 113:  ENVIA_LCD_CMD(0x0F);
  1150  000AF4  0E0F               	movlw	15
  1151  000AF6  EC38  F006         	call	_ENVIA_LCD_CMD
  1152  000AFA                     
  1153                           ;LCD.c: 114:  ENVIA_LCD_CMD(0x06);
  1154  000AFA  0E06               	movlw	6
  1155  000AFC  EC38  F006         	call	_ENVIA_LCD_CMD
  1156  000B00                     
  1157                           ;LCD.c: 115:  ENVIA_LCD_CMD(0x01);
  1158  000B00  0E01               	movlw	1
  1159  000B02  EC38  F006         	call	_ENVIA_LCD_CMD
  1160  000B06  0012               	return		;funcret
  1161  000B08                     __end_of_LCD_CONFIG:
  1162                           	callstack 0
  1163                           
  1164 ;; *************** function _CURSOR_ONOFF *****************
  1165 ;; Defined at:
  1166 ;;		line 54 in file "LCD.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  estado          1    wreg     unsigned char 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  estado          1    3[COMRAM] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg, status,2, status,0, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1180 ;;      Params:         0       0       0       0       0       0       0       0       0
  1181 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1183 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1184 ;;Total ram usage:        1 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; Hardware stack levels required when called: 2
  1187 ;; This function calls:
  1188 ;;		_ENVIA_LCD_CMD
  1189 ;; This function is called by:
  1190 ;;		_LCD_INIT
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text10
  1195  000CD4                     __ptext10:
  1196                           	callstack 0
  1197  000CD4                     _CURSOR_ONOFF:
  1198                           	callstack 26
  1199                           
  1200                           ;incstack = 0
  1201                           ;CURSOR_ONOFF@estado stored from wreg
  1202  000CD4  6E04               	movwf	CURSOR_ONOFF@estado^0,c
  1203  000CD6                     
  1204                           ;LCD.c: 54: void CURSOR_ONOFF(unsigned char estado);LCD.c: 55: {;LCD.c: 56:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1205  000CD6  5004               	movf	CURSOR_ONOFF@estado^0,w,c
  1206  000CD8  A4D8               	btfss	status,2,c
  1207  000CDA  EF71  F006         	goto	u101
  1208  000CDE  EF73  F006         	goto	u100
  1209  000CE2                     u101:
  1210  000CE2  EF76  F006         	goto	l1132
  1211  000CE6                     u100:
  1212  000CE6  0E0E               	movlw	14
  1213  000CE8  EC38  F006         	call	_ENVIA_LCD_CMD
  1214  000CEC                     l1132:
  1215                           
  1216                           ;LCD.c: 57:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1217  000CEC  0404               	decf	CURSOR_ONOFF@estado^0,w,c
  1218  000CEE  A4D8               	btfss	status,2,c
  1219  000CF0  EF7C  F006         	goto	u111
  1220  000CF4  EF7E  F006         	goto	u110
  1221  000CF8                     u111:
  1222  000CF8  EF81  F006         	goto	l56
  1223  000CFC                     u110:
  1224  000CFC  0E0C               	movlw	12
  1225  000CFE  EC38  F006         	call	_ENVIA_LCD_CMD
  1226  000D02                     l56:
  1227  000D02  0012               	return		;funcret
  1228  000D04                     __end_of_CURSOR_ONOFF:
  1229                           	callstack 0
  1230                           
  1231 ;; *************** function _CURSOR_HOME *****************
  1232 ;; Defined at:
  1233 ;;		line 29 in file "LCD.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used: 1
  1253 ;; Hardware stack levels required when called: 2
  1254 ;; This function calls:
  1255 ;;		_ENVIA_LCD_CMD
  1256 ;; This function is called by:
  1257 ;;		_LCD_INIT
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text11
  1262  000DF6                     __ptext11:
  1263                           	callstack 0
  1264  000DF6                     _CURSOR_HOME:
  1265                           	callstack 26
  1266  000DF6                     
  1267                           ;LCD.c: 31:  ENVIA_LCD_CMD(0x02);
  1268  000DF6  0E02               	movlw	2
  1269  000DF8  EC38  F006         	call	_ENVIA_LCD_CMD
  1270  000DFC  0012               	return		;funcret
  1271  000DFE                     __end_of_CURSOR_HOME:
  1272                           	callstack 0
  1273                           
  1274 ;; *************** function _BORRAR_LCD *****************
  1275 ;; Defined at:
  1276 ;;		line 96 in file "LCD.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, status,0, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1290 ;;      Params:         0       0       0       0       0       0       0       0       0
  1291 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1293 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1294 ;;Total ram usage:        0 bytes
  1295 ;; Hardware stack levels used: 1
  1296 ;; Hardware stack levels required when called: 2
  1297 ;; This function calls:
  1298 ;;		_ENVIA_LCD_CMD
  1299 ;; This function is called by:
  1300 ;;		_LCD_INIT
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text12
  1305  000DFE                     __ptext12:
  1306                           	callstack 0
  1307  000DFE                     _BORRAR_LCD:
  1308                           	callstack 26
  1309  000DFE                     
  1310                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
  1311  000DFE  0E01               	movlw	1
  1312  000E00  EC38  F006         	call	_ENVIA_LCD_CMD
  1313  000E04  0012               	return		;funcret
  1314  000E06                     __end_of_BORRAR_LCD:
  1315                           	callstack 0
  1316                           
  1317 ;; *************** function _ENVIA_LCD_CMD *****************
  1318 ;; Defined at:
  1319 ;;		line 128 in file "LCD.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  dato            1    wreg     unsigned char 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  dato            1    1[COMRAM] unsigned char 
  1324 ;;  aux             1    2[COMRAM] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0
  1335 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1337 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1338 ;;Total ram usage:        2 bytes
  1339 ;; Hardware stack levels used: 1
  1340 ;; Hardware stack levels required when called: 1
  1341 ;; This function calls:
  1342 ;;		_ENVIA_NIBBLE
  1343 ;;		_LEER_LCD
  1344 ;; This function is called by:
  1345 ;;		_POS_CURSOR
  1346 ;;		_CURSOR_HOME
  1347 ;;		_CURSOR_ONOFF
  1348 ;;		_BORRAR_LCD
  1349 ;;		_LCD_CONFIG
  1350 ;;		_BLINK_CURSOR
  1351 ;;		_DISPLAY_ONOFF
  1352 ;;		_CURSOR_SHIFTLEFT
  1353 ;;		_CURSOR_SHIFTRIGHT
  1354 ;;		_DISPLAY_SHIFTLEFT
  1355 ;;		_DISPLAY_SHIFTRIGHT
  1356 ;;		_GENERACARACTER
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text13
  1361  000C70                     __ptext13:
  1362                           	callstack 0
  1363  000C70                     _ENVIA_LCD_CMD:
  1364                           	callstack 27
  1365                           
  1366                           ;incstack = 0
  1367                           ;ENVIA_LCD_CMD@dato stored from wreg
  1368  000C70  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1369  000C72                     
  1370                           ;LCD.c: 128: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 129: {;LCD.c: 130:  unsigned 
      +                          char aux;;LCD.c: 131:  LATDbits.LATD0 = 0;
  1371  000C72  908C               	bcf	140,0,c	;volatile
  1372  000C74                     
  1373                           ;LCD.c: 132:  LEER_LCD();
  1374  000C74  EC22  F005         	call	_LEER_LCD	;wreg free
  1375  000C78                     
  1376                           ;LCD.c: 133:  TRISD = 0b00000000;
  1377  000C78  0E00               	movlw	0
  1378  000C7A  6E95               	movwf	149,c	;volatile
  1379  000C7C                     
  1380                           ;LCD.c: 134:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1381  000C7C  0E21               	movlw	33
  1382  000C7E                     u617:
  1383  000C7E  2EE8               	decfsz	wreg,f,c
  1384  000C80  D7FE               	bra	u617
  1385  000C82  F000               	nop	
  1386  000C84                     
  1387                           ;LCD.c: 135:     LATDbits.LATD1 = 0;
  1388  000C84  928C               	bcf	140,1,c	;volatile
  1389  000C86                     
  1390                           ;LCD.c: 136:  LATDbits.LATD2 = 0;
  1391  000C86  948C               	bcf	140,2,c	;volatile
  1392  000C88                     
  1393                           ;LCD.c: 137:  LATDbits.LATD0 = 0;
  1394  000C88  908C               	bcf	140,0,c	;volatile
  1395  000C8A                     
  1396                           ;LCD.c: 138:  aux = dato & 0xF0;
  1397  000C8A  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1398  000C8C  0BF0               	andlw	240
  1399  000C8E  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1400  000C90                     
  1401                           ;LCD.c: 139:  ENVIA_NIBBLE(aux);
  1402  000C90  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1403  000C92  ECAC  F006         	call	_ENVIA_NIBBLE
  1404  000C96                     
  1405                           ;LCD.c: 140:  aux = dato<<4;
  1406  000C96  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1407  000C98  0BF0               	andlw	240
  1408  000C9A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1409  000C9C                     
  1410                           ;LCD.c: 141:  ENVIA_NIBBLE(aux);
  1411  000C9C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1412  000C9E  ECAC  F006         	call	_ENVIA_NIBBLE
  1413  000CA2  0012               	return		;funcret
  1414  000CA4                     __end_of_ENVIA_LCD_CMD:
  1415                           	callstack 0
  1416                           
  1417 ;; *************** function _LEER_LCD *****************
  1418 ;; Defined at:
  1419 ;;		line 144 in file "LCD.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;		None
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  aux             1    0[COMRAM] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:         0       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1436 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1437 ;;Total ram usage:        1 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_ENVIA_CHAR
  1443 ;;		_ENVIA_LCD_CMD
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text14
  1448  000A44                     __ptext14:
  1449                           	callstack 0
  1450  000A44                     _LEER_LCD:
  1451                           	callstack 27
  1452  000A44                     
  1453                           ;LCD.c: 146:  unsigned char aux;;LCD.c: 147:  TRISD = 0xF8;
  1454  000A44  0EF8               	movlw	248
  1455  000A46  6E95               	movwf	149,c	;volatile
  1456  000A48                     
  1457                           ;LCD.c: 148:  LATDbits.LATD0 = 0;
  1458  000A48  908C               	bcf	140,0,c	;volatile
  1459  000A4A                     
  1460                           ;LCD.c: 149:  LATDbits.LATD1 = 1;
  1461  000A4A  828C               	bsf	140,1,c	;volatile
  1462  000A4C                     
  1463                           ;LCD.c: 150:  LATDbits.LATD2 = 1;
  1464  000A4C  848C               	bsf	140,2,c	;volatile
  1465  000A4E                     
  1466                           ;LCD.c: 151:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1467  000A4E  0E21               	movlw	33
  1468  000A50                     u627:
  1469  000A50  2EE8               	decfsz	wreg,f,c
  1470  000A52  D7FE               	bra	u627
  1471  000A54  F000               	nop	
  1472  000A56                     
  1473                           ;LCD.c: 152:  aux = PORTD;
  1474  000A56  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1475  000A5A                     
  1476                           ;LCD.c: 153:  LATDbits.LATD2 = 0;
  1477  000A5A  948C               	bcf	140,2,c	;volatile
  1478  000A5C                     
  1479                           ;LCD.c: 154:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1480  000A5C  0E21               	movlw	33
  1481  000A5E                     u637:
  1482  000A5E  2EE8               	decfsz	wreg,f,c
  1483  000A60  D7FE               	bra	u637
  1484  000A62  F000               	nop	
  1485  000A64                     
  1486                           ;LCD.c: 155:  LATDbits.LATD2 = 1;
  1487  000A64  848C               	bsf	140,2,c	;volatile
  1488  000A66                     
  1489                           ;LCD.c: 156:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1490  000A66  0E21               	movlw	33
  1491  000A68                     u647:
  1492  000A68  2EE8               	decfsz	wreg,f,c
  1493  000A6A  D7FE               	bra	u647
  1494  000A6C  F000               	nop	
  1495  000A6E                     
  1496                           ;LCD.c: 157:  LATDbits.LATD2 = 0;
  1497  000A6E  948C               	bcf	140,2,c	;volatile
  1498  000A70                     l1034:
  1499                           
  1500                           ;LCD.c: 158:  aux = aux & 0x80;
  1501  000A70  5001               	movf	LEER_LCD@aux^0,w,c
  1502  000A72  0B80               	andlw	128
  1503  000A74  6E01               	movwf	LEER_LCD@aux^0,c
  1504                           
  1505                           ;LCD.c: 159:  while(aux == 0x80)
  1506  000A76  EF51  F005         	goto	l1048
  1507  000A7A                     l87:
  1508                           
  1509                           ;LCD.c: 160:         {;LCD.c: 161:             LATDbits.LATD2 = 1;
  1510  000A7A  848C               	bsf	140,2,c	;volatile
  1511  000A7C                     
  1512                           ;LCD.c: 162:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1513  000A7C  0E21               	movlw	33
  1514  000A7E                     u657:
  1515  000A7E  2EE8               	decfsz	wreg,f,c
  1516  000A80  D7FE               	bra	u657
  1517  000A82  F000               	nop	
  1518  000A84                     
  1519                           ;LCD.c: 163:             aux = PORTD;
  1520  000A84  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1521  000A88                     
  1522                           ;LCD.c: 164:             LATDbits.LATD2 = 0;
  1523  000A88  948C               	bcf	140,2,c	;volatile
  1524                           
  1525                           ;LCD.c: 165:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1526  000A8A  0E21               	movlw	33
  1527  000A8C                     u667:
  1528  000A8C  2EE8               	decfsz	wreg,f,c
  1529  000A8E  D7FE               	bra	u667
  1530  000A90  F000               	nop	
  1531  000A92                     
  1532                           ;LCD.c: 166:             LATDbits.LATD2 = 1;
  1533  000A92  848C               	bsf	140,2,c	;volatile
  1534                           
  1535                           ;LCD.c: 167:             _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1536  000A94  0E21               	movlw	33
  1537  000A96                     u677:
  1538  000A96  2EE8               	decfsz	wreg,f,c
  1539  000A98  D7FE               	bra	u677
  1540  000A9A  F000               	nop	
  1541  000A9C                     
  1542                           ;LCD.c: 168:             LATDbits.LATD2 = 0;
  1543  000A9C  948C               	bcf	140,2,c	;volatile
  1544  000A9E  EF38  F005         	goto	l1034
  1545  000AA2                     l1048:
  1546                           
  1547                           ;LCD.c: 159:  while(aux == 0x80)
  1548  000AA2  0E80               	movlw	128
  1549  000AA4  1801               	xorwf	LEER_LCD@aux^0,w,c
  1550  000AA6  B4D8               	btfsc	status,2,c
  1551  000AA8  EF58  F005         	goto	u41
  1552  000AAC  EF5A  F005         	goto	u40
  1553  000AB0                     u41:
  1554  000AB0  EF3D  F005         	goto	l87
  1555  000AB4                     u40:
  1556  000AB4  0012               	return		;funcret
  1557  000AB6                     __end_of_LEER_LCD:
  1558                           	callstack 0
  1559                           
  1560 ;; *************** function _ENVIA_NIBBLE *****************
  1561 ;; Defined at:
  1562 ;;		line 118 in file "LCD.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  dato            1    wreg     unsigned char 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  dato            1    0[COMRAM] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0
  1577 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1579 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1580 ;;Total ram usage:        1 bytes
  1581 ;; Hardware stack levels used: 1
  1582 ;; This function calls:
  1583 ;;		Nothing
  1584 ;; This function is called by:
  1585 ;;		_ENVIA_CHAR
  1586 ;;		_LCD_CONFIG
  1587 ;;		_ENVIA_LCD_CMD
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text15
  1592  000D58                     __ptext15:
  1593                           	callstack 0
  1594  000D58                     _ENVIA_NIBBLE:
  1595                           	callstack 27
  1596                           
  1597                           ;incstack = 0
  1598                           ;ENVIA_NIBBLE@dato stored from wreg
  1599  000D58  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1600  000D5A                     
  1601                           ;LCD.c: 118: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 119: {;LCD.c: 120:  LATD &= 0x
      +                          0F;
  1602  000D5A  0E0F               	movlw	15
  1603  000D5C  168C               	andwf	140,f,c	;volatile
  1604                           
  1605                           ;LCD.c: 121:  dato &= 0xF0;
  1606  000D5E  0EF0               	movlw	240
  1607  000D60  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1608                           
  1609                           ;LCD.c: 122:  LATD|= dato;
  1610  000D62  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1611  000D64  128C               	iorwf	140,f,c	;volatile
  1612  000D66                     
  1613                           ;LCD.c: 123:  LATDbits.LATD2 = 1;
  1614  000D66  848C               	bsf	140,2,c	;volatile
  1615  000D68                     
  1616                           ;LCD.c: 124:     _delay((unsigned long)((100)*(4000000UL/4000000.0)));
  1617  000D68  0E21               	movlw	33
  1618  000D6A                     u687:
  1619  000D6A  2EE8               	decfsz	wreg,f,c
  1620  000D6C  D7FE               	bra	u687
  1621  000D6E  F000               	nop	
  1622  000D70                     
  1623                           ;LCD.c: 125:  LATDbits.LATD2 = 0;
  1624  000D70  948C               	bcf	140,2,c	;volatile
  1625  000D72  0012               	return		;funcret
  1626  000D74                     __end_of_ENVIA_NIBBLE:
  1627                           	callstack 0
  1628                           
  1629 ;; *************** function _Lcd_Write_String *****************
  1630 ;; Defined at:
  1631 ;;		line 90 in file "i2c_lcd.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  str             2    7[COMRAM] PTR const unsigned char 
  1634 ;;		 -> STR_4(16), STR_3(13), 
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;		None
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1646 ;;      Params:         2       0       0       0       0       0       0       0       0
  1647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1648 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1649 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1650 ;;Total ram usage:        2 bytes
  1651 ;; Hardware stack levels used: 1
  1652 ;; Hardware stack levels required when called: 4
  1653 ;; This function calls:
  1654 ;;		_Lcd_Send_Byte
  1655 ;; This function is called by:
  1656 ;;		_main
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text16
  1661  000C02                     __ptext16:
  1662                           	callstack 0
  1663  000C02                     _Lcd_Write_String:
  1664                           	callstack 26
  1665  000C02                     
  1666                           ;i2c_lcd.c: 90: void Lcd_Write_String(const char *str);i2c_lcd.c: 91: {;i2c_lcd.c: 92:  
      +                             while(*str != '\0')
  1667  000C02  EF0F  F006         	goto	l1624
  1668  000C06                     l1620:
  1669                           
  1670                           ;i2c_lcd.c: 93:     {;i2c_lcd.c: 94:         Lcd_Send_Byte(1, *str++);
  1671  000C06  C008  FFF6         	movff	Lcd_Write_String@str,tblptrl
  1672  000C0A  C009  FFF7         	movff	Lcd_Write_String@str+1,tblptrh
  1673  000C0E                     	if	0	;tblptru may be non-zero
  1674  000C0E                     	endif
  1675  000C0E                     	if	0	;tblptru may be non-zero
  1676  000C0E                     	endif
  1677  000C0E  0008               	tblrd		*
  1678  000C10  CFF5 F006          	movff	tablat,Lcd_Send_Byte@n
  1679  000C14  0E01               	movlw	1
  1680  000C16  ECBA  F006         	call	_Lcd_Send_Byte
  1681  000C1A  4A08               	infsnz	Lcd_Write_String@str^0,f,c
  1682  000C1C  2A09               	incf	(Lcd_Write_String@str+1)^0,f,c
  1683  000C1E                     l1624:
  1684                           
  1685                           ;i2c_lcd.c: 92:     while(*str != '\0')
  1686  000C1E  C008  FFF6         	movff	Lcd_Write_String@str,tblptrl
  1687  000C22  C009  FFF7         	movff	Lcd_Write_String@str+1,tblptrh
  1688  000C26                     	if	0	;tblptru may be non-zero
  1689  000C26                     	endif
  1690  000C26                     	if	0	;tblptru may be non-zero
  1691  000C26                     	endif
  1692  000C26  0008               	tblrd		*
  1693  000C28  50F5               	movf	tablat,w,c
  1694  000C2A  0900               	iorlw	0
  1695  000C2C  A4D8               	btfss	status,2,c
  1696  000C2E  EF1B  F006         	goto	u481
  1697  000C32  EF1D  F006         	goto	u480
  1698  000C36                     u481:
  1699  000C36  EF03  F006         	goto	l1620
  1700  000C3A                     u480:
  1701  000C3A  0012               	return		;funcret
  1702  000C3C                     __end_of_Lcd_Write_String:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _Lcd_Set_Cursor *****************
  1706 ;; Defined at:
  1707 ;;		line 74 in file "i2c_lcd.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  row             1    wreg     unsigned char 
  1710 ;;  col             1    7[COMRAM] unsigned char 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  row             1   10[COMRAM] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1722 ;;      Params:         1       0       0       0       0       0       0       0       0
  1723 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1724 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1725 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1726 ;;Total ram usage:        4 bytes
  1727 ;; Hardware stack levels used: 1
  1728 ;; Hardware stack levels required when called: 4
  1729 ;; This function calls:
  1730 ;;		_Lcd_Send_Byte
  1731 ;; This function is called by:
  1732 ;;		_main
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text17
  1737  0009C2                     __ptext17:
  1738                           	callstack 0
  1739  0009C2                     _Lcd_Set_Cursor:
  1740                           	callstack 26
  1741                           
  1742                           ;incstack = 0
  1743                           ;Lcd_Set_Cursor@row stored from wreg
  1744  0009C2  6E0B               	movwf	Lcd_Set_Cursor@row^0,c
  1745  0009C4                     
  1746                           ;i2c_lcd.c: 74: void Lcd_Set_Cursor(char row, char col);i2c_lcd.c: 75: {;i2c_lcd.c: 76: 
      +                              switch(row)
  1747  0009C4  EF04  F005         	goto	l1612
  1748  0009C8                     l1602:
  1749  0009C8  0408               	decf	Lcd_Set_Cursor@col^0,w,c
  1750  0009CA  0980               	iorlw	128
  1751  0009CC  6E06               	movwf	Lcd_Send_Byte@n^0,c
  1752  0009CE  0E00               	movlw	0
  1753  0009D0  ECBA  F006         	call	_Lcd_Send_Byte
  1754  0009D4  EF21  F005         	goto	l221
  1755  0009D8                     l1604:
  1756  0009D8  0408               	decf	Lcd_Set_Cursor@col^0,w,c
  1757  0009DA  09C0               	iorlw	192
  1758  0009DC  6E06               	movwf	Lcd_Send_Byte@n^0,c
  1759  0009DE  0E00               	movlw	0
  1760  0009E0  ECBA  F006         	call	_Lcd_Send_Byte
  1761  0009E4  EF21  F005         	goto	l221
  1762  0009E8                     l1606:
  1763  0009E8  0408               	decf	Lcd_Set_Cursor@col^0,w,c
  1764  0009EA  0994               	iorlw	148
  1765  0009EC  6E06               	movwf	Lcd_Send_Byte@n^0,c
  1766  0009EE  0E00               	movlw	0
  1767  0009F0  ECBA  F006         	call	_Lcd_Send_Byte
  1768  0009F4  EF21  F005         	goto	l221
  1769  0009F8                     l1608:
  1770  0009F8  0408               	decf	Lcd_Set_Cursor@col^0,w,c
  1771  0009FA  09D4               	iorlw	212
  1772  0009FC  6E06               	movwf	Lcd_Send_Byte@n^0,c
  1773  0009FE  0E00               	movlw	0
  1774  000A00  ECBA  F006         	call	_Lcd_Send_Byte
  1775  000A04  EF21  F005         	goto	l221
  1776  000A08                     l1612:
  1777  000A08  500B               	movf	Lcd_Set_Cursor@row^0,w,c
  1778  000A0A  6E09               	movwf	??_Lcd_Set_Cursor^0,c
  1779  000A0C  6A0A               	clrf	(??_Lcd_Set_Cursor+1)^0,c
  1780                           
  1781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1782                           ; Switch size 1, requested type "simple"
  1783                           ; Number of cases is 1, Range of values is 0 to 0
  1784                           ; switch strategies available:
  1785                           ; Name         Instructions Cycles
  1786                           ; simple_byte            4     3 (average)
  1787                           ;	Chosen strategy is simple_byte
  1788  000A0E  500A               	movf	(??_Lcd_Set_Cursor+1)^0,w,c
  1789  000A10  0A00               	xorlw	0	; case 0
  1790  000A12  B4D8               	btfsc	status,2,c
  1791  000A14  EF0E  F005         	goto	l1686
  1792  000A18  EF21  F005         	goto	l221
  1793  000A1C                     l1686:
  1794                           
  1795                           ; Switch size 1, requested type "simple"
  1796                           ; Number of cases is 4, Range of values is 1 to 4
  1797                           ; switch strategies available:
  1798                           ; Name         Instructions Cycles
  1799                           ; simple_byte           13     7 (average)
  1800                           ;	Chosen strategy is simple_byte
  1801  000A1C  5009               	movf	??_Lcd_Set_Cursor^0,w,c
  1802  000A1E  0A01               	xorlw	1	; case 1
  1803  000A20  B4D8               	btfsc	status,2,c
  1804  000A22  EFE4  F004         	goto	l1602
  1805  000A26  0A03               	xorlw	3	; case 2
  1806  000A28  B4D8               	btfsc	status,2,c
  1807  000A2A  EFEC  F004         	goto	l1604
  1808  000A2E  0A01               	xorlw	1	; case 3
  1809  000A30  B4D8               	btfsc	status,2,c
  1810  000A32  EFF4  F004         	goto	l1606
  1811  000A36  0A07               	xorlw	7	; case 4
  1812  000A38  B4D8               	btfsc	status,2,c
  1813  000A3A  EFFC  F004         	goto	l1608
  1814  000A3E  EF21  F005         	goto	l221
  1815  000A42                     l221:
  1816  000A42  0012               	return		;funcret
  1817  000A44                     __end_of_Lcd_Set_Cursor:
  1818                           	callstack 0
  1819                           
  1820 ;; *************** function _Lcd_Send_Byte *****************
  1821 ;; Defined at:
  1822 ;;		line 37 in file "i2c_lcd.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  add             1    wreg     unsigned char 
  1825 ;;  n               1    5[COMRAM] unsigned char 
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;  add             1    6[COMRAM] unsigned char 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, status,2, status,0, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1837 ;;      Params:         1       0       0       0       0       0       0       0       0
  1838 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1840 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1841 ;;Total ram usage:        2 bytes
  1842 ;; Hardware stack levels used: 1
  1843 ;; Hardware stack levels required when called: 3
  1844 ;; This function calls:
  1845 ;;		_Lcd_Port
  1846 ;; This function is called by:
  1847 ;;		_Lcd_Init
  1848 ;;		_Lcd_Set_Cursor
  1849 ;;		_Lcd_Write_String
  1850 ;;		_Lcd_Cmd
  1851 ;;		_Lcd_Write_Char
  1852 ;;		_Lcd_Clear
  1853 ;;		_Lcd_CGRAM_WriteChar
  1854 ;;		_Lcd_CGRAM_SetPosition
  1855 ;;		_Lcd_CGRAM_CreateChar
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text18
  1860  000D74                     __ptext18:
  1861                           	callstack 0
  1862  000D74                     _Lcd_Send_Byte:
  1863                           	callstack 25
  1864                           
  1865                           ;incstack = 0
  1866                           ;Lcd_Send_Byte@add stored from wreg
  1867  000D74  6E07               	movwf	Lcd_Send_Byte@add^0,c
  1868  000D76                     
  1869                           ;i2c_lcd.c: 37: void Lcd_Send_Byte(unsigned char add, unsigned char n);i2c_lcd.c: 38: {;
      +                          i2c_lcd.c: 39:     Lcd_Port(add, n >> 4);
  1870  000D76  3806               	swapf	Lcd_Send_Byte@n^0,w,c
  1871  000D78  0B0F               	andlw	15
  1872  000D7A  6E03               	movwf	Lcd_Port@nibble^0,c
  1873  000D7C  5007               	movf	Lcd_Send_Byte@add^0,w,c
  1874  000D7E  EC87  F004         	call	_Lcd_Port
  1875                           
  1876                           ;i2c_lcd.c: 40:     Lcd_Port(add, n & 0x0F);
  1877  000D82  5006               	movf	Lcd_Send_Byte@n^0,w,c
  1878  000D84  0B0F               	andlw	15
  1879  000D86  6E03               	movwf	Lcd_Port@nibble^0,c
  1880  000D88  5007               	movf	Lcd_Send_Byte@add^0,w,c
  1881  000D8A  EC87  F004         	call	_Lcd_Port
  1882  000D8E  0012               	return		;funcret
  1883  000D90                     __end_of_Lcd_Send_Byte:
  1884                           	callstack 0
  1885                           
  1886 ;; *************** function _Lcd_Port *****************
  1887 ;; Defined at:
  1888 ;;		line 19 in file "i2c_lcd.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  add             1    wreg     unsigned char 
  1891 ;;  nibble          1    2[COMRAM] unsigned char 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  add             1    3[COMRAM] unsigned char 
  1894 ;;  datos           1    4[COMRAM] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      void 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1904 ;;      Params:         1       0       0       0       0       0       0       0       0
  1905 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1907 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1908 ;;Total ram usage:        3 bytes
  1909 ;; Hardware stack levels used: 1
  1910 ;; Hardware stack levels required when called: 2
  1911 ;; This function calls:
  1912 ;;		_Lcd_I2C_Write
  1913 ;; This function is called by:
  1914 ;;		_Lcd_Send_Byte
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text19
  1919  00090E                     __ptext19:
  1920                           	callstack 0
  1921  00090E                     _Lcd_Port:
  1922                           	callstack 25
  1923                           
  1924                           ;incstack = 0
  1925                           ;Lcd_Port@add stored from wreg
  1926  00090E  6E04               	movwf	Lcd_Port@add^0,c
  1927  000910                     
  1928                           ;i2c_lcd.c: 19: void Lcd_Port(unsigned char add, unsigned char nibble);i2c_lcd.c: 20: {;
      +                          i2c_lcd.c: 21:     char datos;;i2c_lcd.c: 22:     if((nibble & 1)==1) datos = datos|0x10
      +                          ; else datos = datos&~0x10;
  1929  000910  A003               	btfss	Lcd_Port@nibble^0,0,c
  1930  000912  EF8D  F004         	goto	u381
  1931  000916  EF8F  F004         	goto	u380
  1932  00091A                     u381:
  1933  00091A  EF94  F004         	goto	l1484
  1934  00091E                     u380:
  1935  00091E  5005               	movf	Lcd_Port@datos^0,w,c
  1936  000920  0910               	iorlw	16
  1937  000922  6E05               	movwf	Lcd_Port@datos^0,c
  1938  000924  EF97  F004         	goto	l1486
  1939  000928                     l1484:
  1940  000928  5005               	movf	Lcd_Port@datos^0,w,c
  1941  00092A  0BEF               	andlw	239
  1942  00092C  6E05               	movwf	Lcd_Port@datos^0,c
  1943  00092E                     l1486:
  1944                           
  1945                           ;i2c_lcd.c: 23:     if((nibble & 2)==2) datos = datos|0x20; else datos = datos&~0x20;
  1946  00092E  A203               	btfss	Lcd_Port@nibble^0,1,c
  1947  000930  EF9C  F004         	goto	u391
  1948  000934  EF9E  F004         	goto	u390
  1949  000938                     u391:
  1950  000938  EFA3  F004         	goto	l1490
  1951  00093C                     u390:
  1952  00093C  5005               	movf	Lcd_Port@datos^0,w,c
  1953  00093E  0920               	iorlw	32
  1954  000940  6E05               	movwf	Lcd_Port@datos^0,c
  1955  000942  EFA6  F004         	goto	l1492
  1956  000946                     l1490:
  1957  000946  5005               	movf	Lcd_Port@datos^0,w,c
  1958  000948  0BDF               	andlw	223
  1959  00094A  6E05               	movwf	Lcd_Port@datos^0,c
  1960  00094C                     l1492:
  1961                           
  1962                           ;i2c_lcd.c: 24:     if((nibble & 4)==4) datos = datos|0x40; else datos = datos&~0x40;
  1963  00094C  A403               	btfss	Lcd_Port@nibble^0,2,c
  1964  00094E  EFAB  F004         	goto	u401
  1965  000952  EFAD  F004         	goto	u400
  1966  000956                     u401:
  1967  000956  EFB2  F004         	goto	l1496
  1968  00095A                     u400:
  1969  00095A  5005               	movf	Lcd_Port@datos^0,w,c
  1970  00095C  0940               	iorlw	64
  1971  00095E  6E05               	movwf	Lcd_Port@datos^0,c
  1972  000960  EFB5  F004         	goto	l1498
  1973  000964                     l1496:
  1974  000964  5005               	movf	Lcd_Port@datos^0,w,c
  1975  000966  0BBF               	andlw	191
  1976  000968  6E05               	movwf	Lcd_Port@datos^0,c
  1977  00096A                     l1498:
  1978                           
  1979                           ;i2c_lcd.c: 25:     if((nibble & 8)==8) datos = datos|0x80; else datos = datos&~0x80;
  1980  00096A  A603               	btfss	Lcd_Port@nibble^0,3,c
  1981  00096C  EFBA  F004         	goto	u411
  1982  000970  EFBC  F004         	goto	u410
  1983  000974                     u411:
  1984  000974  EFC1  F004         	goto	l1502
  1985  000978                     u410:
  1986  000978  5005               	movf	Lcd_Port@datos^0,w,c
  1987  00097A  0980               	iorlw	128
  1988  00097C  6E05               	movwf	Lcd_Port@datos^0,c
  1989  00097E  EFC4  F004         	goto	l1504
  1990  000982                     l1502:
  1991  000982  5005               	movf	Lcd_Port@datos^0,w,c
  1992  000984  0B7F               	andlw	127
  1993  000986  6E05               	movwf	Lcd_Port@datos^0,c
  1994  000988                     l1504:
  1995                           
  1996                           ;i2c_lcd.c: 26:     _delay((unsigned long)((60)*(4000000/4000000.0)));
  1997  000988  0E14               	movlw	20
  1998  00098A                     u697:
  1999  00098A  2EE8               	decfsz	wreg,f,c
  2000  00098C  D7FE               	bra	u697
  2001  00098E                     
  2002                           ;i2c_lcd.c: 27:     if(add == 1)
  2003  00098E  0404               	decf	Lcd_Port@add^0,w,c
  2004  000990  A4D8               	btfss	status,2,c
  2005  000992  EFCD  F004         	goto	u421
  2006  000996  EFCF  F004         	goto	u420
  2007  00099A                     u421:
  2008  00099A  EFD4  F004         	goto	l1510
  2009  00099E                     u420:
  2010  00099E                     
  2011                           ;i2c_lcd.c: 28:         datos = datos|0x01;
  2012  00099E  5005               	movf	Lcd_Port@datos^0,w,c
  2013  0009A0  0901               	iorlw	1
  2014  0009A2  6E05               	movwf	Lcd_Port@datos^0,c
  2015  0009A4  EFD7  F004         	goto	l1512
  2016  0009A8                     l1510:
  2017                           
  2018                           ;i2c_lcd.c: 30:         datos = datos &~0x01;
  2019  0009A8  5005               	movf	Lcd_Port@datos^0,w,c
  2020  0009AA  0BFE               	andlw	254
  2021  0009AC  6E05               	movwf	Lcd_Port@datos^0,c
  2022  0009AE                     l1512:
  2023                           
  2024                           ;i2c_lcd.c: 32:     Lcd_I2C_Write(datos|0x04);
  2025  0009AE  5005               	movf	Lcd_Port@datos^0,w,c
  2026  0009B0  0904               	iorlw	4
  2027  0009B2  ECC8  F006         	call	_Lcd_I2C_Write
  2028  0009B6                     
  2029                           ;i2c_lcd.c: 33:     _delay((unsigned long)((2)*(4000000/4000000.0)));
  2030  0009B6  D000               	nop2		;2 cycle nop
  2031  0009B8                     
  2032                           ;i2c_lcd.c: 34:     Lcd_I2C_Write(datos&~0x04);
  2033  0009B8  5005               	movf	Lcd_Port@datos^0,w,c
  2034  0009BA  0BFB               	andlw	251
  2035  0009BC  ECC8  F006         	call	_Lcd_I2C_Write
  2036  0009C0  0012               	return		;funcret
  2037  0009C2                     __end_of_Lcd_Port:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function _Lcd_I2C_Write *****************
  2041 ;; Defined at:
  2042 ;;		line 11 in file "i2c_lcd.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  dato            1    wreg     unsigned char 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  dato            1    1[COMRAM] unsigned char 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, status,2, status,0, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2056 ;;      Params:         0       0       0       0       0       0       0       0       0
  2057 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2059 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2060 ;;Total ram usage:        1 bytes
  2061 ;; Hardware stack levels used: 1
  2062 ;; Hardware stack levels required when called: 1
  2063 ;; This function calls:
  2064 ;;		_I2C_Start
  2065 ;;		_I2C_Stop
  2066 ;;		_I2C_Write
  2067 ;; This function is called by:
  2068 ;;		_Lcd_Port
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text20
  2073  000D90                     __ptext20:
  2074                           	callstack 0
  2075  000D90                     _Lcd_I2C_Write:
  2076                           	callstack 25
  2077                           
  2078                           ;incstack = 0
  2079                           ;Lcd_I2C_Write@dato stored from wreg
  2080  000D90  6E02               	movwf	Lcd_I2C_Write@dato^0,c
  2081  000D92                     
  2082                           ;i2c_lcd.c: 11: void Lcd_I2C_Write(unsigned char dato);i2c_lcd.c: 12: {;i2c_lcd.c: 13:  
      +                             I2C_Start();
  2083  000D92  ECEC  F006         	call	_I2C_Start	;wreg free
  2084  000D96                     
  2085                           ;i2c_lcd.c: 14:     I2C_Write(0x4E);
  2086  000D96  0E4E               	movlw	78
  2087  000D98  ECD5  F006         	call	_I2C_Write
  2088  000D9C                     
  2089                           ;i2c_lcd.c: 15:     I2C_Write(dato|0x08);
  2090  000D9C  5002               	movf	Lcd_I2C_Write@dato^0,w,c
  2091  000D9E  0908               	iorlw	8
  2092  000DA0  ECD5  F006         	call	_I2C_Write
  2093  000DA4                     
  2094                           ;i2c_lcd.c: 16:     I2C_Stop();
  2095  000DA4  ECE2  F006         	call	_I2C_Stop	;wreg free
  2096  000DA8  0012               	return		;funcret
  2097  000DAA                     __end_of_Lcd_I2C_Write:
  2098                           	callstack 0
  2099                           
  2100 ;; *************** function _I2C_Write *****************
  2101 ;; Defined at:
  2102 ;;		line 64 in file "i2c.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  data            1    wreg     unsigned char 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  data            1    0[COMRAM] unsigned char 
  2107 ;;  b_ok            2    0        short 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  2  181[None  ] short 
  2110 ;; Registers used:
  2111 ;;		wreg
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2120 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used: 1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_Lcd_I2C_Write
  2127 ;;		_Lcd_Init
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text21
  2132  000DAA                     __ptext21:
  2133                           	callstack 0
  2134  000DAA                     _I2C_Write:
  2135                           	callstack 25
  2136                           
  2137                           ;incstack = 0
  2138                           ;I2C_Write@data stored from wreg
  2139  000DAA  6E01               	movwf	I2C_Write@data^0,c
  2140  000DAC                     
  2141                           ;i2c.c: 64: short I2C_Write(char data);i2c.c: 65: {;i2c.c: 66:     SSPBUF = data;
  2142  000DAC  C001  FFC9         	movff	I2C_Write@data,4041	;volatile
  2143  000DB0                     l311:
  2144  000DB0  A69E               	btfss	158,3,c	;volatile
  2145  000DB2  EFDD  F006         	goto	u21
  2146  000DB6  EFDF  F006         	goto	u20
  2147  000DBA                     u21:
  2148  000DBA  EFD8  F006         	goto	l311
  2149  000DBE                     u20:
  2150  000DBE                     
  2151                           ;i2c.c: 68:     PIR1bits.SSPIF = 0;
  2152  000DBE  969E               	bcf	158,3,c	;volatile
  2153  000DC0  50C5               	movf	197,w,c	;volatile
  2154  000DC2  0012               	return		;funcret
  2155  000DC4                     __end_of_I2C_Write:
  2156                           	callstack 0
  2157                           
  2158 ;; *************** function _I2C_Stop *****************
  2159 ;; Defined at:
  2160 ;;		line 34 in file "i2c.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  1    wreg      void 
  2167 ;; Registers used:
  2168 ;;		None
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2174 ;;      Params:         0       0       0       0       0       0       0       0       0
  2175 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2177 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used: 1
  2180 ;; This function calls:
  2181 ;;		Nothing
  2182 ;; This function is called by:
  2183 ;;		_Lcd_I2C_Write
  2184 ;;		_Lcd_Init
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text22
  2189  000DC4                     __ptext22:
  2190                           	callstack 0
  2191  000DC4                     _I2C_Stop:
  2192                           	callstack 25
  2193  000DC4                     
  2194                           ;i2c.c: 36:     SSPCON2bits.PEN = 1;
  2195  000DC4  84C5               	bsf	197,2,c	;volatile
  2196  000DC6                     l287:
  2197  000DC6  A69E               	btfss	158,3,c	;volatile
  2198  000DC8  EFE8  F006         	goto	u31
  2199  000DCC  EFEA  F006         	goto	u30
  2200  000DD0                     u31:
  2201  000DD0  EFE3  F006         	goto	l287
  2202  000DD4                     u30:
  2203  000DD4                     
  2204                           ;i2c.c: 38:     PIR1bits.SSPIF = 0;
  2205  000DD4  969E               	bcf	158,3,c	;volatile
  2206  000DD6  0012               	return		;funcret
  2207  000DD8                     __end_of_I2C_Stop:
  2208                           	callstack 0
  2209                           
  2210 ;; *************** function _I2C_Start *****************
  2211 ;; Defined at:
  2212 ;;		line 27 in file "i2c.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      void 
  2219 ;; Registers used:
  2220 ;;		None
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2226 ;;      Params:         0       0       0       0       0       0       0       0       0
  2227 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2229 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2230 ;;Total ram usage:        0 bytes
  2231 ;; Hardware stack levels used: 1
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_Lcd_I2C_Write
  2236 ;;		_Lcd_Init
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text23
  2241  000DD8                     __ptext23:
  2242                           	callstack 0
  2243  000DD8                     _I2C_Start:
  2244                           	callstack 25
  2245  000DD8                     
  2246                           ;i2c.c: 29:     SSPCON2bits.SEN = 1;
  2247  000DD8  80C5               	bsf	197,0,c	;volatile
  2248  000DDA                     l281:
  2249  000DDA  A69E               	btfss	158,3,c	;volatile
  2250  000DDC  EFF2  F006         	goto	u11
  2251  000DE0  EFF4  F006         	goto	u10
  2252  000DE4                     u11:
  2253  000DE4  EFED  F006         	goto	l281
  2254  000DE8                     u10:
  2255  000DE8                     
  2256                           ;i2c.c: 31:     PIR1bits.SSPIF = 0;
  2257  000DE8  969E               	bcf	158,3,c	;volatile
  2258  000DEA  0012               	return		;funcret
  2259  000DEC                     __end_of_I2C_Start:
  2260                           	callstack 0
  2261                           
  2262                           	psect	rparam
  2263  0000                     
  2264                           	psect	idloc
  2265                           
  2266                           ;Config register IDLOC0 @ 0x200000
  2267                           ;	unspecified, using default values
  2268  200000                     	org	2097152
  2269  200000  FF                 	db	255
  2270                           
  2271                           ;Config register IDLOC1 @ 0x200001
  2272                           ;	unspecified, using default values
  2273  200001                     	org	2097153
  2274  200001  FF                 	db	255
  2275                           
  2276                           ;Config register IDLOC2 @ 0x200002
  2277                           ;	unspecified, using default values
  2278  200002                     	org	2097154
  2279  200002  FF                 	db	255
  2280                           
  2281                           ;Config register IDLOC3 @ 0x200003
  2282                           ;	unspecified, using default values
  2283  200003                     	org	2097155
  2284  200003  FF                 	db	255
  2285                           
  2286                           ;Config register IDLOC4 @ 0x200004
  2287                           ;	unspecified, using default values
  2288  200004                     	org	2097156
  2289  200004  FF                 	db	255
  2290                           
  2291                           ;Config register IDLOC5 @ 0x200005
  2292                           ;	unspecified, using default values
  2293  200005                     	org	2097157
  2294  200005  FF                 	db	255
  2295                           
  2296                           ;Config register IDLOC6 @ 0x200006
  2297                           ;	unspecified, using default values
  2298  200006                     	org	2097158
  2299  200006  FF                 	db	255
  2300                           
  2301                           ;Config register IDLOC7 @ 0x200007
  2302                           ;	unspecified, using default values
  2303  200007                     	org	2097159
  2304  200007  FF                 	db	255
  2305                           
  2306                           	psect	config
  2307                           
  2308                           ;Config register CONFIG1L @ 0x300000
  2309                           ;	PLL Selection
  2310                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2311                           ;	PLL Enable Configuration bit
  2312                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2313                           ;	CPU System Clock Postscaler
  2314                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2315                           ;	Low Speed USB mode with 48 MHz system clock
  2316                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2317  300000                     	org	3145728
  2318  300000  00                 	db	0
  2319                           
  2320                           ;Config register CONFIG1H @ 0x300001
  2321                           ;	Oscillator Selection
  2322                           ;	FOSC = INTOSCIO, Internal oscillator
  2323                           ;	Primary Oscillator Shutdown
  2324                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  2325                           ;	Fail-Safe Clock Monitor
  2326                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2327                           ;	Internal/External Oscillator Switchover
  2328                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2329  300001                     	org	3145729
  2330  300001  08                 	db	8
  2331                           
  2332                           ;Config register CONFIG2L @ 0x300002
  2333                           ;	Power-up Timer Enable
  2334                           ;	nPWRTEN = ON, Power up timer enabled
  2335                           ;	Brown-out Reset Enable
  2336                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  2337                           ;	Brown-out Reset Voltage
  2338                           ;	BORV = 190, BOR set to 1.9V nominal
  2339                           ;	Low-Power Brown-out Reset
  2340                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2341  300002                     	org	3145730
  2342  300002  58                 	db	88
  2343                           
  2344                           ;Config register CONFIG2H @ 0x300003
  2345                           ;	Watchdog Timer Enable bits
  2346                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2347                           ;	Watchdog Timer Postscaler
  2348                           ;	WDTPS = 32768, 1:32768
  2349  300003                     	org	3145731
  2350  300003  3C                 	db	60
  2351                           
  2352                           ; Padding undefined space
  2353  300004                     	org	3145732
  2354  300004  FF                 	db	255
  2355                           
  2356                           ;Config register CONFIG3H @ 0x300005
  2357                           ;	CCP2 MUX bit
  2358                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2359                           ;	PORTB A/D Enable bit
  2360                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2361                           ;	Timer3 Clock Input MUX bit
  2362                           ;	T3CMX = RC0, T3CKI function is on RC0
  2363                           ;	SDO Output MUX bit
  2364                           ;	SDOMX = RB3, SDO function is on RB3
  2365                           ;	Master Clear Reset Pin Enable
  2366                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2367  300005                     	org	3145733
  2368  300005  D1                 	db	209
  2369                           
  2370                           ;Config register CONFIG4L @ 0x300006
  2371                           ;	Stack Full/Underflow Reset
  2372                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2373                           ;	Single-Supply ICSP Enable bit
  2374                           ;	LVP = OFF, Single-Supply ICSP disabled
  2375                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2376                           ;	ICPRT = OFF, ICPORT disabled
  2377                           ;	Extended Instruction Set Enable bit
  2378                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2379                           ;	Background Debugger Enable bit
  2380                           ;	DEBUG = 0x1, unprogrammed default
  2381  300006                     	org	3145734
  2382  300006  81                 	db	129
  2383                           
  2384                           ; Padding undefined space
  2385  300007                     	org	3145735
  2386  300007  FF                 	db	255
  2387                           
  2388                           ;Config register CONFIG5L @ 0x300008
  2389                           ;	Block 0 Code Protect
  2390                           ;	CP0 = OFF, Block 0 is not code-protected
  2391                           ;	Block 1 Code Protect
  2392                           ;	CP1 = OFF, Block 1 is not code-protected
  2393                           ;	Block 2 Code Protect
  2394                           ;	CP2 = OFF, Block 2 is not code-protected
  2395                           ;	Block 3 Code Protect
  2396                           ;	CP3 = OFF, Block 3 is not code-protected
  2397  300008                     	org	3145736
  2398  300008  0F                 	db	15
  2399                           
  2400                           ;Config register CONFIG5H @ 0x300009
  2401                           ;	Boot Block Code Protect
  2402                           ;	CPB = OFF, Boot block is not code-protected
  2403                           ;	Data EEPROM Code Protect
  2404                           ;	CPD = OFF, Data EEPROM is not code-protected
  2405  300009                     	org	3145737
  2406  300009  C0                 	db	192
  2407                           
  2408                           ;Config register CONFIG6L @ 0x30000A
  2409                           ;	Block 0 Write Protect
  2410                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2411                           ;	Block 1 Write Protect
  2412                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2413                           ;	Block 2 Write Protect
  2414                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2415                           ;	Block 3 Write Protect
  2416                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2417  30000A                     	org	3145738
  2418  30000A  0F                 	db	15
  2419                           
  2420                           ;Config register CONFIG6H @ 0x30000B
  2421                           ;	Configuration Registers Write Protect
  2422                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2423                           ;	Boot Block Write Protect
  2424                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2425                           ;	Data EEPROM Write Protect
  2426                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2427  30000B                     	org	3145739
  2428  30000B  E0                 	db	224
  2429                           
  2430                           ;Config register CONFIG7L @ 0x30000C
  2431                           ;	Block 0 Table Read Protect
  2432                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2433                           ;	Block 1 Table Read Protect
  2434                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2435                           ;	Block 2 Table Read Protect
  2436                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2437                           ;	Block 3 Table Read Protect
  2438                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2439  30000C                     	org	3145740
  2440  30000C  0F                 	db	15
  2441                           
  2442                           ;Config register CONFIG7H @ 0x30000D
  2443                           ;	Boot Block Table Read Protect
  2444                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2445  30000D                     	org	3145741
  2446  30000D  40                 	db	64
  2447                           tosu	equ	0xFFF
  2448                           tosh	equ	0xFFE
  2449                           tosl	equ	0xFFD
  2450                           stkptr	equ	0xFFC
  2451                           pclatu	equ	0xFFB
  2452                           pclath	equ	0xFFA
  2453                           pcl	equ	0xFF9
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           prodh	equ	0xFF4
  2459                           prodl	equ	0xFF3
  2460                           indf0	equ	0xFEF
  2461                           postinc0	equ	0xFEE
  2462                           postdec0	equ	0xFED
  2463                           preinc0	equ	0xFEC
  2464                           plusw0	equ	0xFEB
  2465                           fsr0h	equ	0xFEA
  2466                           fsr0l	equ	0xFE9
  2467                           wreg	equ	0xFE8
  2468                           indf1	equ	0xFE7
  2469                           postinc1	equ	0xFE6
  2470                           postdec1	equ	0xFE5
  2471                           preinc1	equ	0xFE4
  2472                           plusw1	equ	0xFE3
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           bsr	equ	0xFE0
  2476                           indf2	equ	0xFDF
  2477                           postinc2	equ	0xFDE
  2478                           postdec2	equ	0xFDD
  2479                           preinc2	equ	0xFDC
  2480                           plusw2	equ	0xFDB
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           status	equ	0xFD8

Data Sizes:
    Strings     59
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[14]), STR_1(CODE[16]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[14]), STR_1(CODE[16]), 

    Lcd_Write_String@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[13]), 

    ESCRIBE_MENSAJE2@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[14]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Set_Cursor
    _splash_msg->_ESCRIBE_MENSAJE2
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE2->_strlen
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _configuro->_Lcd_Init
    _Lcd_Init->_Lcd_Send_Byte
    _LCD_INIT->_CURSOR_ONOFF
    _LCD_INIT->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _Lcd_Write_String->_Lcd_Send_Byte
    _Lcd_Set_Cursor->_Lcd_Send_Byte
    _Lcd_Send_Byte->_Lcd_Port
    _Lcd_Port->_Lcd_I2C_Write
    _Lcd_I2C_Write->_I2C_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8043
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _configuro
                         _splash_msg
 ---------------------------------------------------------------------------------
 (1) _splash_msg                                           0     0      0     912
                   _ESCRIBE_MENSAJE2
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (2) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ESCRIBE_MENSAJE2                                     6     4      2     552
                                              4 COMRAM     6     4      2
                         _ENVIA_CHAR
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0    2618
                           _LCD_INIT
                           _Lcd_Init
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0    2093
                                              7 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                      _Lcd_Send_Byte
 ---------------------------------------------------------------------------------
 (2) _LCD_INIT                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (3) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (3) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     2     0      2    2224
                                              7 COMRAM     2     0      2
                      _Lcd_Send_Byte
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1    2289
                                              7 COMRAM     4     3      1
                      _Lcd_Send_Byte
 ---------------------------------------------------------------------------------
 (3) _Lcd_Send_Byte                                        2     1      1    2027
                                              5 COMRAM     2     1      1
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             3     2      1     571
                                              2 COMRAM     3     2      1
                      _Lcd_I2C_Write
 ---------------------------------------------------------------------------------
 (5) _Lcd_I2C_Write                                        1     1      0      35
                                              1 COMRAM     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (6) _I2C_Write                                            3     3      0      20
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Set_Cursor
     _Lcd_Send_Byte
       _Lcd_Port
         _Lcd_I2C_Write
           _I2C_Start
           _I2C_Stop
           _I2C_Write
   _Lcd_Write_String
     _Lcd_Send_Byte
   _configuro
     _LCD_INIT
       _BORRAR_LCD
         _ENVIA_LCD_CMD
           _ENVIA_NIBBLE
           _LEER_LCD
       _CURSOR_HOME
         _ENVIA_LCD_CMD
       _CURSOR_ONOFF
         _ENVIA_LCD_CMD
       _LCD_CONFIG
         _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
     _Lcd_Init
       _I2C_Start
       _I2C_Stop
       _I2C_Write
       _Lcd_Send_Byte
   _splash_msg
     _ESCRIBE_MENSAJE2
       _ENVIA_CHAR
         _ENVIA_NIBBLE
         _LEER_LCD
       _strlen
     _POS_CURSOR
       _ENVIA_LCD_CMD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBIGSFRhhh        2C      0       0      20        0.0%
BITBIGSFRhhlhh       9      0       0      21        0.0%
BITBIGSFRhhllh      26      0       0      22        0.0%
BITBIGSFRhhlll       8      0       0      23        0.0%
BITBIGSFRhlh         1      0       0      24        0.0%
BITBIGSFRhll         5      0       0      25        0.0%
BITBIGSFRlhh         2      0       0      26        0.0%
BITBIGSFRlhl         5      0       0      27        0.0%
BITBIGSFRllh         2      0       0      28        0.0%
BITBIGSFRlllh       21      0       0      29        0.0%
BITBIGSFRllll        B      0       0      30        0.0%
ABS                  0      0       0      31        0.0%
BIGRAM             7FF      0       0      32        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Jun 22 20:55:56 2023

                      l26 0BC6                        l39 0DFC                        l71 0C6E  
                      l80 0D72                        l56 0D02                        l74 0E04  
                      l83 0CA2                        l68 0B50                        l77 0B06  
                      l87 0A7A                        l89 0AB4                        l97 0CD2  
                      u10 0DE8                        u11 0DE4                        u20 0DBE  
                      u21 0DBA                        u30 0DD4                        u31 0DD0  
                      u40 0AB4                        u41 0AB0             ENVIA_CHAR@aux 0003  
                     l201 09C0                       l204 0D8E                       l221 0A42  
                     l230 0C3A                       l311 0DB0                       l313 0DBE  
                     l209 090C                       l314 0DC2                       l166 0D56  
                     l281 0DDA                       l169 0D30                       l290 0DD6  
                     l283 0DE8                       l284 0DEA                       l188 0DA8  
                     l287 0DC6                       l289 0DD4                       u100 0CE6  
                     u101 0CE2                       u110 0CFC                       u111 0CF8  
                     u400 095A                       u401 0956                       u410 0978  
                     u411 0974                       u420 099E                       u421 099A  
                     u430 0BF4                       u431 0BF0                       u440 0BA0  
                     u441 0B9C                       u450 0BBE                       u507 0C4A  
                     u451 0BBA                       u380 091E                       u460 0B50  
                     u381 091A                       u517 0858                       u461 0B4C  
                     u390 093C                       u470 0890                       u391 0938  
                     u607 0AD6                       u471 088C                       u527 0874  
                     u480 0C3A                       u481 0C36                       u617 0C7E  
                     u537 08AA                       u627 0A50                       u547 08C4  
                     u637 0A5E                       u557 08DE                       u647 0A68  
                     u567 08F8                       u657 0A7E                       u577 0CAA  
                     u667 0A8C                       u587 0CBC                       u677 0A96  
                     u597 0AC6                       u687 0D6A                       u697 098A  
             LEER_LCD@aux 0001                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002                      l1000 0C00  
                    l1002 0DD8                      l1010 0DC4                      l1004 0DAC  
                    l1020 0A4E                      l1012 0A44                      l1006 0DC0  
                    l1030 0A66                      l1022 0A56                      l1014 0A48  
                    l1040 0A88                      l1032 0A6E                      l1024 0A5A  
                    l1016 0A4A                      l1050 0D5A                      l1042 0A92  
                    l1034 0A70                      l1026 0A5C                      l1018 0A4C  
                    l1130 0CE6                      l1060 0D96                      l1052 0D66  
                    l1044 0A9C                      l1036 0A7C                      l1028 0A64  
                    l1132 0CEC                      l1140 0C44                      l1062 0D9C  
                    l1054 0D68                      l1038 0A84                      l1070 0C78  
                    l1126 0DF6                      l1134 0CFC                      l1214 0CA4  
                    l1150 0C56                      l1142 0C48                      l1064 0DA4  
                    l1056 0D70                      l1048 0AA2                      l1080 0C8A  
                    l1072 0C7C                      l1128 0CD6                      l1216 0CB2  
                    l1152 0C5C                      l1144 0C50                      l1136 0C3E  
                    l1058 0D92                      l1082 0C90                      l1074 0C84  
                    l1066 0C72                      l1170 0AB6                      l1218 0CB6  
                    l1154 0C62                      l1146 0C52                      l1138 0C40  
                    l1500 0978                      l1084 0C96                      l1076 0C86  
                    l1068 0C74                      l1180 0AE2                      l1172 0ABA  
                    l1156 0C68                      l1148 0C54                      l1510 09A8  
                    l1502 0982                      l1086 0C9C                      l1078 0C88  
                    l1190 0B00                      l1182 0AE8                      l1174 0AC0  
                    l1512 09AE                      l1504 0988                      l1600 09C4  
                    l1168 0DFE                      l1184 0AEE                      l1176 0ACE  
                    l1520 0BD4                      l1514 09B6                      l1506 098E  
                    l1602 09C8                      l1186 0AF4                      l1178 0ADC  
                    l1522 0BD8                      l1530 0B90                      l1516 09B8  
                    l1508 099E                      l1604 09D8                      l1612 0A08  
                    l1620 0C06                      l1188 0AFA                      l1524 0BF4  
                    l1540 0B18                      l1532 0BA0                      l1606 09E8  
                    l1622 0C1A                      l1550 083E                      l1518 0BC8  
                    l1542 0B18                      l1534 0BAC                      l1630 0B56  
                    l1480 0910                      l1528 0D76                      l1608 09F8  
                    l1624 0C1E                      l1552 0842                      l1544 0B20  
                    l1536 0BBE                      l1632 0B5A                      l1490 0946  
                    l1482 091E                      l1618 0C02                      l1570 0880  
                    l1554 0848                      l1546 0B3C                      l1538 0B08  
                    l1634 0B70                      l1492 094C                      l1484 0928  
                    l1580 08D8                      l1572 0890                      l1564 0864  
                    l1556 0852                      l1548 0B3E                      l1636 0B7A  
                    l1628 0B52                      l1494 095A                      l1486 092E  
                    l1582 08F2                      l1574 08A4                      l1566 086E  
                    l1558 0860                      l1590 0D4E                      l1496 0964  
                    l1488 093C                      l1584 0902                      l1576 08B4  
                    l1568 087E                      l1592 0D52                      l1498 096A  
                    l1578 08CE                      l1586 0D32                      l1594 0D04  
                    l1588 0D40                      l1596 0D0E                      l1686 0A1C  
                    l1598 0D1A                      STR_1 0811                      STR_2 0821  
                    STR_3 082F                      STR_4 0801                      _LATD 000F8C  
     Lcd_Write_String@str 0008         ?_Lcd_Write_String 0008                      _main 0B52  
        __end_of_I2C_Stop 0DD8                      start 0000        ??_Lcd_Write_String 000A  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LCD_INIT 0CD4          __end_of_LEER_LCD 0AB6                     ?_main 0001  
                   _PORTD 000F83                     _TRISD 000F95               ?_POS_CURSOR 0004  
          Lcd_Send_Byte@n 0006         __end_of_I2C_Start 0DEC         __end_of_I2C_Write 0DC4  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
        __end_of_Lcd_Init 090E          __end_of_Lcd_Port 09C2           __initialization 0DEC  
            __end_of_main 0B8E                    ??_main 000C             __activetblptr 000002  
   __end_of_Lcd_Send_Byte 0D90                    _ANSELD 000F5E            Lcd_Port@nibble 0003  
                  _OSCCON 000FD3                    _SSPADD 000FC8                    _SSPBUF 000FC9  
    __end_of_ENVIA_NIBBLE 0D74                    isa$std 000001                    _strlen 0BC8  
               ?_I2C_Stop 0001              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
               ?_LCD_INIT 0001                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0DEC              ??_LCD_CONFIG 0004             ___rparam_used 000001  
            ??_ENVIA_CHAR 0002            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0E06  
          _Lcd_Set_Cursor 09C2          _ESCRIBE_MENSAJE2 0B08          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0D04                ??_I2C_Stop 0001        __end_of_LCD_CONFIG 0B08  
      __end_of_ENVIA_CHAR 0C70                 ?_Lcd_Init 0001                 ?_Lcd_Port 0003  
              ??_LCD_INIT 0005                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
  __end_of_Lcd_Set_Cursor 0A44                   ?_strlen 0001                ??_Lcd_Init 0008  
                 _SSP1ADD 000FC8                ??_Lcd_Port 0004                   _SSPCON1 000FC6  
                 _SSPCON2 000FC5              ??_POS_CURSOR 0005                   _SSPSTAT 000FC7  
               _I2C_Start 0DD8                 _I2C_Write 0DAA                   __Hparam 0000  
                 __Lparam 0000         __end_of_configuro 0D58              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0CA4                   __pcinit 0DEC        __end_of_POS_CURSOR 0BC8  
                 __ramtop 0800           ?_Lcd_Set_Cursor 0008                   __ptext0 0B52  
                 __ptext1 0D04                   __ptext2 0B8E                   __ptext3 0B08  
                 __ptext4 0BC8                   __ptext5 0C3C                   __ptext6 0D32  
                 __ptext7 083E                   __ptext8 0CA4                   __ptext9 0AB6  
        Lcd_Send_Byte@add 0007              _ENVIA_NIBBLE 0D58      end_of_initialization 0DEC  
           _Lcd_I2C_Write 0D90             __Lmediumconst 0000                ?_I2C_Start 0001  
              ?_I2C_Write 0001                 Lcd_Init@i 0009                   strlen@a 0003  
                 strlen@s 0001                 _PORTAbits 000F80         ESCRIBE_MENSAJE2@i 000A  
               _TRISAbits 000F92                 _TRISBbits 000F93                _splash_msg 0D04  
          ?_Lcd_I2C_Write 0001  __end_of_ESCRIBE_MENSAJE2 0B52              _CURSOR_ONOFF 0CD4  
      CURSOR_ONOFF@estado 0004          _Lcd_Write_String 0C02            __end_of_strlen 0C02  
           ??_CURSOR_HOME 0004       start_initialization 0DEC         ENVIA_LCD_CMD@dato 0002  
           Lcd_Port@datos 0005               ??_I2C_Start 0001               ??_I2C_Write 0001  
                ??_strlen 0003         Lcd_I2C_Write@dato 0002               ?_splash_msg 0001  
         ??_Lcd_I2C_Write 0002             _Lcd_Send_Byte 0D74       __end_of_CURSOR_HOME 0DFE  
        ??_Lcd_Set_Cursor 0009                 _configuro 0D32               __smallconst 0800  
                _I2C_Stop 0DC4            ?_Lcd_Send_Byte 0006                  _LCD_INIT 0CA4  
                _LEER_LCD 0A44                  _LATAbits 000F89                  _LATDbits 000F8C  
                _PIR1bits 000F9E            POS_CURSOR@fila 0005                ?_configuro 0001  
  ESCRIBE_MENSAJE2@cadena 0005               _CURSOR_HOME 0DF6                  _Lcd_Init 083E  
                _Lcd_Port 090E  __end_of_Lcd_Write_String 0C3C                  __Hrparam 0000  
       ?_ESCRIBE_MENSAJE2 0005                  __Lrparam 0000        ??_ESCRIBE_MENSAJE2 0007  
           I2C_Write@data 0001           ??_Lcd_Send_Byte 0007                  __ptext10 0CD4  
                __ptext11 0DF6                  __ptext20 0D90                  __ptext12 0DFE  
                __ptext21 0DAA                  __ptext13 0C70                  __ptext22 0DC4  
                __ptext14 0A44                  __ptext23 0DD8                  __ptext15 0D58  
                __ptext16 0C02                  __ptext17 09C2                  __ptext18 0D74  
                __ptext19 090E              _SSP1CON1bits 000FC6                _BORRAR_LCD 0DFE  
              _LCD_CONFIG 0AB6                _ENVIA_CHAR 0C3C                  isa$xinst 000000  
           _ENVIA_LCD_CMD 0C70               ??_configuro 000A               Lcd_Port@add 0004  
            ??_splash_msg 000B        __end_of_splash_msg 0D32            ?_ENVIA_LCD_CMD 0001  
             _SSPCON2bits 000FC5       ESCRIBE_MENSAJE2@tam 0009         Lcd_Set_Cursor@col 0008  
             ?_BORRAR_LCD 0001         Lcd_Set_Cursor@row 000B             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B8E     __end_of_Lcd_I2C_Write 0DAA               ?_LCD_CONFIG 0001  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
