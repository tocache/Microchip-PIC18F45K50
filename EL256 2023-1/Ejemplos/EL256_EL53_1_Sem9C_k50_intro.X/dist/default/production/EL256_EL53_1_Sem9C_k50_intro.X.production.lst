

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri May 19 11:10:46 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.35
    31                           ; Generated 05/05/2021 GMT
    32                           ; 
    33                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F45K50 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  000B34                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for _e_acentuado
    71  000B34  02                 	db	2
    72  000B35  04                 	db	4
    73  000B36  0E                 	db	14
    74  000B37  11                 	db	17
    75  000B38  1F                 	db	31
    76  000B39  10                 	db	16
    77  000B3A  0E                 	db	14
    78  000B3B  00                 	db	0
    79  0000                     _ANSELCbits	set	3933
    80  0000                     _TRISCbits	set	3988
    81  0000                     _LATD	set	3980
    82  0000                     _ANSELAbits	set	3931
    83  0000                     _ANSELBbits	set	3932
    84  0000                     _ANSELD	set	3934
    85  0000                     _PORTD	set	3971
    86  0000                     _LATDbits	set	3980
    87  0000                     _TRISAbits	set	3986
    88  0000                     _TRISBbits	set	3987
    89  0000                     _TRISD	set	3989
    90  0000                     _TRISEbits	set	3990
    91  0000                     _OSCCON	set	4051
    92  0000                     _LATCbits	set	3979
    93  0000                     _INTCON2bits	set	4081
    94  0000                     _ANSELEbits	set	3935
    95                           
    96                           	psect	smallconst
    97  000800                     __psmallconst:
    98                           	callstack 0
    99  000800  00                 	db	0
   100  000801                     STR_2:
   101  000801  43                 	db	67	;'C'
   102  000802  6F                 	db	111	;'o'
   103  000803  6E                 	db	110	;'n'
   104  000804  20                 	db	32
   105  000805  66                 	db	102	;'f'
   106  000806  65                 	db	101	;'e'
   107  000807  20                 	db	32
   108  000808  61                 	db	97	;'a'
   109  000809  70                 	db	112	;'p'
   110  00080A  72                 	db	114	;'r'
   111  00080B  6F                 	db	111	;'o'
   112  00080C  62                 	db	98	;'b'
   113  00080D  61                 	db	97	;'a'
   114  00080E  72                 	db	114	;'r'
   115  00080F  00                 	db	0
   116  000810                     STR_1:
   117  000810  48                 	db	72	;'H'
   118  000811  6F                 	db	111	;'o'
   119  000812  6C                 	db	108	;'l'
   120  000813  61                 	db	97	;'a'
   121  000814  20                 	db	32
   122  000815  4D                 	db	77	;'M'
   123  000816  75                 	db	117	;'u'
   124  000817  6E                 	db	110	;'n'
   125  000818  64                 	db	100	;'d'
   126  000819  6F                 	db	111	;'o'
   127  00081A  21                 	db	33
   128  00081B  00                 	db	0
   129  00081C  00                 	db	0	; dummy byte at the end
   130  0000                     
   131                           ; #config settings
   132                           
   133                           	psect	cinit
   134  000AB4                     __pcinit:
   135                           	callstack 0
   136  000AB4                     start_initialization:
   137                           	callstack 0
   138  000AB4                     __initialization:
   139                           	callstack 0
   140                           
   141                           ; Initialize objects allocated to COMRAM (8 bytes)
   142                           ; load TBLPTR registers with __pidataCOMRAM
   143  000AB4  0E34               	movlw	low __pidataCOMRAM
   144  000AB6  6EF6               	movwf	tblptrl,c
   145  000AB8  0E0B               	movlw	high __pidataCOMRAM
   146  000ABA  6EF7               	movwf	tblptrh,c
   147  000ABC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   148  000ABE  6EF8               	movwf	tblptru,c
   149  000AC0  EE00  F00A         	lfsr	0,__pdataCOMRAM
   150  000AC4  EE10 F008          	lfsr	1,8
   151  000AC8                     copy_data0:
   152  000AC8  0009               	tblrd		*+
   153  000ACA  CFF5 FFEE          	movff	tablat,postinc0
   154  000ACE  50E5               	movf	postdec1,w,c
   155  000AD0  50E1               	movf	fsr1l,w,c
   156  000AD2  E1FA               	bnz	copy_data0
   157  000AD4                     end_of_initialization:
   158                           	callstack 0
   159  000AD4                     __end_of__initialization:
   160                           	callstack 0
   161  000AD4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   162  000AD6  6EF8               	movwf	tblptru,c
   163  000AD8  0E08               	movlw	high __Lsmallconst
   164  000ADA  6EF7               	movwf	tblptrh,c
   165  000ADC  0100               	movlb	0
   166  000ADE  EF90  F005         	goto	_main	;jump to C main() function
   167                           
   168                           	psect	dataCOMRAM
   169  00000A                     __pdataCOMRAM:
   170                           	callstack 0
   171  00000A                     _e_acentuado:
   172                           	callstack 0
   173  00000A                     	ds	8
   174                           
   175                           	psect	cstackCOMRAM
   176  000001                     __pcstackCOMRAM:
   177                           	callstack 0
   178  000001                     ENVIA_NIBBLE@dato:
   179                           	callstack 0
   180  000001                     LEER_LCD@aux:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x0
   184  000001                     	ds	1
   185  000002                     ENVIA_CHAR@dato:
   186                           	callstack 0
   187  000002                     ENVIA_LCD_CMD@dato:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x1
   191  000002                     	ds	1
   192  000003                     ENVIA_CHAR@aux:
   193                           	callstack 0
   194  000003                     ENVIA_LCD_CMD@aux:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x2
   198  000003                     	ds	1
   199  000004                     ??_LCD_CONFIG:
   200  000004                     POS_CURSOR@columna:
   201                           	callstack 0
   202  000004                     CURSOR_ONOFF@estado:
   203                           	callstack 0
   204  000004                     ESCRIBE_MENSAJE@cadena:
   205                           	callstack 0
   206  000004                     GENERACARACTER@vector:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x3
   210  000004                     	ds	1
   211  000005                     POS_CURSOR@fila:
   212                           	callstack 0
   213                           
   214                           ; 1 bytes @ 0x4
   215  000005                     	ds	1
   216  000006                     ESCRIBE_MENSAJE@tam:
   217                           	callstack 0
   218  000006                     GENERACARACTER@pos:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x5
   222  000006                     	ds	1
   223  000007                     ??_ESCRIBE_MENSAJE:
   224  000007                     GENERACARACTER@i:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0x6
   228  000007                     	ds	1
   229  000008                     ??_LCD_Init:
   230                           
   231                           ; 1 bytes @ 0x7
   232  000008                     	ds	1
   233  000009                     ESCRIBE_MENSAJE@i:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x8
   237  000009                     	ds	1
   238  00000A                     
   239                           ; 1 bytes @ 0x9
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 44 in file "maincode2.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          0       0       0       0       0       0       0       0       0
   262 ;;      Totals:         0       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels required when called: 4
   265 ;; This function calls:
   266 ;;		_LCD_Init
   267 ;;		_configuro
   268 ;;		_pantallazo
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           	psect	text0
   275  000B20                     __ptext0:
   276                           	callstack 0
   277  000B20                     _main:
   278                           	callstack 27
   279  000B20                     
   280                           ;maincode2.c: 45:     configuro();
   281  000B20  EC71  F005         	call	_configuro	;wreg free
   282  000B24                     
   283                           ;maincode2.c: 46:     LCD_Init();
   284  000B24  ECF3  F004         	call	_LCD_Init	;wreg free
   285  000B28                     
   286                           ;maincode2.c: 47:     pantallazo();
   287  000B28  EC78  F004         	call	_pantallazo	;wreg free
   288  000B2C                     l134:
   289  000B2C  EF96  F005         	goto	l134
   290  000B30  EF00  F000         	goto	start
   291  000B34                     __end_of_main:
   292                           	callstack 0
   293                           
   294 ;; *************** function _pantallazo *****************
   295 ;; Defined at:
   296 ;;		line 35 in file "maincode2.c"
   297 ;; Parameters:    Size  Location     Type
   298 ;;		None
   299 ;; Auto vars:     Size  Location     Type
   300 ;;		None
   301 ;; Return value:  Size  Location     Type
   302 ;;                  1    wreg      void 
   303 ;; Registers used:
   304 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   305 ;; Tracked objects:
   306 ;;		On entry : 0/0
   307 ;;		On exit  : 0/0
   308 ;;		Unchanged: 0/0
   309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   310 ;;      Params:         0       0       0       0       0       0       0       0       0
   311 ;;      Locals:         0       0       0       0       0       0       0       0       0
   312 ;;      Temps:          0       0       0       0       0       0       0       0       0
   313 ;;      Totals:         0       0       0       0       0       0       0       0       0
   314 ;;Total ram usage:        0 bytes
   315 ;; Hardware stack levels used: 1
   316 ;; Hardware stack levels required when called: 3
   317 ;; This function calls:
   318 ;;		_ENVIA_CHAR
   319 ;;		_ESCRIBE_MENSAJE
   320 ;;		_POS_CURSOR
   321 ;; This function is called by:
   322 ;;		_main
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326                           	psect	text1
   327  0008F0                     __ptext1:
   328                           	callstack 0
   329  0008F0                     _pantallazo:
   330                           	callstack 27
   331  0008F0                     
   332                           ;maincode2.c: 36:     POS_CURSOR(1,2);
   333  0008F0  0E02               	movlw	2
   334  0008F2  6E04               	movwf	POS_CURSOR@columna^0,c
   335  0008F4  0E01               	movlw	1
   336  0008F6  ECD6  F004         	call	_POS_CURSOR
   337  0008FA                     
   338                           ;maincode2.c: 37:     ESCRIBE_MENSAJE("Hola Mundo!",11);
   339  0008FA  0E10               	movlw	low STR_1
   340  0008FC  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   341  0008FE  0E08               	movlw	high STR_1
   342  000900  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   343  000902  0E0B               	movlw	11
   344  000904  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   345  000906  EC99  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   346  00090A                     
   347                           ;maincode2.c: 38:     POS_CURSOR(2,0);
   348  00090A  0E00               	movlw	0
   349  00090C  6E04               	movwf	POS_CURSOR@columna^0,c
   350  00090E  0E02               	movlw	2
   351  000910  ECD6  F004         	call	_POS_CURSOR
   352                           
   353                           ;maincode2.c: 39:     ESCRIBE_MENSAJE("Con fe aprobar",14);
   354  000914  0E01               	movlw	low STR_2
   355  000916  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   356  000918  0E08               	movlw	high STR_2
   357  00091A  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   358  00091C  0E0E               	movlw	14
   359  00091E  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   360  000920  EC99  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   361  000924                     
   362                           ;maincode2.c: 40:     ENVIA_CHAR(0);
   363  000924  0E00               	movlw	0
   364  000926  EC0E  F005         	call	_ENVIA_CHAR
   365  00092A                     
   366                           ;maincode2.c: 41:     ENVIA_CHAR('!');
   367  00092A  0E21               	movlw	33
   368  00092C  EC0E  F005         	call	_ENVIA_CHAR
   369  000930  0012               	return		;funcret
   370  000932                     __end_of_pantallazo:
   371                           	callstack 0
   372                           
   373 ;; *************** function _POS_CURSOR *****************
   374 ;; Defined at:
   375 ;;		line 6 in file "LCD.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;  fila            1    wreg     unsigned char 
   378 ;;  columna         1    3[COMRAM] unsigned char 
   379 ;; Auto vars:     Size  Location     Type
   380 ;;  fila            1    4[COMRAM] unsigned char 
   381 ;; Return value:  Size  Location     Type
   382 ;;                  1    wreg      void 
   383 ;; Registers used:
   384 ;;		wreg, status,2, status,0, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 0/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   390 ;;      Params:         1       0       0       0       0       0       0       0       0
   391 ;;      Locals:         1       0       0       0       0       0       0       0       0
   392 ;;      Temps:          0       0       0       0       0       0       0       0       0
   393 ;;      Totals:         2       0       0       0       0       0       0       0       0
   394 ;;Total ram usage:        2 bytes
   395 ;; Hardware stack levels used: 1
   396 ;; Hardware stack levels required when called: 2
   397 ;; This function calls:
   398 ;;		_ENVIA_LCD_CMD
   399 ;; This function is called by:
   400 ;;		_pantallazo
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404                           	psect	text2
   405  0009AC                     __ptext2:
   406                           	callstack 0
   407  0009AC                     _POS_CURSOR:
   408                           	callstack 27
   409                           
   410                           ;incstack = 0
   411                           ;POS_CURSOR@fila stored from wreg
   412  0009AC  6E05               	movwf	POS_CURSOR@fila^0,c
   413  0009AE                     
   414                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   415  0009AE  0405               	decf	POS_CURSOR@fila^0,w,c
   416  0009B0  A4D8               	btfss	status,2,c
   417  0009B2  EFDD  F004         	goto	u121
   418  0009B6  EFDF  F004         	goto	u120
   419  0009BA                     u121:
   420  0009BA  EFE5  F004         	goto	l1041
   421  0009BE                     u120:
   422  0009BE                     
   423                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   424  0009BE  5004               	movf	POS_CURSOR@columna^0,w,c
   425  0009C0  0F80               	addlw	128
   426  0009C2  EC28  F005         	call	_ENVIA_LCD_CMD
   427                           
   428                           ;LCD.c: 11:  }
   429  0009C6  EFF2  F004         	goto	l24
   430  0009CA                     l1041:
   431  0009CA  0E02               	movlw	2
   432  0009CC  1805               	xorwf	POS_CURSOR@fila^0,w,c
   433  0009CE  A4D8               	btfss	status,2,c
   434  0009D0  EFEC  F004         	goto	u131
   435  0009D4  EFEE  F004         	goto	u130
   436  0009D8                     u131:
   437  0009D8  EFF2  F004         	goto	l24
   438  0009DC                     u130:
   439  0009DC                     
   440                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   441  0009DC  5004               	movf	POS_CURSOR@columna^0,w,c
   442  0009DE  0FC0               	addlw	192
   443  0009E0  EC28  F005         	call	_ENVIA_LCD_CMD
   444  0009E4                     l24:
   445  0009E4  0012               	return		;funcret
   446  0009E6                     __end_of_POS_CURSOR:
   447                           	callstack 0
   448                           
   449 ;; *************** function _ESCRIBE_MENSAJE *****************
   450 ;; Defined at:
   451 ;;		line 41 in file "LCD.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   454 ;;		 -> STR_2(15), STR_1(12), 
   455 ;;  tam             1    5[COMRAM] unsigned char 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  i               1    8[COMRAM] unsigned char 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   467 ;;      Params:         3       0       0       0       0       0       0       0       0
   468 ;;      Locals:         1       0       0       0       0       0       0       0       0
   469 ;;      Temps:          2       0       0       0       0       0       0       0       0
   470 ;;      Totals:         6       0       0       0       0       0       0       0       0
   471 ;;Total ram usage:        6 bytes
   472 ;; Hardware stack levels used: 1
   473 ;; Hardware stack levels required when called: 2
   474 ;; This function calls:
   475 ;;		_ENVIA_CHAR
   476 ;; This function is called by:
   477 ;;		_pantallazo
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text3
   482  000932                     __ptext3:
   483                           	callstack 0
   484  000932                     _ESCRIBE_MENSAJE:
   485                           	callstack 27
   486  000932                     
   487                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   488  000932  0E00               	movlw	0
   489  000934  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   490                           
   491                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   492  000936  0E00               	movlw	0
   493  000938  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   494  00093A  EFAE  F004         	goto	l1051
   495  00093E                     l1047:
   496                           
   497                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   498  00093E  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
   499  000940  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
   500  000942  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
   501  000944  0E00               	movlw	0
   502  000946  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
   503  000948  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
   504  00094A  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   505  00094E  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   506  000952                     	if	0	;tblptru may be non-zero
   507  000952                     	endif
   508  000952                     	if	0	;tblptru may be non-zero
   509  000952                     	endif
   510  000952  0008               	tblrd		*
   511  000954  50F5               	movf	tablat,w,c
   512  000956  EC0E  F005         	call	_ENVIA_CHAR
   513  00095A                     
   514                           ;LCD.c: 47:  }
   515  00095A  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
   516  00095C                     l1051:
   517  00095C  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
   518  00095E  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
   519  000960  A0D8               	btfss	status,0,c
   520  000962  EFB5  F004         	goto	u141
   521  000966  EFB7  F004         	goto	u140
   522  00096A                     u141:
   523  00096A  EF9F  F004         	goto	l1047
   524  00096E                     u140:
   525  00096E  0012               	return		;funcret
   526  000970                     __end_of_ESCRIBE_MENSAJE:
   527                           	callstack 0
   528                           
   529 ;; *************** function _configuro *****************
   530 ;; Defined at:
   531 ;;		line 8 in file "maincode2.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, status,2
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   545 ;;      Params:         0       0       0       0       0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0       0       0       0       0
   547 ;;      Temps:          0       0       0       0       0       0       0       0       0
   548 ;;      Totals:         0       0       0       0       0       0       0       0       0
   549 ;;Total ram usage:        0 bytes
   550 ;; Hardware stack levels used: 1
   551 ;; This function calls:
   552 ;;		Nothing
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text4
   559  000AE2                     __ptext4:
   560                           	callstack 0
   561  000AE2                     _configuro:
   562                           	callstack 30
   563  000AE2                     
   564                           ;maincode2.c: 10:     OSCCON = 0x52;
   565  000AE2  0E52               	movlw	82
   566  000AE4  6ED3               	movwf	211,c	;volatile
   567                           
   568                           ;maincode2.c: 12:     TRISD = 0x00;
   569  000AE6  0E00               	movlw	0
   570  000AE8  6E95               	movwf	149,c	;volatile
   571                           
   572                           ;maincode2.c: 13:     ANSELD = 0x00;
   573  000AEA  0E00               	movlw	0
   574  000AEC  010F               	movlb	15	; () banked
   575  000AEE  6F5E               	movwf	94,b	;volatile
   576  000AF0                     
   577                           ; BSR set to: 15
   578                           ;maincode2.c: 14:     TRISBbits.RB0 = 1;
   579  000AF0  8093               	bsf	147,0,c	;volatile
   580  000AF2                     
   581                           ; BSR set to: 15
   582                           ;maincode2.c: 15:     ANSELBbits.ANSB0 = 0;
   583  000AF2  915C               	bcf	92,0,b	;volatile
   584  000AF4                     
   585                           ; BSR set to: 15
   586                           ;maincode2.c: 16:     INTCON2bits.RBPU = 0;
   587  000AF4  9EF1               	bcf	241,7,c	;volatile
   588  000AF6                     
   589                           ; BSR set to: 15
   590                           ;maincode2.c: 17:     TRISEbits.RE0 = 0;
   591  000AF6  9096               	bcf	150,0,c	;volatile
   592  000AF8                     
   593                           ; BSR set to: 15
   594                           ;maincode2.c: 18:     ANSELEbits.ANSE0 = 0;
   595  000AF8  915F               	bcf	95,0,b	;volatile
   596  000AFA                     
   597                           ; BSR set to: 15
   598                           ;maincode2.c: 19:     TRISCbits.RC2 = 0;
   599  000AFA  9494               	bcf	148,2,c	;volatile
   600  000AFC                     
   601                           ; BSR set to: 15
   602                           ;maincode2.c: 20:     ANSELCbits.ANSC2 = 0;
   603  000AFC  955D               	bcf	93,2,b	;volatile
   604  000AFE                     
   605                           ; BSR set to: 15
   606                           ;maincode2.c: 21:     TRISAbits.RA0 = 1;
   607  000AFE  8092               	bsf	146,0,c	;volatile
   608  000B00                     
   609                           ; BSR set to: 15
   610                           ;maincode2.c: 22:     ANSELAbits.ANSA0 = 1;
   611  000B00  815B               	bsf	91,0,b	;volatile
   612  000B02                     
   613                           ; BSR set to: 15
   614  000B02  0012               	return		;funcret
   615  000B04                     __end_of_configuro:
   616                           	callstack 0
   617                           
   618 ;; *************** function _LCD_Init *****************
   619 ;; Defined at:
   620 ;;		line 25 in file "maincode2.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   634 ;;      Params:         0       0       0       0       0       0       0       0       0
   635 ;;      Locals:         0       0       0       0       0       0       0       0       0
   636 ;;      Temps:          1       0       0       0       0       0       0       0       0
   637 ;;      Totals:         1       0       0       0       0       0       0       0       0
   638 ;;Total ram usage:        1 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; Hardware stack levels required when called: 3
   641 ;; This function calls:
   642 ;;		_BORRAR_LCD
   643 ;;		_CURSOR_HOME
   644 ;;		_CURSOR_ONOFF
   645 ;;		_GENERACARACTER
   646 ;;		_LCD_CONFIG
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           	psect	text5
   653  0009E6                     __ptext5:
   654                           	callstack 0
   655  0009E6                     _LCD_Init:
   656                           	callstack 27
   657  0009E6                     
   658                           ;maincode2.c: 26:     _delay((unsigned long)((29)*(4000000UL/4000.0)));
   659  0009E6  0E26               	movlw	38
   660  0009E8  6E08               	movwf	??_LCD_Init^0,c
   661  0009EA  0EA8               	movlw	168
   662  0009EC                     u167:
   663  0009EC  2EE8               	decfsz	wreg,f,c
   664  0009EE  D7FE               	bra	u167
   665  0009F0  2E08               	decfsz	??_LCD_Init^0,f,c
   666  0009F2  D7FC               	bra	u167
   667  0009F4  D000               	nop2	
   668  0009F6                     
   669                           ;maincode2.c: 27:     LCD_CONFIG();
   670  0009F6  EC48  F004         	call	_LCD_CONFIG	;wreg free
   671  0009FA                     
   672                           ;maincode2.c: 28:     BORRAR_LCD();
   673  0009FA  ECA2  F005         	call	_BORRAR_LCD	;wreg free
   674  0009FE                     
   675                           ;maincode2.c: 29:     CURSOR_HOME();
   676  0009FE  EC9E  F005         	call	_CURSOR_HOME	;wreg free
   677  000A02                     
   678                           ;maincode2.c: 30:     CURSOR_ONOFF(1);
   679  000A02  0E01               	movlw	1
   680  000A04  EC42  F005         	call	_CURSOR_ONOFF
   681  000A08                     
   682                           ;maincode2.c: 31:     LATCbits.LC2 = 1;
   683  000A08  848B               	bsf	139,2,c	;volatile
   684  000A0A                     
   685                           ;maincode2.c: 32:     GENERACARACTER(e_acentuado,0);
   686  000A0A  0E0A               	movlw	low _e_acentuado
   687  000A0C  6E04               	movwf	GENERACARACTER@vector^0,c
   688  000A0E  0E00               	movlw	high _e_acentuado
   689  000A10  6E05               	movwf	(GENERACARACTER@vector+1)^0,c
   690  000A12  0E00               	movlw	0
   691  000A14  6E06               	movwf	GENERACARACTER@pos^0,c
   692  000A16  ECB8  F004         	call	_GENERACARACTER	;wreg free
   693  000A1A  0012               	return		;funcret
   694  000A1C                     __end_of_LCD_Init:
   695                           	callstack 0
   696                           
   697 ;; *************** function _LCD_CONFIG *****************
   698 ;; Defined at:
   699 ;;		line 72 in file "LCD.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, status,2, status,0, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         0       0       0       0       0       0       0       0       0
   714 ;;      Locals:         0       0       0       0       0       0       0       0       0
   715 ;;      Temps:          1       0       0       0       0       0       0       0       0
   716 ;;      Totals:         1       0       0       0       0       0       0       0       0
   717 ;;Total ram usage:        1 bytes
   718 ;; Hardware stack levels used: 1
   719 ;; Hardware stack levels required when called: 2
   720 ;; This function calls:
   721 ;;		_ENVIA_LCD_CMD
   722 ;;		_ENVIA_NIBBLE
   723 ;; This function is called by:
   724 ;;		_LCD_Init
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text6
   729  000890                     __ptext6:
   730                           	callstack 0
   731  000890                     _LCD_CONFIG:
   732                           	callstack 27
   733  000890                     
   734                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   735  000890  908C               	bcf	140,0,c	;volatile
   736                           
   737                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   738  000892  928C               	bcf	140,1,c	;volatile
   739  000894                     
   740                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   741  000894  0E30               	movlw	48
   742  000896  EC82  F005         	call	_ENVIA_NIBBLE
   743  00089A                     
   744                           ;LCD.c: 77:         _delay(24000);
   745  00089A  0E20               	movlw	32
   746  00089C  6E04               	movwf	??_LCD_CONFIG^0,c
   747  00089E  0E2A               	movlw	42
   748  0008A0                     u177:
   749  0008A0  2EE8               	decfsz	wreg,f,c
   750  0008A2  D7FE               	bra	u177
   751  0008A4  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   752  0008A6  D7FC               	bra	u177
   753  0008A8                     
   754                           ;LCD.c: 78:         _delay(24000);
   755  0008A8  0E20               	movlw	32
   756  0008AA  6E04               	movwf	??_LCD_CONFIG^0,c
   757  0008AC  0E2A               	movlw	42
   758  0008AE                     u187:
   759  0008AE  2EE8               	decfsz	wreg,f,c
   760  0008B0  D7FE               	bra	u187
   761  0008B2  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   762  0008B4  D7FC               	bra	u187
   763                           
   764                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   765  0008B6  0E30               	movlw	48
   766  0008B8  EC82  F005         	call	_ENVIA_NIBBLE
   767  0008BC                     
   768                           ;LCD.c: 83:  _delay(1200);
   769  0008BC  0EF0               	movlw	240
   770  0008BE                     u197:
   771  0008BE  D000               	nop2	
   772  0008C0  2EE8               	decfsz	wreg,f,c
   773  0008C2  D7FD               	bra	u197
   774  0008C4                     
   775                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   776  0008C4  0E30               	movlw	48
   777  0008C6  EC82  F005         	call	_ENVIA_NIBBLE
   778  0008CA                     
   779                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   780  0008CA  0E20               	movlw	32
   781  0008CC  EC82  F005         	call	_ENVIA_NIBBLE
   782  0008D0                     
   783                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   784  0008D0  0E01               	movlw	1
   785  0008D2  EC28  F005         	call	_ENVIA_LCD_CMD
   786  0008D6                     
   787                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   788  0008D6  0E28               	movlw	40
   789  0008D8  EC28  F005         	call	_ENVIA_LCD_CMD
   790  0008DC                     
   791                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   792  0008DC  0E0F               	movlw	15
   793  0008DE  EC28  F005         	call	_ENVIA_LCD_CMD
   794  0008E2                     
   795                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   796  0008E2  0E06               	movlw	6
   797  0008E4  EC28  F005         	call	_ENVIA_LCD_CMD
   798  0008E8                     
   799                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   800  0008E8  0E01               	movlw	1
   801  0008EA  EC28  F005         	call	_ENVIA_LCD_CMD
   802  0008EE  0012               	return		;funcret
   803  0008F0                     __end_of_LCD_CONFIG:
   804                           	callstack 0
   805                           
   806 ;; *************** function _GENERACARACTER *****************
   807 ;; Defined at:
   808 ;;		line 153 in file "LCD.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  vector          2    3[COMRAM] PTR const unsigned char 
   811 ;;		 -> e_acentuado(8), 
   812 ;;  pos             1    5[COMRAM] unsigned char 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  i               1    6[COMRAM] unsigned char 
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   824 ;;      Params:         3       0       0       0       0       0       0       0       0
   825 ;;      Locals:         1       0       0       0       0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0       0       0       0       0
   827 ;;      Totals:         4       0       0       0       0       0       0       0       0
   828 ;;Total ram usage:        4 bytes
   829 ;; Hardware stack levels used: 1
   830 ;; Hardware stack levels required when called: 2
   831 ;; This function calls:
   832 ;;		_ENVIA_CHAR
   833 ;;		_ENVIA_LCD_CMD
   834 ;; This function is called by:
   835 ;;		_LCD_Init
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text7
   840  000970                     __ptext7:
   841                           	callstack 0
   842  000970                     _GENERACARACTER:
   843                           	callstack 27
   844  000970                     
   845                           ;LCD.c: 153: void GENERACARACTER(const unsigned char *vector,unsigned char pos);LCD.c: 1
      +                          54: {;LCD.c: 155:  unsigned char i;;LCD.c: 156:  ENVIA_LCD_CMD(0x40+8*pos);
   846  000970  5006               	movf	GENERACARACTER@pos^0,w,c
   847  000972  0D08               	mullw	8
   848  000974  50F3               	movf	243,w,c
   849  000976  0F40               	addlw	64
   850  000978  EC28  F005         	call	_ENVIA_LCD_CMD
   851  00097C                     
   852                           ;LCD.c: 157:  for(i=0;i<8;i++)
   853  00097C  0E00               	movlw	0
   854  00097E  6E07               	movwf	GENERACARACTER@i^0,c
   855  000980                     l1061:
   856                           
   857                           ;LCD.c: 158:  {;LCD.c: 159:   ENVIA_CHAR(vector[i]);
   858  000980  5007               	movf	GENERACARACTER@i^0,w,c
   859  000982  2404               	addwf	GENERACARACTER@vector^0,w,c
   860  000984  6ED9               	movwf	fsr2l,c
   861  000986  0E00               	movlw	0
   862  000988  2005               	addwfc	(GENERACARACTER@vector+1)^0,w,c
   863  00098A  6EDA               	movwf	fsr2h,c
   864  00098C  50DF               	movf	indf2,w,c
   865  00098E  EC0E  F005         	call	_ENVIA_CHAR
   866  000992                     
   867                           ;LCD.c: 160:  }
   868  000992  2A07               	incf	GENERACARACTER@i^0,f,c
   869  000994  0E07               	movlw	7
   870  000996  6407               	cpfsgt	GENERACARACTER@i^0,c
   871  000998  EFD0  F004         	goto	u151
   872  00099C  EFD2  F004         	goto	u150
   873  0009A0                     u151:
   874  0009A0  EFC0  F004         	goto	l1061
   875  0009A4                     u150:
   876  0009A4                     
   877                           ;LCD.c: 161:  ENVIA_LCD_CMD(0x80);
   878  0009A4  0E80               	movlw	128
   879  0009A6  EC28  F005         	call	_ENVIA_LCD_CMD
   880  0009AA  0012               	return		;funcret
   881  0009AC                     __end_of_GENERACARACTER:
   882                           	callstack 0
   883                           
   884 ;; *************** function _ENVIA_CHAR *****************
   885 ;; Defined at:
   886 ;;		line 50 in file "LCD.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  dato            1    wreg     unsigned char 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  dato            1    1[COMRAM] unsigned char 
   891 ;;  aux             1    2[COMRAM] unsigned char 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, status,2, status,0, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   901 ;;      Params:         0       0       0       0       0       0       0       0       0
   902 ;;      Locals:         2       0       0       0       0       0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0       0       0       0
   904 ;;      Totals:         2       0       0       0       0       0       0       0       0
   905 ;;Total ram usage:        2 bytes
   906 ;; Hardware stack levels used: 1
   907 ;; Hardware stack levels required when called: 1
   908 ;; This function calls:
   909 ;;		_ENVIA_NIBBLE
   910 ;;		_LEER_LCD
   911 ;; This function is called by:
   912 ;;		_ESCRIBE_MENSAJE
   913 ;;		_GENERACARACTER
   914 ;;		_pantallazo
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text8
   919  000A1C                     __ptext8:
   920                           	callstack 0
   921  000A1C                     _ENVIA_CHAR:
   922                           	callstack 27
   923                           
   924                           ;incstack = 0
   925                           ;ENVIA_CHAR@dato stored from wreg
   926  000A1C  6E02               	movwf	ENVIA_CHAR@dato^0,c
   927  000A1E                     
   928                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   929  000A1E  808C               	bsf	140,0,c	;volatile
   930  000A20                     
   931                           ;LCD.c: 54:  LEER_LCD();
   932  000A20  EC0F  F004         	call	_LEER_LCD	;wreg free
   933  000A24                     
   934                           ;LCD.c: 55:  TRISD = 0x00;
   935  000A24  0E00               	movlw	0
   936  000A26  6E95               	movwf	149,c	;volatile
   937  000A28                     
   938                           ;LCD.c: 56:         _delay(1200);
   939  000A28  0EF0               	movlw	240
   940  000A2A                     u207:
   941  000A2A  D000               	nop2	
   942  000A2C  2EE8               	decfsz	wreg,f,c
   943  000A2E  D7FD               	bra	u207
   944  000A30                     
   945                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   946  000A30  928C               	bcf	140,1,c	;volatile
   947  000A32                     
   948                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   949  000A32  948C               	bcf	140,2,c	;volatile
   950  000A34                     
   951                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   952  000A34  808C               	bsf	140,0,c	;volatile
   953  000A36                     
   954                           ;LCD.c: 61:  aux = dato & 0xF0;
   955  000A36  5002               	movf	ENVIA_CHAR@dato^0,w,c
   956  000A38  0BF0               	andlw	240
   957  000A3A  6E03               	movwf	ENVIA_CHAR@aux^0,c
   958  000A3C                     
   959                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   960  000A3C  5003               	movf	ENVIA_CHAR@aux^0,w,c
   961  000A3E  EC82  F005         	call	_ENVIA_NIBBLE
   962  000A42                     
   963                           ;LCD.c: 63:  aux = dato << 4;
   964  000A42  3802               	swapf	ENVIA_CHAR@dato^0,w,c
   965  000A44  0BF0               	andlw	240
   966  000A46  6E03               	movwf	ENVIA_CHAR@aux^0,c
   967  000A48                     
   968                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   969  000A48  5003               	movf	ENVIA_CHAR@aux^0,w,c
   970  000A4A  EC82  F005         	call	_ENVIA_NIBBLE
   971  000A4E  0012               	return		;funcret
   972  000A50                     __end_of_ENVIA_CHAR:
   973                           	callstack 0
   974                           
   975 ;; *************** function _CURSOR_ONOFF *****************
   976 ;; Defined at:
   977 ;;		line 35 in file "LCD.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;  estado          1    wreg     unsigned char 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  estado          1    3[COMRAM] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   991 ;;      Params:         0       0       0       0       0       0       0       0       0
   992 ;;      Locals:         1       0       0       0       0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0       0       0
   994 ;;      Totals:         1       0       0       0       0       0       0       0       0
   995 ;;Total ram usage:        1 bytes
   996 ;; Hardware stack levels used: 1
   997 ;; Hardware stack levels required when called: 2
   998 ;; This function calls:
   999 ;;		_ENVIA_LCD_CMD
  1000 ;; This function is called by:
  1001 ;;		_LCD_Init
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text9
  1006  000A84                     __ptext9:
  1007                           	callstack 0
  1008  000A84                     _CURSOR_ONOFF:
  1009                           	callstack 27
  1010                           
  1011                           ;incstack = 0
  1012                           ;CURSOR_ONOFF@estado stored from wreg
  1013  000A84  6E04               	movwf	CURSOR_ONOFF@estado^0,c
  1014  000A86                     
  1015                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1016  000A86  5004               	movf	CURSOR_ONOFF@estado^0,w,c
  1017  000A88  A4D8               	btfss	status,2,c
  1018  000A8A  EF49  F005         	goto	u41
  1019  000A8E  EF4B  F005         	goto	u40
  1020  000A92                     u41:
  1021  000A92  EF4E  F005         	goto	l917
  1022  000A96                     u40:
  1023  000A96  0E0E               	movlw	14
  1024  000A98  EC28  F005         	call	_ENVIA_LCD_CMD
  1025  000A9C                     l917:
  1026                           
  1027                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1028  000A9C  0404               	decf	CURSOR_ONOFF@estado^0,w,c
  1029  000A9E  A4D8               	btfss	status,2,c
  1030  000AA0  EF54  F005         	goto	u51
  1031  000AA4  EF56  F005         	goto	u50
  1032  000AA8                     u51:
  1033  000AA8  EF59  F005         	goto	l42
  1034  000AAC                     u50:
  1035  000AAC  0E0C               	movlw	12
  1036  000AAE  EC28  F005         	call	_ENVIA_LCD_CMD
  1037  000AB2                     l42:
  1038  000AB2  0012               	return		;funcret
  1039  000AB4                     __end_of_CURSOR_ONOFF:
  1040                           	callstack 0
  1041                           
  1042 ;; *************** function _CURSOR_HOME *****************
  1043 ;; Defined at:
  1044 ;;		line 30 in file "LCD.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0, cstack
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1058 ;;      Params:         0       0       0       0       0       0       0       0       0
  1059 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1060 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1061 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1062 ;;Total ram usage:        0 bytes
  1063 ;; Hardware stack levels used: 1
  1064 ;; Hardware stack levels required when called: 2
  1065 ;; This function calls:
  1066 ;;		_ENVIA_LCD_CMD
  1067 ;; This function is called by:
  1068 ;;		_LCD_Init
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text10
  1073  000B3C                     __ptext10:
  1074                           	callstack 0
  1075  000B3C                     _CURSOR_HOME:
  1076                           	callstack 27
  1077  000B3C                     
  1078                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1079  000B3C  0E02               	movlw	2
  1080  000B3E  EC28  F005         	call	_ENVIA_LCD_CMD
  1081  000B42  0012               	return		;funcret
  1082  000B44                     __end_of_CURSOR_HOME:
  1083                           	callstack 0
  1084                           
  1085 ;; *************** function _BORRAR_LCD *****************
  1086 ;; Defined at:
  1087 ;;		line 67 in file "LCD.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1101 ;;      Params:         0       0       0       0       0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1104 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1105 ;;Total ram usage:        0 bytes
  1106 ;; Hardware stack levels used: 1
  1107 ;; Hardware stack levels required when called: 2
  1108 ;; This function calls:
  1109 ;;		_ENVIA_LCD_CMD
  1110 ;; This function is called by:
  1111 ;;		_LCD_Init
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text11
  1116  000B44                     __ptext11:
  1117                           	callstack 0
  1118  000B44                     _BORRAR_LCD:
  1119                           	callstack 27
  1120  000B44                     
  1121                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1122  000B44  0E01               	movlw	1
  1123  000B46  EC28  F005         	call	_ENVIA_LCD_CMD
  1124  000B4A  0012               	return		;funcret
  1125  000B4C                     __end_of_BORRAR_LCD:
  1126                           	callstack 0
  1127                           
  1128 ;; *************** function _ENVIA_LCD_CMD *****************
  1129 ;; Defined at:
  1130 ;;		line 104 in file "LCD.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  dato            1    wreg     unsigned char 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  dato            1    1[COMRAM] unsigned char 
  1135 ;;  aux             1    2[COMRAM] unsigned char 
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, status,2, status,0, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1145 ;;      Params:         0       0       0       0       0       0       0       0       0
  1146 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1148 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1149 ;;Total ram usage:        2 bytes
  1150 ;; Hardware stack levels used: 1
  1151 ;; Hardware stack levels required when called: 1
  1152 ;; This function calls:
  1153 ;;		_ENVIA_NIBBLE
  1154 ;;		_LEER_LCD
  1155 ;; This function is called by:
  1156 ;;		_POS_CURSOR
  1157 ;;		_CURSOR_HOME
  1158 ;;		_CURSOR_ONOFF
  1159 ;;		_BORRAR_LCD
  1160 ;;		_LCD_CONFIG
  1161 ;;		_GENERACARACTER
  1162 ;;		_BLINK_CURSOR
  1163 ;;		_DISPLAY_ONOFF
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text12
  1168  000A50                     __ptext12:
  1169                           	callstack 0
  1170  000A50                     _ENVIA_LCD_CMD:
  1171                           	callstack 27
  1172                           
  1173                           ;incstack = 0
  1174                           ;ENVIA_LCD_CMD@dato stored from wreg
  1175  000A50  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1176  000A52                     
  1177                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1178  000A52  908C               	bcf	140,0,c	;volatile
  1179  000A54                     
  1180                           ;LCD.c: 108:  LEER_LCD();
  1181  000A54  EC0F  F004         	call	_LEER_LCD	;wreg free
  1182  000A58                     
  1183                           ;LCD.c: 109:  TRISD = 0b00000000;
  1184  000A58  0E00               	movlw	0
  1185  000A5A  6E95               	movwf	149,c	;volatile
  1186  000A5C                     
  1187                           ;LCD.c: 111:         _delay(1200);
  1188  000A5C  0EF0               	movlw	240
  1189  000A5E                     u217:
  1190  000A5E  D000               	nop2	
  1191  000A60  2EE8               	decfsz	wreg,f,c
  1192  000A62  D7FD               	bra	u217
  1193  000A64                     
  1194                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1195  000A64  928C               	bcf	140,1,c	;volatile
  1196  000A66                     
  1197                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1198  000A66  948C               	bcf	140,2,c	;volatile
  1199  000A68                     
  1200                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1201  000A68  908C               	bcf	140,0,c	;volatile
  1202  000A6A                     
  1203                           ;LCD.c: 115:  aux = dato & 0xF0;
  1204  000A6A  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1205  000A6C  0BF0               	andlw	240
  1206  000A6E  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1207  000A70                     
  1208                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1209  000A70  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1210  000A72  EC82  F005         	call	_ENVIA_NIBBLE
  1211  000A76                     
  1212                           ;LCD.c: 117:  aux = dato<<4;
  1213  000A76  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1214  000A78  0BF0               	andlw	240
  1215  000A7A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1216  000A7C                     
  1217                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1218  000A7C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1219  000A7E  EC82  F005         	call	_ENVIA_NIBBLE
  1220  000A82  0012               	return		;funcret
  1221  000A84                     __end_of_ENVIA_LCD_CMD:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function _LEER_LCD *****************
  1225 ;; Defined at:
  1226 ;;		line 121 in file "LCD.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  aux             1    0[COMRAM] unsigned char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2, status,0
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1240 ;;      Params:         0       0       0       0       0       0       0       0       0
  1241 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1243 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1244 ;;Total ram usage:        1 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_ENVIA_CHAR
  1250 ;;		_ENVIA_LCD_CMD
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text13
  1255  00081E                     __ptext13:
  1256                           	callstack 0
  1257  00081E                     _LEER_LCD:
  1258                           	callstack 27
  1259  00081E                     
  1260                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1261  00081E  0EF8               	movlw	248
  1262  000820  6E95               	movwf	149,c	;volatile
  1263  000822                     
  1264                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1265  000822  908C               	bcf	140,0,c	;volatile
  1266  000824                     
  1267                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1268  000824  828C               	bsf	140,1,c	;volatile
  1269  000826                     
  1270                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1271  000826  848C               	bsf	140,2,c	;volatile
  1272  000828                     
  1273                           ;LCD.c: 128:         _delay(1200);
  1274  000828  0EF0               	movlw	240
  1275  00082A                     u227:
  1276  00082A  D000               	nop2	
  1277  00082C  2EE8               	decfsz	wreg,f,c
  1278  00082E  D7FD               	bra	u227
  1279  000830                     
  1280                           ;LCD.c: 130:  aux = PORTD;
  1281  000830  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1282  000834                     
  1283                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1284  000834  948C               	bcf	140,2,c	;volatile
  1285  000836                     
  1286                           ;LCD.c: 132:         _delay(1200);
  1287  000836  0EF0               	movlw	240
  1288  000838                     u237:
  1289  000838  D000               	nop2	
  1290  00083A  2EE8               	decfsz	wreg,f,c
  1291  00083C  D7FD               	bra	u237
  1292  00083E                     
  1293                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1294  00083E  848C               	bsf	140,2,c	;volatile
  1295  000840                     
  1296                           ;LCD.c: 135:         _delay(1200);
  1297  000840  0EF0               	movlw	240
  1298  000842                     u247:
  1299  000842  D000               	nop2	
  1300  000844  2EE8               	decfsz	wreg,f,c
  1301  000846  D7FD               	bra	u247
  1302  000848                     
  1303                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1304  000848  948C               	bcf	140,2,c	;volatile
  1305  00084A                     l835:
  1306                           
  1307                           ;LCD.c: 138:  aux = aux & 0x80;
  1308  00084A  5001               	movf	LEER_LCD@aux^0,w,c
  1309  00084C  0B80               	andlw	128
  1310  00084E  6E01               	movwf	LEER_LCD@aux^0,c
  1311                           
  1312                           ;LCD.c: 139:  while(aux == 0x80)
  1313  000850  EF3E  F004         	goto	l849
  1314  000854                     l67:
  1315                           
  1316                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1317  000854  848C               	bsf	140,2,c	;volatile
  1318  000856                     
  1319                           ;LCD.c: 142:             _delay(1200);
  1320  000856  0EF0               	movlw	240
  1321  000858                     u257:
  1322  000858  D000               	nop2	
  1323  00085A  2EE8               	decfsz	wreg,f,c
  1324  00085C  D7FD               	bra	u257
  1325  00085E                     
  1326                           ;LCD.c: 143:             aux = PORTD;
  1327  00085E  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1328  000862                     
  1329                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1330  000862  948C               	bcf	140,2,c	;volatile
  1331                           
  1332                           ;LCD.c: 145:             _delay(1200);
  1333  000864  0EF0               	movlw	240
  1334  000866                     u267:
  1335  000866  D000               	nop2	
  1336  000868  2EE8               	decfsz	wreg,f,c
  1337  00086A  D7FD               	bra	u267
  1338  00086C                     
  1339                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1340  00086C  848C               	bsf	140,2,c	;volatile
  1341                           
  1342                           ;LCD.c: 147:             _delay(1200);
  1343  00086E  0EF0               	movlw	240
  1344  000870                     u277:
  1345  000870  D000               	nop2	
  1346  000872  2EE8               	decfsz	wreg,f,c
  1347  000874  D7FD               	bra	u277
  1348  000876                     
  1349                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1350  000876  948C               	bcf	140,2,c	;volatile
  1351  000878  EF25  F004         	goto	l835
  1352  00087C                     l849:
  1353                           
  1354                           ;LCD.c: 139:  while(aux == 0x80)
  1355  00087C  0E80               	movlw	128
  1356  00087E  1801               	xorwf	LEER_LCD@aux^0,w,c
  1357  000880  B4D8               	btfsc	status,2,c
  1358  000882  EF45  F004         	goto	u11
  1359  000886  EF47  F004         	goto	u10
  1360  00088A                     u11:
  1361  00088A  EF2A  F004         	goto	l67
  1362  00088E                     u10:
  1363  00088E  0012               	return		;funcret
  1364  000890                     __end_of_LEER_LCD:
  1365                           	callstack 0
  1366                           
  1367 ;; *************** function _ENVIA_NIBBLE *****************
  1368 ;; Defined at:
  1369 ;;		line 93 in file "LCD.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  dato            1    wreg     unsigned char 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  dato            1    0[COMRAM] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1383 ;;      Params:         0       0       0       0       0       0       0       0       0
  1384 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1386 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1387 ;;Total ram usage:        1 bytes
  1388 ;; Hardware stack levels used: 1
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_ENVIA_CHAR
  1393 ;;		_LCD_CONFIG
  1394 ;;		_ENVIA_LCD_CMD
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text14
  1399  000B04                     __ptext14:
  1400                           	callstack 0
  1401  000B04                     _ENVIA_NIBBLE:
  1402                           	callstack 27
  1403                           
  1404                           ;incstack = 0
  1405                           ;ENVIA_NIBBLE@dato stored from wreg
  1406  000B04  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1407  000B06                     
  1408                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1409  000B06  0E0F               	movlw	15
  1410  000B08  168C               	andwf	140,f,c	;volatile
  1411                           
  1412                           ;LCD.c: 96:  dato &= 0xF0;
  1413  000B0A  0EF0               	movlw	240
  1414  000B0C  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1415                           
  1416                           ;LCD.c: 97:  LATD|= dato;
  1417  000B0E  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1418  000B10  128C               	iorwf	140,f,c	;volatile
  1419  000B12                     
  1420                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1421  000B12  848C               	bsf	140,2,c	;volatile
  1422  000B14                     
  1423                           ;LCD.c: 100:         _delay(1200);
  1424  000B14  0EF0               	movlw	240
  1425  000B16                     u287:
  1426  000B16  D000               	nop2	
  1427  000B18  2EE8               	decfsz	wreg,f,c
  1428  000B1A  D7FD               	bra	u287
  1429  000B1C                     
  1430                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1431  000B1C  948C               	bcf	140,2,c	;volatile
  1432  000B1E  0012               	return		;funcret
  1433  000B20                     __end_of_ENVIA_NIBBLE:
  1434                           	callstack 0
  1435                           
  1436                           	psect	rparam
  1437  0000                     
  1438                           	psect	idloc
  1439                           
  1440                           ;Config register IDLOC0 @ 0x200000
  1441                           ;	unspecified, using default values
  1442  200000                     	org	2097152
  1443  200000  FF                 	db	255
  1444                           
  1445                           ;Config register IDLOC1 @ 0x200001
  1446                           ;	unspecified, using default values
  1447  200001                     	org	2097153
  1448  200001  FF                 	db	255
  1449                           
  1450                           ;Config register IDLOC2 @ 0x200002
  1451                           ;	unspecified, using default values
  1452  200002                     	org	2097154
  1453  200002  FF                 	db	255
  1454                           
  1455                           ;Config register IDLOC3 @ 0x200003
  1456                           ;	unspecified, using default values
  1457  200003                     	org	2097155
  1458  200003  FF                 	db	255
  1459                           
  1460                           ;Config register IDLOC4 @ 0x200004
  1461                           ;	unspecified, using default values
  1462  200004                     	org	2097156
  1463  200004  FF                 	db	255
  1464                           
  1465                           ;Config register IDLOC5 @ 0x200005
  1466                           ;	unspecified, using default values
  1467  200005                     	org	2097157
  1468  200005  FF                 	db	255
  1469                           
  1470                           ;Config register IDLOC6 @ 0x200006
  1471                           ;	unspecified, using default values
  1472  200006                     	org	2097158
  1473  200006  FF                 	db	255
  1474                           
  1475                           ;Config register IDLOC7 @ 0x200007
  1476                           ;	unspecified, using default values
  1477  200007                     	org	2097159
  1478  200007  FF                 	db	255
  1479                           
  1480                           	psect	config
  1481                           
  1482                           ;Config register CONFIG1L @ 0x300000
  1483                           ;	PLL Selection
  1484                           ;	PLLSEL = PLL4X, 4x clock multiplier
  1485                           ;	PLL Enable Configuration bit
  1486                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  1487                           ;	CPU System Clock Postscaler
  1488                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  1489                           ;	Low Speed USB mode with 48 MHz system clock
  1490                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  1491  300000                     	org	3145728
  1492  300000  00                 	db	0
  1493                           
  1494                           ;Config register CONFIG1H @ 0x300001
  1495                           ;	Oscillator Selection
  1496                           ;	FOSC = INTOSCIO, Internal oscillator
  1497                           ;	Primary Oscillator Shutdown
  1498                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
  1499                           ;	Fail-Safe Clock Monitor
  1500                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1501                           ;	Internal/External Oscillator Switchover
  1502                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1503  300001                     	org	3145729
  1504  300001  08                 	db	8
  1505                           
  1506                           ;Config register CONFIG2L @ 0x300002
  1507                           ;	Power-up Timer Enable
  1508                           ;	nPWRTEN = ON, Power up timer enabled
  1509                           ;	Brown-out Reset Enable
  1510                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  1511                           ;	Brown-out Reset Voltage
  1512                           ;	BORV = 190, BOR set to 1.9V nominal
  1513                           ;	Low-Power Brown-out Reset
  1514                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  1515  300002                     	org	3145730
  1516  300002  58                 	db	88
  1517                           
  1518                           ;Config register CONFIG2H @ 0x300003
  1519                           ;	Watchdog Timer Enable bits
  1520                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  1521                           ;	Watchdog Timer Postscaler
  1522                           ;	WDTPS = 32768, 1:32768
  1523  300003                     	org	3145731
  1524  300003  3C                 	db	60
  1525                           
  1526                           ; Padding undefined space
  1527  300004                     	org	3145732
  1528  300004  FF                 	db	255
  1529                           
  1530                           ;Config register CONFIG3H @ 0x300005
  1531                           ;	CCP2 MUX bit
  1532                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  1533                           ;	PORTB A/D Enable bit
  1534                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1535                           ;	Timer3 Clock Input MUX bit
  1536                           ;	T3CMX = RC0, T3CKI function is on RC0
  1537                           ;	SDO Output MUX bit
  1538                           ;	SDOMX = RB3, SDO function is on RB3
  1539                           ;	Master Clear Reset Pin Enable
  1540                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  1541  300005                     	org	3145733
  1542  300005  D1                 	db	209
  1543                           
  1544                           ;Config register CONFIG4L @ 0x300006
  1545                           ;	Stack Full/Underflow Reset
  1546                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1547                           ;	Single-Supply ICSP Enable bit
  1548                           ;	LVP = OFF, Single-Supply ICSP disabled
  1549                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  1550                           ;	ICPRT = OFF, ICPORT disabled
  1551                           ;	Extended Instruction Set Enable bit
  1552                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  1553                           ;	Background Debugger Enable bit
  1554                           ;	DEBUG = 0x1, unprogrammed default
  1555  300006                     	org	3145734
  1556  300006  81                 	db	129
  1557                           
  1558                           ; Padding undefined space
  1559  300007                     	org	3145735
  1560  300007  FF                 	db	255
  1561                           
  1562                           ;Config register CONFIG5L @ 0x300008
  1563                           ;	Block 0 Code Protect
  1564                           ;	CP0 = OFF, Block 0 is not code-protected
  1565                           ;	Block 1 Code Protect
  1566                           ;	CP1 = OFF, Block 1 is not code-protected
  1567                           ;	Block 2 Code Protect
  1568                           ;	CP2 = OFF, Block 2 is not code-protected
  1569                           ;	Block 3 Code Protect
  1570                           ;	CP3 = OFF, Block 3 is not code-protected
  1571  300008                     	org	3145736
  1572  300008  0F                 	db	15
  1573                           
  1574                           ;Config register CONFIG5H @ 0x300009
  1575                           ;	Boot Block Code Protect
  1576                           ;	CPB = OFF, Boot block is not code-protected
  1577                           ;	Data EEPROM Code Protect
  1578                           ;	CPD = OFF, Data EEPROM is not code-protected
  1579  300009                     	org	3145737
  1580  300009  C0                 	db	192
  1581                           
  1582                           ;Config register CONFIG6L @ 0x30000A
  1583                           ;	Block 0 Write Protect
  1584                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  1585                           ;	Block 1 Write Protect
  1586                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  1587                           ;	Block 2 Write Protect
  1588                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  1589                           ;	Block 3 Write Protect
  1590                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  1591  30000A                     	org	3145738
  1592  30000A  0F                 	db	15
  1593                           
  1594                           ;Config register CONFIG6H @ 0x30000B
  1595                           ;	Configuration Registers Write Protect
  1596                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1597                           ;	Boot Block Write Protect
  1598                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  1599                           ;	Data EEPROM Write Protect
  1600                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1601  30000B                     	org	3145739
  1602  30000B  E0                 	db	224
  1603                           
  1604                           ;Config register CONFIG7L @ 0x30000C
  1605                           ;	Block 0 Table Read Protect
  1606                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  1607                           ;	Block 1 Table Read Protect
  1608                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  1609                           ;	Block 2 Table Read Protect
  1610                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  1611                           ;	Block 3 Table Read Protect
  1612                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  1613  30000C                     	org	3145740
  1614  30000C  0F                 	db	15
  1615                           
  1616                           ;Config register CONFIG7H @ 0x30000D
  1617                           ;	Boot Block Table Read Protect
  1618                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  1619  30000D                     	org	3145741
  1620  30000D  40                 	db	64
  1621                           tosu	equ	0xFFF
  1622                           tosh	equ	0xFFE
  1623                           tosl	equ	0xFFD
  1624                           stkptr	equ	0xFFC
  1625                           pclatu	equ	0xFFB
  1626                           pclath	equ	0xFFA
  1627                           pcl	equ	0xFF9
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           prodh	equ	0xFF4
  1633                           prodl	equ	0xFF3
  1634                           indf0	equ	0xFEF
  1635                           postinc0	equ	0xFEE
  1636                           postdec0	equ	0xFED
  1637                           preinc0	equ	0xFEC
  1638                           plusw0	equ	0xFEB
  1639                           fsr0h	equ	0xFEA
  1640                           fsr0l	equ	0xFE9
  1641                           wreg	equ	0xFE8
  1642                           indf1	equ	0xFE7
  1643                           postinc1	equ	0xFE6
  1644                           postdec1	equ	0xFE5
  1645                           preinc1	equ	0xFE4
  1646                           plusw1	equ	0xFE3
  1647                           fsr1h	equ	0xFE2
  1648                           fsr1l	equ	0xFE1
  1649                           bsr	equ	0xFE0
  1650                           indf2	equ	0xFDF
  1651                           postinc2	equ	0xFDE
  1652                           postdec2	equ	0xFDD
  1653                           preinc2	equ	0xFDC
  1654                           plusw2	equ	0xFDB
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8

Data Sizes:
    Strings     27
    Constant    0
    Data        8
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    GENERACARACTER@vector	PTR const unsigned char  size(2) Largest target is 8
		 -> e_acentuado(COMRAM[8]), 

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _pantallazo->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _LCD_Init->_GENERACARACTER
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _GENERACARACTER->_ENVIA_CHAR
    _GENERACARACTER->_ENVIA_LCD_CMD
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2024
                           _LCD_Init
                          _configuro
                         _pantallazo
 ---------------------------------------------------------------------------------
 (1) _pantallazo                                           0     0      0     995
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (2) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0    1029
                                              7 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                     _GENERACARACTER
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _GENERACARACTER                                       4     1      3     504
                                              3 COMRAM     4     1      3
                         _ENVIA_CHAR
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _GENERACARACTER
       _ENVIA_CHAR
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
   _configuro
   _pantallazo
     _ENVIA_CHAR
     _ESCRIBE_MENSAJE
       _ENVIA_CHAR
     _POS_CURSOR
       _ENVIA_LCD_CMD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      9      11       1       17.9%
BITBIGSFRhhl        3C      0       0      22        0.0%
BITBIGSFRllh        23      0       0      25        0.0%
BITBIGSFRhhhl       1D      0       0      21        0.0%
BITBIGSFRhhhh        E      0       0      20        0.0%
BITBIGSFRllll        8      0       0      26        0.0%
BITBIGSFRlh          7      0       0      24        0.0%
BITBIGSFRhll         5      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      11      27        0.0%
DATA                 0      0      11       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri May 19 11:10:46 2023

                     l24 09E4                       l42 0AB2                       l51 0A4E  
                     l60 0B1E                       l37 0B42                       l54 0B4A  
                     l63 0A82                       l48 096E                       l57 08EE  
                     l74 09AA                       l67 0854                       l69 088E  
                     u10 088E                       u11 088A                       u40 0A96  
                     u41 0A92                       u50 0AAC                       u51 0AA8  
          ENVIA_CHAR@aux 0003                      l123 0B02                      l126 0A1A  
                    l134 0B2C                      l135 0B2C                      l129 0930  
                    l821 0828                      l813 081E                      l901 0A48  
                    l831 0840                      l823 0830                      l815 0822  
                    l911 0B3C                      l841 0862                      l833 0848  
                    l825 0834                      l817 0824                      l913 0A86  
                    l851 0B06                      l843 086C                      l835 084A  
                    l827 0836                      l819 0826                      l915 0A96  
                    l931 0890                      l853 0B12                      l845 0876  
                    l837 0856                      l829 083E                      l861 0A54  
                    l917 0A9C                      l941 08C4                      l933 0894  
                    l855 0B14                      l839 085E                      l871 0A68  
                    l863 0A58                      l919 0AAC                      l951 08E2  
                    l943 08CA                      l935 089A                      l857 0B1C  
                    l849 087C                      l873 0A6A                      l865 0A5C  
                    l929 0B44                      l881 0A1E                      l953 08E8  
                    l945 08D0                      l937 08A8                      l875 0A70  
                    l867 0A64                      l859 0A52                      l891 0A32  
                    l883 0A20                      l947 08D6                      l939 08BC  
                    l971 0AE2                      l877 0A76                      l869 0A66  
                    l893 0A34                      l885 0A24                      l949 08DC  
                    l981 0AF8                      l973 0AF0                      l879 0A7C  
                    l895 0A36                      l887 0A28                      l983 0AFA  
                    l975 0AF2                      l897 0A3C                      l889 0A30  
                    l985 0AFC                      l977 0AF4                      l899 0A42  
                    l987 0AFE                      l979 0AF6                      l989 0B00  
                    u120 09BE                      u121 09BA                      u130 09DC  
                    u131 09D8                      u140 096E                      u141 096A  
                    u150 09A4                      u207 0A2A                      u151 09A0  
                    u217 0A5E                      u227 082A                      u237 0838  
                    u247 0842                      u167 09EC                      u257 0858  
                    u177 08A0                      u267 0866                      u187 08AE  
                    u277 0870                      u197 08BE                      u287 0B16  
            LEER_LCD@aux 0001                      wreg 000FE8             ?_CURSOR_HOME 0001  
         ??_ENVIA_NIBBLE 0001           ENVIA_CHAR@dato 0002                     l1041 09CA  
                   l1051 095C                     l1043 09DC                     l1061 0980  
                   l1053 0970                     l1045 0932                     l1037 09AE  
                   l1063 0992                     l1055 097C                     l1071 09F6  
                   l1047 093E                     l1039 09BE                     l1065 0994  
                   l1081 0A0A                     l1073 09FA                     l1049 095A  
                   l1067 09A4                     l1075 09FE                     l1091 092A  
                   l1083 08F0                     l1077 0A02                     l1069 09E6  
                   l1085 08FA                     l1093 0B20                     l1079 0A08  
                   l1087 090A                     l1095 0B24                     l1089 0924  
                   l1097 0B28                     STR_1 0810                     STR_2 0801  
                   _LATD 000F8C                     _main 0B20                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     prodl 000FF3  
                   start 0000            ?_CURSOR_ONOFF 0001             ___param_bank 000000  
        ??_ENVIA_LCD_CMD 0002         __end_of_LEER_LCD 0890         __end_of_LCD_Init 0A1C  
         _GENERACARACTER 0970                    ?_main 0001                    _PORTD 000F83  
                  _TRISD 000F95              ?_POS_CURSOR 0004                    tablat 000FF5  
                  status 000FD8           ??_CURSOR_ONOFF 0004          __initialization 0AB4  
           __end_of_main 0B34   __end_of_GENERACARACTER 09AC          _ESCRIBE_MENSAJE 0932  
                 ??_main 000A            __activetblptr 000001                   _ANSELD 000F5E  
                 _OSCCON 000FD3     __end_of_ENVIA_NIBBLE 0B20          ?_GENERACARACTER 0004  
                 isa$std 000001             __pdataCOMRAM 000A             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
           ??_BORRAR_LCD 0004                ?_LEER_LCD 0001               __accesstop 0060  
__end_of__initialization 0AD4                ?_LCD_Init 0001             ??_LCD_CONFIG 0004  
          ___rparam_used 000001             ??_ENVIA_CHAR 0002  __end_of_ESCRIBE_MENSAJE 0970  
         __pcstackCOMRAM 0001       __end_of_BORRAR_LCD 0B4C         ENVIA_LCD_CMD@aux 0003  
   __end_of_CURSOR_ONOFF 0AB4       __end_of_LCD_CONFIG 08F0       __end_of_ENVIA_CHAR 0A50  
             ??_LEER_LCD 0001         ENVIA_NIBBLE@dato 0001               ??_LCD_Init 0008  
           ??_POS_CURSOR 0005                  __Hparam 0000                  __Lparam 0000  
       ?_ESCRIBE_MENSAJE 0004        __end_of_configuro 0B04             __psmallconst 0800  
  __end_of_ENVIA_LCD_CMD 0A84                  __pcinit 0AB4       __end_of_POS_CURSOR 09E6  
                __ramtop 0800                  __ptext0 0B20                  __ptext1 08F0  
                __ptext2 09AC                  __ptext3 0932                  __ptext4 0AE2  
                __ptext5 09E6                  __ptext6 0890                  __ptext7 0970  
                __ptext8 0A1C                  __ptext9 0A84          GENERACARACTER@i 0007  
             _pantallazo 08F0             _ENVIA_NIBBLE 0B04     end_of_initialization 0AD4  
       ??_GENERACARACTER 0007                  postdec1 000FE5                  postinc0 000FEE  
   GENERACARACTER@vector 0004                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94                _TRISEbits 000F96             _CURSOR_ONOFF 0A84  
     CURSOR_ONOFF@estado 0004            __pidataCOMRAM 0B34            ??_CURSOR_HOME 0004  
    start_initialization 0AB4              ?_pantallazo 0001              _e_acentuado 000A  
      ENVIA_LCD_CMD@dato 0002      __end_of_CURSOR_HOME 0B44        GENERACARACTER@pos 0006  
              _configuro 0AE2              __smallconst 0800                 _LEER_LCD 081E  
               _LCD_Init 09E6                 _LATCbits 000F8B                 _LATDbits 000F8C  
       ESCRIBE_MENSAJE@i 0009           POS_CURSOR@fila 0005               ?_configuro 0001  
            _CURSOR_HOME 0B3C              _INTCON2bits 000FF1                copy_data0 0AC8  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0800  
             _ANSELAbits 000F5B               _ANSELBbits 000F5C               _ANSELCbits 000F5D  
             _ANSELEbits 000F5F             ??_pantallazo 000A                 __ptext10 0B3C  
               __ptext11 0B44                 __ptext12 0A50                 __ptext13 081E  
               __ptext14 0B04               _BORRAR_LCD 0B44               _LCD_CONFIG 0890  
             _ENVIA_CHAR 0A1C                 isa$xinst 000000       __end_of_pantallazo 0932  
          _ENVIA_LCD_CMD 0A50              ??_configuro 0001        ??_ESCRIBE_MENSAJE 0007  
  ESCRIBE_MENSAJE@cadena 0004           ?_ENVIA_LCD_CMD 0001              ?_BORRAR_LCD 0001  
          ?_ENVIA_NIBBLE 0001               _POS_CURSOR 09AC              ?_LCD_CONFIG 0001  
     ESCRIBE_MENSAJE@tam 0006              ?_ENVIA_CHAR 0001        POS_CURSOR@columna 0004  
